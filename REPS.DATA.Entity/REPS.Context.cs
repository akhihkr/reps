//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace REPS.DATA.Entity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class REPSEntities : DbContext
    {
        public REPSEntities()
            : base("name=REPSEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__RefactorLog> C__RefactorLog { get; set; }
        public virtual DbSet<AccountType> AccountType { get; set; }
        public virtual DbSet<AddressType> AddressType { get; set; }
        public virtual DbSet<Alerts> Alerts { get; set; }
        public virtual DbSet<AlertStatus> AlertStatus { get; set; }
        public virtual DbSet<AlertType> AlertType { get; set; }
        public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<Audit> Audit { get; set; }
        public virtual DbSet<AuditDetail> AuditDetail { get; set; }
        public virtual DbSet<BankorCreditUnion> BankorCreditUnion { get; set; }
        public virtual DbSet<Billing> Billing { get; set; }
        public virtual DbSet<BillingDiscount> BillingDiscount { get; set; }
        public virtual DbSet<BillingRate> BillingRate { get; set; }
        public virtual DbSet<BillingRateDetail> BillingRateDetail { get; set; }
        public virtual DbSet<BillingTaxRate> BillingTaxRate { get; set; }
        public virtual DbSet<Correspondence> Correspondence { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<CurrencyType> CurrencyType { get; set; }
        public virtual DbSet<DealStatus> DealStatus { get; set; }
        public virtual DbSet<DealType> DealType { get; set; }
        public virtual DbSet<DiscountType> DiscountType { get; set; }
        public virtual DbSet<DocumentType> DocumentType { get; set; }
        public virtual DbSet<DocumentVersion> DocumentVersion { get; set; }
        public virtual DbSet<FeeType> FeeType { get; set; }
        public virtual DbSet<FinancialInstrumentDetail> FinancialInstrumentDetail { get; set; }
        public virtual DbSet<FinancialObligation> FinancialObligation { get; set; }
        public virtual DbSet<FinancialObligationDetail> FinancialObligationDetail { get; set; }
        public virtual DbSet<FinancialTransaction> FinancialTransaction { get; set; }
        public virtual DbSet<IdentityType> IdentityType { get; set; }
        public virtual DbSet<InstrumentType> InstrumentType { get; set; }
        public virtual DbSet<InterestType> InterestType { get; set; }
        public virtual DbSet<InterestVariation> InterestVariation { get; set; }
        public virtual DbSet<JobTitle> JobTitle { get; set; }
        public virtual DbSet<Lenders> Lenders { get; set; }
        public virtual DbSet<MessageQueue> MessageQueue { get; set; }
        public virtual DbSet<MessageStatus> MessageStatus { get; set; }
        public virtual DbSet<MetaData> MetaData { get; set; }
        public virtual DbSet<MimeType> MimeType { get; set; }
        public virtual DbSet<Notification> Notification { get; set; }
        public virtual DbSet<NotificationType> NotificationType { get; set; }
        public virtual DbSet<Organization> Organization { get; set; }
        public virtual DbSet<OrganizationType> OrganizationType { get; set; }
        public virtual DbSet<ParticipantBankDetail> ParticipantBankDetail { get; set; }
        public virtual DbSet<ParticipantRole> ParticipantRole { get; set; }
        public virtual DbSet<ParticipantType> ParticipantType { get; set; }
        public virtual DbSet<Person> Person { get; set; }
        public virtual DbSet<PropertyType> PropertyType { get; set; }
        public virtual DbSet<Province> Province { get; set; }
        public virtual DbSet<ReportFilters> ReportFilters { get; set; }
        public virtual DbSet<ReportLocation> ReportLocation { get; set; }
        public virtual DbSet<Reports> Reports { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<SizeType> SizeType { get; set; }
        public virtual DbSet<Task> Task { get; set; }
        public virtual DbSet<Title> Title { get; set; }
        public virtual DbSet<Township> Township { get; set; }
        public virtual DbSet<Transaction> Transaction { get; set; }
        public virtual DbSet<TransactionDocuments> TransactionDocuments { get; set; }
        public virtual DbSet<TransactionStatus> TransactionStatus { get; set; }
        public virtual DbSet<TransactionType> TransactionType { get; set; }
        public virtual DbSet<UserAction> UserAction { get; set; }
        public virtual DbSet<UserDeal> UserDeal { get; set; }
        public virtual DbSet<UserDocument> UserDocument { get; set; }
        public virtual DbSet<UserRole> UserRole { get; set; }
        public virtual DbSet<UserRoleAction> UserRoleAction { get; set; }
        public virtual DbSet<VariableType> VariableType { get; set; }
        public virtual DbSet<Workflow> Workflow { get; set; }
        public virtual DbSet<WorkflowAction> WorkflowAction { get; set; }
        public virtual DbSet<WorkflowActionMap> WorkflowActionMap { get; set; }
        public virtual DbSet<WorkflowActionVariable> WorkflowActionVariable { get; set; }
        public virtual DbSet<WorkflowProgress> WorkflowProgress { get; set; }
        public virtual DbSet<WorkflowTask> WorkflowTask { get; set; }
        public virtual DbSet<WorkflowTransaction> WorkflowTransaction { get; set; }
        public virtual DbSet<WorkflowVariable> WorkflowVariable { get; set; }
        public virtual DbSet<Entity> Entity { get; set; }
        public virtual DbSet<Deal> Deal { get; set; }
        public virtual DbSet<Property> Property { get; set; }
        public virtual DbSet<Address> Address { get; set; }
        public virtual DbSet<PropertyDetail> PropertyDetail { get; set; }
        public virtual DbSet<FinancialInstrument> FinancialInstrument { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<TransactionDetail> TransactionDetail { get; set; }
        public virtual DbSet<DocumentTemplate> DocumentTemplate { get; set; }
        public virtual DbSet<DocumentWorkflow> DocumentWorkflow { get; set; }
        public virtual DbSet<Participant> Participant { get; set; }
        public virtual DbSet<Document> Document { get; set; }
        public virtual DbSet<FirmDetails> FirmDetails { get; set; }
    
        public virtual int REPS_AddAddress(Nullable<int> participantID, Nullable<int> addressTypeID, string addressLine1, string addressLine2, string city, Nullable<int> provinceID, Nullable<int> countryID, string postalCode, Nullable<System.DateTime> dateCreated, Nullable<bool> deleted, Nullable<bool> verified, ObjectParameter identity)
        {
            var participantIDParameter = participantID.HasValue ?
                new ObjectParameter("ParticipantID", participantID) :
                new ObjectParameter("ParticipantID", typeof(int));
    
            var addressTypeIDParameter = addressTypeID.HasValue ?
                new ObjectParameter("AddressTypeID", addressTypeID) :
                new ObjectParameter("AddressTypeID", typeof(int));
    
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("AddressLine1", addressLine1) :
                new ObjectParameter("AddressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("AddressLine2", addressLine2) :
                new ObjectParameter("AddressLine2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var provinceIDParameter = provinceID.HasValue ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var dateCreatedParameter = dateCreated.HasValue ?
                new ObjectParameter("DateCreated", dateCreated) :
                new ObjectParameter("DateCreated", typeof(System.DateTime));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("Deleted", deleted) :
                new ObjectParameter("Deleted", typeof(bool));
    
            var verifiedParameter = verified.HasValue ?
                new ObjectParameter("Verified", verified) :
                new ObjectParameter("Verified", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_AddAddress", participantIDParameter, addressTypeIDParameter, addressLine1Parameter, addressLine2Parameter, cityParameter, provinceIDParameter, countryIDParameter, postalCodeParameter, dateCreatedParameter, deletedParameter, verifiedParameter, identity);
        }
    
        public virtual int REPS_AddDeal(string uniqueReference, Nullable<int> dealTypeID, Nullable<int> workflowTaskID, Nullable<System.DateTime> dateCreated, string clientReference, Nullable<int> userID, Nullable<bool> deleted, ObjectParameter identity, Nullable<int> dealProcessTaskID)
        {
            var uniqueReferenceParameter = uniqueReference != null ?
                new ObjectParameter("UniqueReference", uniqueReference) :
                new ObjectParameter("UniqueReference", typeof(string));
    
            var dealTypeIDParameter = dealTypeID.HasValue ?
                new ObjectParameter("DealTypeID", dealTypeID) :
                new ObjectParameter("DealTypeID", typeof(int));
    
            var workflowTaskIDParameter = workflowTaskID.HasValue ?
                new ObjectParameter("WorkflowTaskID", workflowTaskID) :
                new ObjectParameter("WorkflowTaskID", typeof(int));
    
            var dateCreatedParameter = dateCreated.HasValue ?
                new ObjectParameter("DateCreated", dateCreated) :
                new ObjectParameter("DateCreated", typeof(System.DateTime));
    
            var clientReferenceParameter = clientReference != null ?
                new ObjectParameter("ClientReference", clientReference) :
                new ObjectParameter("ClientReference", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("Deleted", deleted) :
                new ObjectParameter("Deleted", typeof(bool));
    
            var dealProcessTaskIDParameter = dealProcessTaskID.HasValue ?
                new ObjectParameter("DealProcessTaskID", dealProcessTaskID) :
                new ObjectParameter("DealProcessTaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_AddDeal", uniqueReferenceParameter, dealTypeIDParameter, workflowTaskIDParameter, dateCreatedParameter, clientReferenceParameter, userIDParameter, deletedParameter, identity, dealProcessTaskIDParameter);
        }
    
        public virtual int REPS_AddParticipantBankDetail(Nullable<int> participantID, Nullable<int> bankID, Nullable<int> accountTypeID, string accountName, Nullable<decimal> accountNumber, Nullable<decimal> sortCode, Nullable<bool> verified, ObjectParameter identity)
        {
            var participantIDParameter = participantID.HasValue ?
                new ObjectParameter("ParticipantID", participantID) :
                new ObjectParameter("ParticipantID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var accountTypeIDParameter = accountTypeID.HasValue ?
                new ObjectParameter("AccountTypeID", accountTypeID) :
                new ObjectParameter("AccountTypeID", typeof(int));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var accountNumberParameter = accountNumber.HasValue ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(decimal));
    
            var sortCodeParameter = sortCode.HasValue ?
                new ObjectParameter("SortCode", sortCode) :
                new ObjectParameter("SortCode", typeof(decimal));
    
            var verifiedParameter = verified.HasValue ?
                new ObjectParameter("Verified", verified) :
                new ObjectParameter("Verified", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_AddParticipantBankDetail", participantIDParameter, bankIDParameter, accountTypeIDParameter, accountNameParameter, accountNumberParameter, sortCodeParameter, verifiedParameter, identity);
        }
    
        public virtual int REPS_AddPropertyDetail(Nullable<int> propertyID, Nullable<int> rightTypeID, string erfNumber, string portionNumber, string township, string name, string sectionNumber, string registrationDivision, string planNumber, Nullable<int> unitNumber, Nullable<int> sizeTypeID, string size, string geo, Nullable<System.DateTime> dateCreated, Nullable<bool> deleted, ObjectParameter identity)
        {
            var propertyIDParameter = propertyID.HasValue ?
                new ObjectParameter("PropertyID", propertyID) :
                new ObjectParameter("PropertyID", typeof(int));
    
            var rightTypeIDParameter = rightTypeID.HasValue ?
                new ObjectParameter("RightTypeID", rightTypeID) :
                new ObjectParameter("RightTypeID", typeof(int));
    
            var erfNumberParameter = erfNumber != null ?
                new ObjectParameter("ErfNumber", erfNumber) :
                new ObjectParameter("ErfNumber", typeof(string));
    
            var portionNumberParameter = portionNumber != null ?
                new ObjectParameter("PortionNumber", portionNumber) :
                new ObjectParameter("PortionNumber", typeof(string));
    
            var townshipParameter = township != null ?
                new ObjectParameter("Township", township) :
                new ObjectParameter("Township", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var sectionNumberParameter = sectionNumber != null ?
                new ObjectParameter("SectionNumber", sectionNumber) :
                new ObjectParameter("SectionNumber", typeof(string));
    
            var registrationDivisionParameter = registrationDivision != null ?
                new ObjectParameter("RegistrationDivision", registrationDivision) :
                new ObjectParameter("RegistrationDivision", typeof(string));
    
            var planNumberParameter = planNumber != null ?
                new ObjectParameter("PlanNumber", planNumber) :
                new ObjectParameter("PlanNumber", typeof(string));
    
            var unitNumberParameter = unitNumber.HasValue ?
                new ObjectParameter("UnitNumber", unitNumber) :
                new ObjectParameter("UnitNumber", typeof(int));
    
            var sizeTypeIDParameter = sizeTypeID.HasValue ?
                new ObjectParameter("SizeTypeID", sizeTypeID) :
                new ObjectParameter("SizeTypeID", typeof(int));
    
            var sizeParameter = size != null ?
                new ObjectParameter("Size", size) :
                new ObjectParameter("Size", typeof(string));
    
            var geoParameter = geo != null ?
                new ObjectParameter("Geo", geo) :
                new ObjectParameter("Geo", typeof(string));
    
            var dateCreatedParameter = dateCreated.HasValue ?
                new ObjectParameter("DateCreated", dateCreated) :
                new ObjectParameter("DateCreated", typeof(System.DateTime));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("Deleted", deleted) :
                new ObjectParameter("Deleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_AddPropertyDetail", propertyIDParameter, rightTypeIDParameter, erfNumberParameter, portionNumberParameter, townshipParameter, nameParameter, sectionNumberParameter, registrationDivisionParameter, planNumberParameter, unitNumberParameter, sizeTypeIDParameter, sizeParameter, geoParameter, dateCreatedParameter, deletedParameter, identity);
        }
    
        public virtual int REPS_AddUserRole(Nullable<int> userID, Nullable<int> roleID, ObjectParameter identity)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_AddUserRole", userIDParameter, roleIDParameter, identity);
        }
    
        public virtual int REPS_ADM_AddNewAction(string actionName, Nullable<int> workflowTaskID, ObjectParameter rowCount)
        {
            var actionNameParameter = actionName != null ?
                new ObjectParameter("actionName", actionName) :
                new ObjectParameter("actionName", typeof(string));
    
            var workflowTaskIDParameter = workflowTaskID.HasValue ?
                new ObjectParameter("workflowTaskID", workflowTaskID) :
                new ObjectParameter("workflowTaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_ADM_AddNewAction", actionNameParameter, workflowTaskIDParameter, rowCount);
        }
    
        public virtual int REPS_ADM_AddNewDocumentCategory(string categoryName, ObjectParameter rowCount)
        {
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("categoryName", categoryName) :
                new ObjectParameter("categoryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_ADM_AddNewDocumentCategory", categoryNameParameter, rowCount);
        }
    
        public virtual int REPS_ADM_AddRole(string roleName, ObjectParameter identity)
        {
            var roleNameParameter = roleName != null ?
                new ObjectParameter("roleName", roleName) :
                new ObjectParameter("roleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_ADM_AddRole", roleNameParameter, identity);
        }
    
        public virtual int REPS_ADM_AddWorkflow(string workflowName, Nullable<int> workflowID)
        {
            var workflowNameParameter = workflowName != null ?
                new ObjectParameter("workflowName", workflowName) :
                new ObjectParameter("workflowName", typeof(string));
    
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("workflowID", workflowID) :
                new ObjectParameter("workflowID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_ADM_AddWorkflow", workflowNameParameter, workflowIDParameter);
        }
    
        public virtual int REPS_ADM_AssignActionToTask(Nullable<int> workflowActionID, Nullable<int> workflowTaskID, ObjectParameter rowCount)
        {
            var workflowActionIDParameter = workflowActionID.HasValue ?
                new ObjectParameter("workflowActionID", workflowActionID) :
                new ObjectParameter("workflowActionID", typeof(int));
    
            var workflowTaskIDParameter = workflowTaskID.HasValue ?
                new ObjectParameter("workflowTaskID", workflowTaskID) :
                new ObjectParameter("workflowTaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_ADM_AssignActionToTask", workflowActionIDParameter, workflowTaskIDParameter, rowCount);
        }
    
        public virtual int REPS_ADM_AssignRoleActionToRole(Nullable<int> roleID, Nullable<int> userActionID, Nullable<bool> isActive, ObjectParameter rowCount)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var userActionIDParameter = userActionID.HasValue ?
                new ObjectParameter("UserActionID", userActionID) :
                new ObjectParameter("UserActionID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_ADM_AssignRoleActionToRole", roleIDParameter, userActionIDParameter, isActiveParameter, rowCount);
        }
    
        public virtual int REPS_ADM_AssignTaskToWorkflow(Nullable<int> taskID, Nullable<int> workflowID, ObjectParameter rowCount)
        {
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("taskID", taskID) :
                new ObjectParameter("taskID", typeof(int));
    
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("workflowID", workflowID) :
                new ObjectParameter("workflowID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_ADM_AssignTaskToWorkflow", taskIDParameter, workflowIDParameter, rowCount);
        }
    
        public virtual int REPS_ADM_DeleteEntity(Nullable<int> entityID, Nullable<bool> deleted, ObjectParameter rowCount)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("Deleted", deleted) :
                new ObjectParameter("Deleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_ADM_DeleteEntity", entityIDParameter, deletedParameter, rowCount);
        }
    
        public virtual int REPS_ADM_DeleteTask(Nullable<int> workflowTaskID, ObjectParameter rowCount)
        {
            var workflowTaskIDParameter = workflowTaskID.HasValue ?
                new ObjectParameter("workflowTaskID", workflowTaskID) :
                new ObjectParameter("workflowTaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_ADM_DeleteTask", workflowTaskIDParameter, rowCount);
        }
    
        public virtual int REPS_ADM_DeleteWorkflow(Nullable<int> workflowID, ObjectParameter rowCount)
        {
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("workflowID", workflowID) :
                new ObjectParameter("workflowID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_ADM_DeleteWorkflow", workflowIDParameter, rowCount);
        }
    
        public virtual ObjectResult<REPS_ADM_DownloadTemplate_Result> REPS_ADM_DownloadTemplate(Nullable<int> documentTemplateID)
        {
            var documentTemplateIDParameter = documentTemplateID.HasValue ?
                new ObjectParameter("documentTemplateID", documentTemplateID) :
                new ObjectParameter("documentTemplateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_ADM_DownloadTemplate_Result>("REPS_ADM_DownloadTemplate", documentTemplateIDParameter);
        }
    
        public virtual ObjectResult<REPS_ADM_GetAllActions_Result> REPS_ADM_GetAllActions(Nullable<int> workflowTaskID)
        {
            var workflowTaskIDParameter = workflowTaskID.HasValue ?
                new ObjectParameter("workflowTaskID", workflowTaskID) :
                new ObjectParameter("workflowTaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_ADM_GetAllActions_Result>("REPS_ADM_GetAllActions", workflowTaskIDParameter);
        }
    
        public virtual ObjectResult<REPS_ADM_GetAllRoleActions_Result> REPS_ADM_GetAllRoleActions(Nullable<int> roleID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("roleID", roleID) :
                new ObjectParameter("roleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_ADM_GetAllRoleActions_Result>("REPS_ADM_GetAllRoleActions", roleIDParameter);
        }
    
        public virtual ObjectResult<REPS_ADM_GetAllTasksPerProcess_Result> REPS_ADM_GetAllTasksPerProcess(Nullable<int> processID, Nullable<int> workflowID)
        {
            var processIDParameter = processID.HasValue ?
                new ObjectParameter("processID", processID) :
                new ObjectParameter("processID", typeof(int));
    
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("workflowID", workflowID) :
                new ObjectParameter("workflowID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_ADM_GetAllTasksPerProcess_Result>("REPS_ADM_GetAllTasksPerProcess", processIDParameter, workflowIDParameter);
        }
    
        public virtual ObjectResult<string> REPS_ADM_GetDocumentVersionByTemplateID(Nullable<int> templateID)
        {
            var templateIDParameter = templateID.HasValue ?
                new ObjectParameter("templateID", templateID) :
                new ObjectParameter("templateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("REPS_ADM_GetDocumentVersionByTemplateID", templateIDParameter);
        }
    
        public virtual ObjectResult<REPS_ADM_GetWorkflowActionIsMandatory_Result> REPS_ADM_GetWorkflowActionIsMandatory(Nullable<int> actionID, Nullable<int> workflowTaskID)
        {
            var actionIDParameter = actionID.HasValue ?
                new ObjectParameter("actionID", actionID) :
                new ObjectParameter("actionID", typeof(int));
    
            var workflowTaskIDParameter = workflowTaskID.HasValue ?
                new ObjectParameter("workflowTaskID", workflowTaskID) :
                new ObjectParameter("workflowTaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_ADM_GetWorkflowActionIsMandatory_Result>("REPS_ADM_GetWorkflowActionIsMandatory", actionIDParameter, workflowTaskIDParameter);
        }
    
        public virtual ObjectResult<REPS_ADM_GetWorkFlowTasksActionsByTaskID_Result> REPS_ADM_GetWorkFlowTasksActionsByTaskID(Nullable<int> taskID)
        {
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("TaskID", taskID) :
                new ObjectParameter("TaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_ADM_GetWorkFlowTasksActionsByTaskID_Result>("REPS_ADM_GetWorkFlowTasksActionsByTaskID", taskIDParameter);
        }
    
        public virtual ObjectResult<REPS_ADM_GetWorkflowVariableList_Result> REPS_ADM_GetWorkflowVariableList(Nullable<int> actionID)
        {
            var actionIDParameter = actionID.HasValue ?
                new ObjectParameter("actionID", actionID) :
                new ObjectParameter("actionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_ADM_GetWorkflowVariableList_Result>("REPS_ADM_GetWorkflowVariableList", actionIDParameter);
        }
    
        public virtual int REPS_ADM_ToggleActionMandatory(Nullable<int> actionID, Nullable<bool> toggle, ObjectParameter rowCount)
        {
            var actionIDParameter = actionID.HasValue ?
                new ObjectParameter("actionID", actionID) :
                new ObjectParameter("actionID", typeof(int));
    
            var toggleParameter = toggle.HasValue ?
                new ObjectParameter("toggle", toggle) :
                new ObjectParameter("toggle", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_ADM_ToggleActionMandatory", actionIDParameter, toggleParameter, rowCount);
        }
    
        public virtual int REPS_ADM_ToggleWorkflowVariable(Nullable<int> workflowVariableID, Nullable<int> actionID, Nullable<bool> toggle, ObjectParameter rowCount)
        {
            var workflowVariableIDParameter = workflowVariableID.HasValue ?
                new ObjectParameter("workflowVariableID", workflowVariableID) :
                new ObjectParameter("workflowVariableID", typeof(int));
    
            var actionIDParameter = actionID.HasValue ?
                new ObjectParameter("actionID", actionID) :
                new ObjectParameter("actionID", typeof(int));
    
            var toggleParameter = toggle.HasValue ?
                new ObjectParameter("toggle", toggle) :
                new ObjectParameter("toggle", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_ADM_ToggleWorkflowVariable", workflowVariableIDParameter, actionIDParameter, toggleParameter, rowCount);
        }
    
        public virtual int REPS_ADM_ToggleWorkflowVariableRequired(Nullable<int> workflowVariableID, Nullable<int> actionID, Nullable<bool> toggle, ObjectParameter rowCount)
        {
            var workflowVariableIDParameter = workflowVariableID.HasValue ?
                new ObjectParameter("workflowVariableID", workflowVariableID) :
                new ObjectParameter("workflowVariableID", typeof(int));
    
            var actionIDParameter = actionID.HasValue ?
                new ObjectParameter("actionID", actionID) :
                new ObjectParameter("actionID", typeof(int));
    
            var toggleParameter = toggle.HasValue ?
                new ObjectParameter("toggle", toggle) :
                new ObjectParameter("toggle", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_ADM_ToggleWorkflowVariableRequired", workflowVariableIDParameter, actionIDParameter, toggleParameter, rowCount);
        }
    
        public virtual int REPS_ADM_UnAssignActionFromTask(Nullable<int> workflowActionID, Nullable<int> workflowTaskID, ObjectParameter rowCount)
        {
            var workflowActionIDParameter = workflowActionID.HasValue ?
                new ObjectParameter("workflowActionID", workflowActionID) :
                new ObjectParameter("workflowActionID", typeof(int));
    
            var workflowTaskIDParameter = workflowTaskID.HasValue ?
                new ObjectParameter("workflowTaskID", workflowTaskID) :
                new ObjectParameter("workflowTaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_ADM_UnAssignActionFromTask", workflowActionIDParameter, workflowTaskIDParameter, rowCount);
        }
    
        public virtual int REPS_ADM_UnAssignTaskFromWorkflow(Nullable<int> taskID, Nullable<int> workflowID, ObjectParameter rowCount)
        {
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("taskID", taskID) :
                new ObjectParameter("taskID", typeof(int));
    
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("workflowID", workflowID) :
                new ObjectParameter("workflowID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_ADM_UnAssignTaskFromWorkflow", taskIDParameter, workflowIDParameter, rowCount);
        }
    
        public virtual int REPS_ADM_UpdateActionName(string actionName, Nullable<int> actionID, ObjectParameter rowCount)
        {
            var actionNameParameter = actionName != null ?
                new ObjectParameter("actionName", actionName) :
                new ObjectParameter("actionName", typeof(string));
    
            var actionIDParameter = actionID.HasValue ?
                new ObjectParameter("actionID", actionID) :
                new ObjectParameter("actionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_ADM_UpdateActionName", actionNameParameter, actionIDParameter, rowCount);
        }
    
        public virtual int REPS_ADM_UpdateRole(Nullable<int> roleID, string roleName, ObjectParameter rowCount)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("roleID", roleID) :
                new ObjectParameter("roleID", typeof(int));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("roleName", roleName) :
                new ObjectParameter("roleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_ADM_UpdateRole", roleIDParameter, roleNameParameter, rowCount);
        }
    
        public virtual int REPS_ADM_UpdateTask(Nullable<int> workflowTaskID, Nullable<int> taskID, string taskName, Nullable<int> taskOrder, string icon, ObjectParameter rowCount)
        {
            var workflowTaskIDParameter = workflowTaskID.HasValue ?
                new ObjectParameter("workflowTaskID", workflowTaskID) :
                new ObjectParameter("workflowTaskID", typeof(int));
    
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("taskID", taskID) :
                new ObjectParameter("taskID", typeof(int));
    
            var taskNameParameter = taskName != null ?
                new ObjectParameter("taskName", taskName) :
                new ObjectParameter("taskName", typeof(string));
    
            var taskOrderParameter = taskOrder.HasValue ?
                new ObjectParameter("taskOrder", taskOrder) :
                new ObjectParameter("taskOrder", typeof(int));
    
            var iconParameter = icon != null ?
                new ObjectParameter("icon", icon) :
                new ObjectParameter("icon", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_ADM_UpdateTask", workflowTaskIDParameter, taskIDParameter, taskNameParameter, taskOrderParameter, iconParameter, rowCount);
        }
    
        public virtual int REPS_ADM_UpdateWorkflowName(string workflowName, Nullable<int> taskID, ObjectParameter rowCount)
        {
            var workflowNameParameter = workflowName != null ?
                new ObjectParameter("workflowName", workflowName) :
                new ObjectParameter("workflowName", typeof(string));
    
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("taskID", taskID) :
                new ObjectParameter("taskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_ADM_UpdateWorkflowName", workflowNameParameter, taskIDParameter, rowCount);
        }
    
        public virtual int REPS_ArchiveFeesByTransactionID(Nullable<int> oldtransactionID, Nullable<int> dealID, Nullable<int> transactionTypeID, Nullable<int> transactionStatusID, Nullable<int> workflowTaskID, Nullable<int> userID, ObjectParameter rowCount)
        {
            var oldtransactionIDParameter = oldtransactionID.HasValue ?
                new ObjectParameter("oldtransactionID", oldtransactionID) :
                new ObjectParameter("oldtransactionID", typeof(int));
    
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("dealID", dealID) :
                new ObjectParameter("dealID", typeof(int));
    
            var transactionTypeIDParameter = transactionTypeID.HasValue ?
                new ObjectParameter("transactionTypeID", transactionTypeID) :
                new ObjectParameter("transactionTypeID", typeof(int));
    
            var transactionStatusIDParameter = transactionStatusID.HasValue ?
                new ObjectParameter("transactionStatusID", transactionStatusID) :
                new ObjectParameter("transactionStatusID", typeof(int));
    
            var workflowTaskIDParameter = workflowTaskID.HasValue ?
                new ObjectParameter("workflowTaskID", workflowTaskID) :
                new ObjectParameter("workflowTaskID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_ArchiveFeesByTransactionID", oldtransactionIDParameter, dealIDParameter, transactionTypeIDParameter, transactionStatusIDParameter, workflowTaskIDParameter, userIDParameter, rowCount);
        }
    
        public virtual int REPS_ArchiveWorkflowActionsByTransactionID(Nullable<int> oldtransactionID, Nullable<int> workflowactionvarId, Nullable<int> dealID, Nullable<int> transactionTypeID, Nullable<int> transactionStatusID, Nullable<int> userID, ObjectParameter rowCount)
        {
            var oldtransactionIDParameter = oldtransactionID.HasValue ?
                new ObjectParameter("oldtransactionID", oldtransactionID) :
                new ObjectParameter("oldtransactionID", typeof(int));
    
            var workflowactionvarIdParameter = workflowactionvarId.HasValue ?
                new ObjectParameter("workflowactionvarId", workflowactionvarId) :
                new ObjectParameter("workflowactionvarId", typeof(int));
    
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("dealID", dealID) :
                new ObjectParameter("dealID", typeof(int));
    
            var transactionTypeIDParameter = transactionTypeID.HasValue ?
                new ObjectParameter("transactionTypeID", transactionTypeID) :
                new ObjectParameter("transactionTypeID", typeof(int));
    
            var transactionStatusIDParameter = transactionStatusID.HasValue ?
                new ObjectParameter("transactionStatusID", transactionStatusID) :
                new ObjectParameter("transactionStatusID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_ArchiveWorkflowActionsByTransactionID", oldtransactionIDParameter, workflowactionvarIdParameter, dealIDParameter, transactionTypeIDParameter, transactionStatusIDParameter, userIDParameter, rowCount);
        }
    
        public virtual ObjectResult<REPS_AutoSearchDeal_Result> REPS_AutoSearchDeal(string searchResult, Nullable<int> userId, Nullable<int> entityID)
        {
            var searchResultParameter = searchResult != null ?
                new ObjectParameter("SearchResult", searchResult) :
                new ObjectParameter("SearchResult", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_AutoSearchDeal_Result>("REPS_AutoSearchDeal", searchResultParameter, userIdParameter, entityIDParameter);
        }
    
        public virtual int REPS_DeleteAddress(Nullable<int> addressID, Nullable<bool> deleted, ObjectParameter rowCount)
        {
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("Deleted", deleted) :
                new ObjectParameter("Deleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_DeleteAddress", addressIDParameter, deletedParameter, rowCount);
        }
    
        public virtual ObjectResult<Nullable<int>> REPS_DeleteAllTabsForUser_ByUserID(Nullable<int> userID, ObjectParameter rowCount)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("REPS_DeleteAllTabsForUser_ByUserID", userIDParameter, rowCount);
        }
    
        public virtual int REPS_DeleteParticipant(Nullable<int> participantID, Nullable<bool> deleted, ObjectParameter rowCount)
        {
            var participantIDParameter = participantID.HasValue ?
                new ObjectParameter("ParticipantID", participantID) :
                new ObjectParameter("ParticipantID", typeof(int));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("Deleted", deleted) :
                new ObjectParameter("Deleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_DeleteParticipant", participantIDParameter, deletedParameter, rowCount);
        }
    
        public virtual int REPS_DeleteParticipantBank(Nullable<int> participantBankDetailID, Nullable<bool> deleted, ObjectParameter rowCount)
        {
            var participantBankDetailIDParameter = participantBankDetailID.HasValue ?
                new ObjectParameter("ParticipantBankDetailID", participantBankDetailID) :
                new ObjectParameter("ParticipantBankDetailID", typeof(int));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("Deleted", deleted) :
                new ObjectParameter("Deleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_DeleteParticipantBank", participantBankDetailIDParameter, deletedParameter, rowCount);
        }
    
        public virtual int REPS_DeleteProperty(Nullable<int> propertyID, Nullable<bool> deleted, ObjectParameter rowCount)
        {
            var propertyIDParameter = propertyID.HasValue ?
                new ObjectParameter("PropertyID", propertyID) :
                new ObjectParameter("PropertyID", typeof(int));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("Deleted", deleted) :
                new ObjectParameter("Deleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_DeleteProperty", propertyIDParameter, deletedParameter, rowCount);
        }
    
        public virtual int REPS_DeleteUser(Nullable<int> userID, Nullable<bool> deleted, ObjectParameter rowCount)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("Deleted", deleted) :
                new ObjectParameter("Deleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_DeleteUser", userIDParameter, deletedParameter, rowCount);
        }
    
        public virtual ObjectResult<REPS_DownloadStaticTemplate_Result> REPS_DownloadStaticTemplate(Nullable<int> documentTemplateID)
        {
            var documentTemplateIDParameter = documentTemplateID.HasValue ?
                new ObjectParameter("documentTemplateID", documentTemplateID) :
                new ObjectParameter("documentTemplateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_DownloadStaticTemplate_Result>("REPS_DownloadStaticTemplate", documentTemplateIDParameter);
        }
    
        public virtual ObjectResult<REPS_GeneralSearchDeal_Result> REPS_GeneralSearchDeal(string searchResult, string checkboxResult, Nullable<int> userId, Nullable<int> entityID)
        {
            var searchResultParameter = searchResult != null ?
                new ObjectParameter("SearchResult", searchResult) :
                new ObjectParameter("SearchResult", typeof(string));
    
            var checkboxResultParameter = checkboxResult != null ?
                new ObjectParameter("checkboxResult", checkboxResult) :
                new ObjectParameter("checkboxResult", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GeneralSearchDeal_Result>("REPS_GeneralSearchDeal", searchResultParameter, checkboxResultParameter, userIdParameter, entityIDParameter);
        }
    
        public virtual ObjectResult<REPS_GetAccountTypes_Result> REPS_GetAccountTypes(Nullable<int> accountTypeID, Nullable<int> start, Nullable<int> end)
        {
            var accountTypeIDParameter = accountTypeID.HasValue ?
                new ObjectParameter("AccountTypeID", accountTypeID) :
                new ObjectParameter("AccountTypeID", typeof(int));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(int));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("End", end) :
                new ObjectParameter("End", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetAccountTypes_Result>("REPS_GetAccountTypes", accountTypeIDParameter, startParameter, endParameter);
        }
    
        public virtual ObjectResult<REPS_GetAddressTypes_Result> REPS_GetAddressTypes(Nullable<int> addressTypeID, Nullable<int> start, Nullable<int> end)
        {
            var addressTypeIDParameter = addressTypeID.HasValue ?
                new ObjectParameter("AddressTypeID", addressTypeID) :
                new ObjectParameter("AddressTypeID", typeof(int));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(int));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("End", end) :
                new ObjectParameter("End", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetAddressTypes_Result>("REPS_GetAddressTypes", addressTypeIDParameter, startParameter, endParameter);
        }
    
        public virtual ObjectResult<REPS_GetAuditDetails_ByDealID_Result> REPS_GetAuditDetails_ByDealID(Nullable<int> dealID)
        {
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("DealID", dealID) :
                new ObjectParameter("DealID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetAuditDetails_ByDealID_Result>("REPS_GetAuditDetails_ByDealID", dealIDParameter);
        }
    
        public virtual ObjectResult<REPS_GetBankDetailsPerParticipant_Result> REPS_GetBankDetailsPerParticipant(Nullable<int> participantID, Nullable<int> participantBankDetailID)
        {
            var participantIDParameter = participantID.HasValue ?
                new ObjectParameter("ParticipantID", participantID) :
                new ObjectParameter("ParticipantID", typeof(int));
    
            var participantBankDetailIDParameter = participantBankDetailID.HasValue ?
                new ObjectParameter("ParticipantBankDetailID", participantBankDetailID) :
                new ObjectParameter("ParticipantBankDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetBankDetailsPerParticipant_Result>("REPS_GetBankDetailsPerParticipant", participantIDParameter, participantBankDetailIDParameter);
        }
    
        public virtual ObjectResult<REPS_GetBanks_Result> REPS_GetBanks(string bankName, string swiftCode, Nullable<int> entityID, Nullable<int> bankID, Nullable<int> start, Nullable<int> end)
        {
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var swiftCodeParameter = swiftCode != null ?
                new ObjectParameter("SwiftCode", swiftCode) :
                new ObjectParameter("SwiftCode", typeof(string));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(int));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("End", end) :
                new ObjectParameter("End", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetBanks_Result>("REPS_GetBanks", bankNameParameter, swiftCodeParameter, entityIDParameter, bankIDParameter, startParameter, endParameter);
        }
    
        public virtual ObjectResult<string> REPS_GetClientReferenceByDealID(Nullable<int> dealID)
        {
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("DealID", dealID) :
                new ObjectParameter("DealID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("REPS_GetClientReferenceByDealID", dealIDParameter);
        }
    
        public virtual ObjectResult<REPS_GetCompletedActionsByWorkflowID_Result> REPS_GetCompletedActionsByWorkflowID(Nullable<int> dealID, Nullable<int> workflowID)
        {
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("dealID", dealID) :
                new ObjectParameter("dealID", typeof(int));
    
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("workflowID", workflowID) :
                new ObjectParameter("workflowID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetCompletedActionsByWorkflowID_Result>("REPS_GetCompletedActionsByWorkflowID", dealIDParameter, workflowIDParameter);
        }
    
        public virtual ObjectResult<REPS_GetCorrespondence_ByCorrespondenceID_Result> REPS_GetCorrespondence_ByCorrespondenceID(Nullable<int> correspondenceID)
        {
            var correspondenceIDParameter = correspondenceID.HasValue ?
                new ObjectParameter("CorrespondenceID", correspondenceID) :
                new ObjectParameter("CorrespondenceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetCorrespondence_ByCorrespondenceID_Result>("REPS_GetCorrespondence_ByCorrespondenceID", correspondenceIDParameter);
        }
    
        public virtual ObjectResult<REPS_GetCorrespondenceAttachmentByID_Result> REPS_GetCorrespondenceAttachmentByID(Nullable<int> documentID)
        {
            var documentIDParameter = documentID.HasValue ?
                new ObjectParameter("documentID", documentID) :
                new ObjectParameter("documentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetCorrespondenceAttachmentByID_Result>("REPS_GetCorrespondenceAttachmentByID", documentIDParameter);
        }
    
        public virtual ObjectResult<string> REPS_GetCorrespondenceEmailAutocomplete_ByDealID(Nullable<int> dealID, string prefix)
        {
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("DealID", dealID) :
                new ObjectParameter("DealID", typeof(int));
    
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("REPS_GetCorrespondenceEmailAutocomplete_ByDealID", dealIDParameter, prefixParameter);
        }
    
        public virtual ObjectResult<string> REPS_GetCorrespondenceNumberAutocomplete_ByDealID(Nullable<int> dealID, string prefix)
        {
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("DealID", dealID) :
                new ObjectParameter("DealID", typeof(int));
    
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("REPS_GetCorrespondenceNumberAutocomplete_ByDealID", dealIDParameter, prefixParameter);
        }
    
        public virtual ObjectResult<REPS_GetCountries_Result> REPS_GetCountries(Nullable<int> countryID, Nullable<int> start, Nullable<int> end)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(int));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("End", end) :
                new ObjectParameter("End", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetCountries_Result>("REPS_GetCountries", countryIDParameter, startParameter, endParameter);
        }
    
        public virtual ObjectResult<string> REPS_GetCurrentDealReference_ByDealID(Nullable<int> dealID)
        {
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("DealID", dealID) :
                new ObjectParameter("DealID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("REPS_GetCurrentDealReference_ByDealID", dealIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> REPS_GetDealFinalised(Nullable<int> dealID)
        {
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("DealID", dealID) :
                new ObjectParameter("DealID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("REPS_GetDealFinalised", dealIDParameter);
        }
    
        public virtual ObjectResult<REPS_GetDealsDashboard_Result> REPS_GetDealsDashboard(Nullable<int> userID, Nullable<int> taskID, string clientReference, Nullable<int> workflowID, Nullable<int> dealProcessTaskID, Nullable<int> dealId, string uniqueReference, Nullable<int> dealTypeId, Nullable<int> entityID, Nullable<int> start, Nullable<int> end)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("TaskID", taskID) :
                new ObjectParameter("TaskID", typeof(int));
    
            var clientReferenceParameter = clientReference != null ?
                new ObjectParameter("ClientReference", clientReference) :
                new ObjectParameter("ClientReference", typeof(string));
    
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            var dealProcessTaskIDParameter = dealProcessTaskID.HasValue ?
                new ObjectParameter("DealProcessTaskID", dealProcessTaskID) :
                new ObjectParameter("DealProcessTaskID", typeof(int));
    
            var dealIdParameter = dealId.HasValue ?
                new ObjectParameter("DealId", dealId) :
                new ObjectParameter("DealId", typeof(int));
    
            var uniqueReferenceParameter = uniqueReference != null ?
                new ObjectParameter("UniqueReference", uniqueReference) :
                new ObjectParameter("UniqueReference", typeof(string));
    
            var dealTypeIdParameter = dealTypeId.HasValue ?
                new ObjectParameter("DealTypeId", dealTypeId) :
                new ObjectParameter("DealTypeId", typeof(int));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(int));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("End", end) :
                new ObjectParameter("End", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetDealsDashboard_Result>("REPS_GetDealsDashboard", userIDParameter, taskIDParameter, clientReferenceParameter, workflowIDParameter, dealProcessTaskIDParameter, dealIdParameter, uniqueReferenceParameter, dealTypeIdParameter, entityIDParameter, startParameter, endParameter);
        }
    
        public virtual int REPS_AddAlerts(string eventName, string location, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string description, Nullable<int> userID, Nullable<int> alertTypeID, Nullable<int> dealID, Nullable<int> workflowTaskID, ObjectParameter identity)
        {
            var eventNameParameter = eventName != null ?
                new ObjectParameter("EventName", eventName) :
                new ObjectParameter("EventName", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var alertTypeIDParameter = alertTypeID.HasValue ?
                new ObjectParameter("AlertTypeID", alertTypeID) :
                new ObjectParameter("AlertTypeID", typeof(int));
    
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("DealID", dealID) :
                new ObjectParameter("DealID", typeof(int));
    
            var workflowTaskIDParameter = workflowTaskID.HasValue ?
                new ObjectParameter("WorkflowTaskID", workflowTaskID) :
                new ObjectParameter("WorkflowTaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_AddAlerts", eventNameParameter, locationParameter, startDateParameter, endDateParameter, descriptionParameter, userIDParameter, alertTypeIDParameter, dealIDParameter, workflowTaskIDParameter, identity);
        }
    
        public virtual int REPS_AddCorrespondence(Nullable<int> dealID, string subject, Nullable<int> userID, string headers, string text, string html, string body, Nullable<int> status, string filename, string mimeType, Nullable<int> documentTemplateID, Nullable<int> transactionTypeID, Nullable<int> transactionStatusID, Nullable<int> workflowTaskID, Nullable<int> attachmentstatus, ObjectParameter identity, ObjectParameter documentIDReturn)
        {
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("DealID", dealID) :
                new ObjectParameter("DealID", typeof(int));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var headersParameter = headers != null ?
                new ObjectParameter("Headers", headers) :
                new ObjectParameter("Headers", typeof(string));
    
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            var htmlParameter = html != null ?
                new ObjectParameter("Html", html) :
                new ObjectParameter("Html", typeof(string));
    
            var bodyParameter = body != null ?
                new ObjectParameter("Body", body) :
                new ObjectParameter("Body", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var filenameParameter = filename != null ?
                new ObjectParameter("filename", filename) :
                new ObjectParameter("filename", typeof(string));
    
            var mimeTypeParameter = mimeType != null ?
                new ObjectParameter("mimeType", mimeType) :
                new ObjectParameter("mimeType", typeof(string));
    
            var documentTemplateIDParameter = documentTemplateID.HasValue ?
                new ObjectParameter("documentTemplateID", documentTemplateID) :
                new ObjectParameter("documentTemplateID", typeof(int));
    
            var transactionTypeIDParameter = transactionTypeID.HasValue ?
                new ObjectParameter("transactionTypeID", transactionTypeID) :
                new ObjectParameter("transactionTypeID", typeof(int));
    
            var transactionStatusIDParameter = transactionStatusID.HasValue ?
                new ObjectParameter("transactionStatusID", transactionStatusID) :
                new ObjectParameter("transactionStatusID", typeof(int));
    
            var workflowTaskIDParameter = workflowTaskID.HasValue ?
                new ObjectParameter("WorkflowTaskID", workflowTaskID) :
                new ObjectParameter("WorkflowTaskID", typeof(int));
    
            var attachmentstatusParameter = attachmentstatus.HasValue ?
                new ObjectParameter("attachmentstatus", attachmentstatus) :
                new ObjectParameter("attachmentstatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_AddCorrespondence", dealIDParameter, subjectParameter, userIDParameter, headersParameter, textParameter, htmlParameter, bodyParameter, statusParameter, filenameParameter, mimeTypeParameter, documentTemplateIDParameter, transactionTypeIDParameter, transactionStatusIDParameter, workflowTaskIDParameter, attachmentstatusParameter, identity, documentIDReturn);
        }
    
        public virtual int REPS_AddFinancialTransaction(Nullable<int> instrumentID, Nullable<int> dealID, ObjectParameter identity)
        {
            var instrumentIDParameter = instrumentID.HasValue ?
                new ObjectParameter("InstrumentID", instrumentID) :
                new ObjectParameter("InstrumentID", typeof(int));
    
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("DealID", dealID) :
                new ObjectParameter("DealID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_AddFinancialTransaction", instrumentIDParameter, dealIDParameter, identity);
        }
    
        public virtual ObjectResult<REPS_GetDealSumByTask_Result> REPS_GetDealSumByTask(Nullable<int> userID, Nullable<int> workflowID, Nullable<int> entityID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetDealSumByTask_Result>("REPS_GetDealSumByTask", userIDParameter, workflowIDParameter, entityIDParameter);
        }
    
        public virtual ObjectResult<REPS_GetDealTypes_Result> REPS_GetDealTypes(Nullable<int> dealTypeID, Nullable<int> start, Nullable<int> end)
        {
            var dealTypeIDParameter = dealTypeID.HasValue ?
                new ObjectParameter("DealTypeID", dealTypeID) :
                new ObjectParameter("DealTypeID", typeof(int));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(int));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("End", end) :
                new ObjectParameter("End", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetDealTypes_Result>("REPS_GetDealTypes", dealTypeIDParameter, startParameter, endParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> REPS_GetDocumentIDbyDocumentTemplateID(Nullable<int> dealID, Nullable<int> templateID)
        {
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("dealID", dealID) :
                new ObjectParameter("dealID", typeof(int));
    
            var templateIDParameter = templateID.HasValue ?
                new ObjectParameter("templateID", templateID) :
                new ObjectParameter("templateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("REPS_GetDocumentIDbyDocumentTemplateID", dealIDParameter, templateIDParameter);
        }
    
        public virtual ObjectResult<string> REPS_GetDocumentTemplateByID(Nullable<int> templateID)
        {
            var templateIDParameter = templateID.HasValue ?
                new ObjectParameter("templateID", templateID) :
                new ObjectParameter("templateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("REPS_GetDocumentTemplateByID", templateIDParameter);
        }
    
        public virtual ObjectResult<string> REPS_GetDocumentTemplateXMLByID(Nullable<int> templateID)
        {
            var templateIDParameter = templateID.HasValue ?
                new ObjectParameter("templateID", templateID) :
                new ObjectParameter("templateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("REPS_GetDocumentTemplateXMLByID", templateIDParameter);
        }
    
        public virtual ObjectResult<string> REPS_GetDocumentVersionByTemplateID(Nullable<int> templateID)
        {
            var templateIDParameter = templateID.HasValue ?
                new ObjectParameter("templateID", templateID) :
                new ObjectParameter("templateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("REPS_GetDocumentVersionByTemplateID", templateIDParameter);
        }
    
        public virtual ObjectResult<string> REPS_GetFileNameFromTemplateDescription(Nullable<int> templateID, string mimeTypeID)
        {
            var templateIDParameter = templateID.HasValue ?
                new ObjectParameter("templateID", templateID) :
                new ObjectParameter("templateID", typeof(int));
    
            var mimeTypeIDParameter = mimeTypeID != null ?
                new ObjectParameter("mimeTypeID", mimeTypeID) :
                new ObjectParameter("mimeTypeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("REPS_GetFileNameFromTemplateDescription", templateIDParameter, mimeTypeIDParameter);
        }
    
        public virtual ObjectResult<REPS_GetMortgageLender_Result> REPS_GetMortgageLender()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetMortgageLender_Result>("REPS_GetMortgageLender");
        }
    
        public virtual ObjectResult<REPS_GetMortgageType_Result> REPS_GetMortgageType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetMortgageType_Result>("REPS_GetMortgageType");
        }
    
        public virtual ObjectResult<REPS_GetOrganisation_Result> REPS_GetOrganisation(Nullable<int> organizationType, Nullable<int> start, Nullable<int> end)
        {
            var organizationTypeParameter = organizationType.HasValue ?
                new ObjectParameter("OrganizationType", organizationType) :
                new ObjectParameter("OrganizationType", typeof(int));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(int));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("End", end) :
                new ObjectParameter("End", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetOrganisation_Result>("REPS_GetOrganisation", organizationTypeParameter, startParameter, endParameter);
        }
    
        public virtual ObjectResult<REPS_GetOrganisationTypes_Result> REPS_GetOrganisationTypes(Nullable<int> organizationType, Nullable<int> start, Nullable<int> end)
        {
            var organizationTypeParameter = organizationType.HasValue ?
                new ObjectParameter("OrganizationType", organizationType) :
                new ObjectParameter("OrganizationType", typeof(int));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(int));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("End", end) :
                new ObjectParameter("End", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetOrganisationTypes_Result>("REPS_GetOrganisationTypes", organizationTypeParameter, startParameter, endParameter);
        }
    
        public virtual ObjectResult<REPS_GetParticipantTypes_Result> REPS_GetParticipantTypes(Nullable<int> participantTypeID, Nullable<int> start, Nullable<int> end)
        {
            var participantTypeIDParameter = participantTypeID.HasValue ?
                new ObjectParameter("ParticipantTypeID", participantTypeID) :
                new ObjectParameter("ParticipantTypeID", typeof(int));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(int));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("End", end) :
                new ObjectParameter("End", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetParticipantTypes_Result>("REPS_GetParticipantTypes", participantTypeIDParameter, startParameter, endParameter);
        }
    
        public virtual ObjectResult<REPS_GetPropertiesWithDetails_Result> REPS_GetPropertiesWithDetails(Nullable<int> dealID, Nullable<int> propertyID, Nullable<int> start, Nullable<int> end)
        {
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("DealID", dealID) :
                new ObjectParameter("DealID", typeof(int));
    
            var propertyIDParameter = propertyID.HasValue ?
                new ObjectParameter("PropertyID", propertyID) :
                new ObjectParameter("PropertyID", typeof(int));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(int));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("End", end) :
                new ObjectParameter("End", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetPropertiesWithDetails_Result>("REPS_GetPropertiesWithDetails", dealIDParameter, propertyIDParameter, startParameter, endParameter);
        }
    
        public virtual ObjectResult<REPS_GetPropertyTypes_Result> REPS_GetPropertyTypes(Nullable<int> propertyTypeID, Nullable<int> start, Nullable<int> end)
        {
            var propertyTypeIDParameter = propertyTypeID.HasValue ?
                new ObjectParameter("PropertyTypeID", propertyTypeID) :
                new ObjectParameter("PropertyTypeID", typeof(int));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(int));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("End", end) :
                new ObjectParameter("End", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetPropertyTypes_Result>("REPS_GetPropertyTypes", propertyTypeIDParameter, startParameter, endParameter);
        }
    
        public virtual ObjectResult<REPS_GetProvince_Result> REPS_GetProvince(Nullable<int> countryID, Nullable<int> provinceID, Nullable<int> start, Nullable<int> end)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var provinceIDParameter = provinceID.HasValue ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(int));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(int));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("End", end) :
                new ObjectParameter("End", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetProvince_Result>("REPS_GetProvince", countryIDParameter, provinceIDParameter, startParameter, endParameter);
        }
    
        public virtual ObjectResult<REPS_GetRoles_Result> REPS_GetRoles(Nullable<int> roleID, Nullable<int> start, Nullable<int> end)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(int));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("End", end) :
                new ObjectParameter("End", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetRoles_Result>("REPS_GetRoles", roleIDParameter, startParameter, endParameter);
        }
    
        public virtual ObjectResult<REPS_GetSizes_Result> REPS_GetSizes(Nullable<int> sizeTypeID, Nullable<int> start, Nullable<int> end)
        {
            var sizeTypeIDParameter = sizeTypeID.HasValue ?
                new ObjectParameter("SizeTypeID", sizeTypeID) :
                new ObjectParameter("SizeTypeID", typeof(int));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(int));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("End", end) :
                new ObjectParameter("End", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetSizes_Result>("REPS_GetSizes", sizeTypeIDParameter, startParameter, endParameter);
        }
    
        public virtual ObjectResult<REPS_GetStoredDocumentByID_Result> REPS_GetStoredDocumentByID(Nullable<int> documentID)
        {
            var documentIDParameter = documentID.HasValue ?
                new ObjectParameter("documentID", documentID) :
                new ObjectParameter("documentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetStoredDocumentByID_Result>("REPS_GetStoredDocumentByID", documentIDParameter);
        }
    
        public virtual ObjectResult<REPS_GetStoredSignedDocumentByID_Result> REPS_GetStoredSignedDocumentByID(Nullable<int> documentID)
        {
            var documentIDParameter = documentID.HasValue ?
                new ObjectParameter("documentID", documentID) :
                new ObjectParameter("documentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetStoredSignedDocumentByID_Result>("REPS_GetStoredSignedDocumentByID", documentIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> REPS_GetTaskWorkflowIDByDealID(Nullable<int> dealID)
        {
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("dealID", dealID) :
                new ObjectParameter("dealID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("REPS_GetTaskWorkflowIDByDealID", dealIDParameter);
        }
    
        public virtual ObjectResult<string> REPS_GetTaskWorkflowNameByDealID(Nullable<int> dealID)
        {
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("dealID", dealID) :
                new ObjectParameter("dealID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("REPS_GetTaskWorkflowNameByDealID", dealIDParameter);
        }
    
        public virtual ObjectResult<REPS_GetWorkFlowActionsAddFields_Result> REPS_GetWorkFlowActionsAddFields(Nullable<int> taskID, Nullable<int> workflowActionID)
        {
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("taskID", taskID) :
                new ObjectParameter("taskID", typeof(int));
    
            var workflowActionIDParameter = workflowActionID.HasValue ?
                new ObjectParameter("workflowActionID", workflowActionID) :
                new ObjectParameter("workflowActionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetWorkFlowActionsAddFields_Result>("REPS_GetWorkFlowActionsAddFields", taskIDParameter, workflowActionIDParameter);
        }
    
        public virtual int REPS_AddWorkflowActionValues(Nullable<int> dealID, Nullable<int> userID, Nullable<int> transactionID, Nullable<int> workflowTaskID, Nullable<int> workflowActionVarID, Nullable<int> variableTypeID, string value, ObjectParameter rowCount)
        {
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("dealID", dealID) :
                new ObjectParameter("dealID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var transactionIDParameter = transactionID.HasValue ?
                new ObjectParameter("transactionID", transactionID) :
                new ObjectParameter("transactionID", typeof(int));
    
            var workflowTaskIDParameter = workflowTaskID.HasValue ?
                new ObjectParameter("WorkflowTaskID", workflowTaskID) :
                new ObjectParameter("WorkflowTaskID", typeof(int));
    
            var workflowActionVarIDParameter = workflowActionVarID.HasValue ?
                new ObjectParameter("workflowActionVarID", workflowActionVarID) :
                new ObjectParameter("workflowActionVarID", typeof(int));
    
            var variableTypeIDParameter = variableTypeID.HasValue ?
                new ObjectParameter("variableTypeID", variableTypeID) :
                new ObjectParameter("variableTypeID", typeof(int));
    
            var valueParameter = value != null ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_AddWorkflowActionValues", dealIDParameter, userIDParameter, transactionIDParameter, workflowTaskIDParameter, workflowActionVarIDParameter, variableTypeIDParameter, valueParameter, rowCount);
        }
    
        public virtual ObjectResult<REPS_GetWorkflowProgress_Result> REPS_GetWorkflowProgress(Nullable<int> dealID)
        {
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("DealID", dealID) :
                new ObjectParameter("DealID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetWorkflowProgress_Result>("REPS_GetWorkflowProgress", dealIDParameter);
        }
    
        public virtual ObjectResult<REPS_GetWorkFlowTasksActions_Result> REPS_GetWorkFlowTasksActions(Nullable<int> taskID, Nullable<int> dealID)
        {
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("TaskID", taskID) :
                new ObjectParameter("TaskID", typeof(int));
    
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("DealID", dealID) :
                new ObjectParameter("DealID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetWorkFlowTasksActions_Result>("REPS_GetWorkFlowTasksActions", taskIDParameter, dealIDParameter);
        }
    
        public virtual int REPS_UpdateAddress(Nullable<int> participantID, Nullable<int> addressTypeID, string addressLine1, string addressLine2, string city, Nullable<int> provinceID, Nullable<int> countryID, string postalCode, Nullable<int> addressID, Nullable<bool> verified, ObjectParameter rowCount)
        {
            var participantIDParameter = participantID.HasValue ?
                new ObjectParameter("ParticipantID", participantID) :
                new ObjectParameter("ParticipantID", typeof(int));
    
            var addressTypeIDParameter = addressTypeID.HasValue ?
                new ObjectParameter("AddressTypeID", addressTypeID) :
                new ObjectParameter("AddressTypeID", typeof(int));
    
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("AddressLine1", addressLine1) :
                new ObjectParameter("AddressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("AddressLine2", addressLine2) :
                new ObjectParameter("AddressLine2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var provinceIDParameter = provinceID.HasValue ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var verifiedParameter = verified.HasValue ?
                new ObjectParameter("Verified", verified) :
                new ObjectParameter("Verified", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_UpdateAddress", participantIDParameter, addressTypeIDParameter, addressLine1Parameter, addressLine2Parameter, cityParameter, provinceIDParameter, countryIDParameter, postalCodeParameter, addressIDParameter, verifiedParameter, rowCount);
        }
    
        public virtual int REPS_UpdateDeal(string uniqueReference, Nullable<int> dealID, Nullable<int> dealTypeID, string clientReference, Nullable<int> dealProcessTaskID, Nullable<System.DateTime> dateCreatedModified, ObjectParameter rowCount)
        {
            var uniqueReferenceParameter = uniqueReference != null ?
                new ObjectParameter("UniqueReference", uniqueReference) :
                new ObjectParameter("UniqueReference", typeof(string));
    
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("DealID", dealID) :
                new ObjectParameter("DealID", typeof(int));
    
            var dealTypeIDParameter = dealTypeID.HasValue ?
                new ObjectParameter("DealTypeID", dealTypeID) :
                new ObjectParameter("DealTypeID", typeof(int));
    
            var clientReferenceParameter = clientReference != null ?
                new ObjectParameter("ClientReference", clientReference) :
                new ObjectParameter("ClientReference", typeof(string));
    
            var dealProcessTaskIDParameter = dealProcessTaskID.HasValue ?
                new ObjectParameter("DealProcessTaskID", dealProcessTaskID) :
                new ObjectParameter("DealProcessTaskID", typeof(int));
    
            var dateCreatedModifiedParameter = dateCreatedModified.HasValue ?
                new ObjectParameter("dateCreatedModified", dateCreatedModified) :
                new ObjectParameter("dateCreatedModified", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_UpdateDeal", uniqueReferenceParameter, dealIDParameter, dealTypeIDParameter, clientReferenceParameter, dealProcessTaskIDParameter, dateCreatedModifiedParameter, rowCount);
        }
    
        public virtual int REPS_UpdateDealApprove(Nullable<int> participantID, Nullable<int> dealID, Nullable<bool> approve, ObjectParameter rowCount)
        {
            var participantIDParameter = participantID.HasValue ?
                new ObjectParameter("ParticipantID", participantID) :
                new ObjectParameter("ParticipantID", typeof(int));
    
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("DealID", dealID) :
                new ObjectParameter("DealID", typeof(int));
    
            var approveParameter = approve.HasValue ?
                new ObjectParameter("Approve", approve) :
                new ObjectParameter("Approve", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_UpdateDealApprove", participantIDParameter, dealIDParameter, approveParameter, rowCount);
        }
    
        public virtual int REPS_UpdateDealCompletionDate_ByDealID(Nullable<System.DateTime> completionDate, Nullable<int> dealID, ObjectParameter rowCount)
        {
            var completionDateParameter = completionDate.HasValue ?
                new ObjectParameter("CompletionDate", completionDate) :
                new ObjectParameter("CompletionDate", typeof(System.DateTime));
    
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("DealID", dealID) :
                new ObjectParameter("DealID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_UpdateDealCompletionDate_ByDealID", completionDateParameter, dealIDParameter, rowCount);
        }
    
        public virtual int REPS_UpdateEntity(Nullable<int> entityID, Nullable<int> organizationTypeID, string name, string registrationNumber, string legalName, string alternateName, string vatID, Nullable<decimal> telephone, Nullable<decimal> faxNumber, string email, Nullable<int> addressTypeID, string addressLine1, string addressLine2, string city, Nullable<int> provinceID, Nullable<int> countryID, string postalCode, Nullable<int> parentEntityID, Nullable<bool> verified, Nullable<bool> deleted, ObjectParameter rowCount)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var organizationTypeIDParameter = organizationTypeID.HasValue ?
                new ObjectParameter("OrganizationTypeID", organizationTypeID) :
                new ObjectParameter("OrganizationTypeID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var registrationNumberParameter = registrationNumber != null ?
                new ObjectParameter("RegistrationNumber", registrationNumber) :
                new ObjectParameter("RegistrationNumber", typeof(string));
    
            var legalNameParameter = legalName != null ?
                new ObjectParameter("LegalName", legalName) :
                new ObjectParameter("LegalName", typeof(string));
    
            var alternateNameParameter = alternateName != null ?
                new ObjectParameter("AlternateName", alternateName) :
                new ObjectParameter("AlternateName", typeof(string));
    
            var vatIDParameter = vatID != null ?
                new ObjectParameter("VatID", vatID) :
                new ObjectParameter("VatID", typeof(string));
    
            var telephoneParameter = telephone.HasValue ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(decimal));
    
            var faxNumberParameter = faxNumber.HasValue ?
                new ObjectParameter("FaxNumber", faxNumber) :
                new ObjectParameter("FaxNumber", typeof(decimal));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var addressTypeIDParameter = addressTypeID.HasValue ?
                new ObjectParameter("AddressTypeID", addressTypeID) :
                new ObjectParameter("AddressTypeID", typeof(int));
    
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("AddressLine1", addressLine1) :
                new ObjectParameter("AddressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("AddressLine2", addressLine2) :
                new ObjectParameter("AddressLine2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var provinceIDParameter = provinceID.HasValue ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var parentEntityIDParameter = parentEntityID.HasValue ?
                new ObjectParameter("ParentEntityID", parentEntityID) :
                new ObjectParameter("ParentEntityID", typeof(int));
    
            var verifiedParameter = verified.HasValue ?
                new ObjectParameter("Verified", verified) :
                new ObjectParameter("Verified", typeof(bool));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("Deleted", deleted) :
                new ObjectParameter("Deleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_UpdateEntity", entityIDParameter, organizationTypeIDParameter, nameParameter, registrationNumberParameter, legalNameParameter, alternateNameParameter, vatIDParameter, telephoneParameter, faxNumberParameter, emailParameter, addressTypeIDParameter, addressLine1Parameter, addressLine2Parameter, cityParameter, provinceIDParameter, countryIDParameter, postalCodeParameter, parentEntityIDParameter, verifiedParameter, deletedParameter, rowCount);
        }
    
        public virtual int REPS_UpdateFinancialInstrument(Nullable<int> instrumentID, Nullable<int> participant, Nullable<decimal> value, Nullable<decimal> deposit, string termLoan, Nullable<decimal> interestRate, Nullable<int> lenderID, Nullable<int> instrumentTypeID, Nullable<int> interestTypeID, ObjectParameter rowCount)
        {
            var instrumentIDParameter = instrumentID.HasValue ?
                new ObjectParameter("InstrumentID", instrumentID) :
                new ObjectParameter("InstrumentID", typeof(int));
    
            var participantParameter = participant.HasValue ?
                new ObjectParameter("Participant", participant) :
                new ObjectParameter("Participant", typeof(int));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(decimal));
    
            var depositParameter = deposit.HasValue ?
                new ObjectParameter("Deposit", deposit) :
                new ObjectParameter("Deposit", typeof(decimal));
    
            var termLoanParameter = termLoan != null ?
                new ObjectParameter("TermLoan", termLoan) :
                new ObjectParameter("TermLoan", typeof(string));
    
            var interestRateParameter = interestRate.HasValue ?
                new ObjectParameter("InterestRate", interestRate) :
                new ObjectParameter("InterestRate", typeof(decimal));
    
            var lenderIDParameter = lenderID.HasValue ?
                new ObjectParameter("LenderID", lenderID) :
                new ObjectParameter("LenderID", typeof(int));
    
            var instrumentTypeIDParameter = instrumentTypeID.HasValue ?
                new ObjectParameter("InstrumentTypeID", instrumentTypeID) :
                new ObjectParameter("InstrumentTypeID", typeof(int));
    
            var interestTypeIDParameter = interestTypeID.HasValue ?
                new ObjectParameter("InterestTypeID", interestTypeID) :
                new ObjectParameter("InterestTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_UpdateFinancialInstrument", instrumentIDParameter, participantParameter, valueParameter, depositParameter, termLoanParameter, interestRateParameter, lenderIDParameter, instrumentTypeIDParameter, interestTypeIDParameter, rowCount);
        }
    
        public virtual int REPS_UpdateFinancialTransaction(Nullable<int> dealID, Nullable<int> obligationID, Nullable<int> instrumentID, Nullable<int> financialTransactionID, ObjectParameter rowCount)
        {
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("DealID", dealID) :
                new ObjectParameter("DealID", typeof(int));
    
            var obligationIDParameter = obligationID.HasValue ?
                new ObjectParameter("ObligationID", obligationID) :
                new ObjectParameter("ObligationID", typeof(int));
    
            var instrumentIDParameter = instrumentID.HasValue ?
                new ObjectParameter("InstrumentID", instrumentID) :
                new ObjectParameter("InstrumentID", typeof(int));
    
            var financialTransactionIDParameter = financialTransactionID.HasValue ?
                new ObjectParameter("FinancialTransactionID", financialTransactionID) :
                new ObjectParameter("FinancialTransactionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_UpdateFinancialTransaction", dealIDParameter, obligationIDParameter, instrumentIDParameter, financialTransactionIDParameter, rowCount);
        }
    
        public virtual int REPS_UpdateLastActiveView_ByDealIDUserID(Nullable<int> userID, Nullable<int> dealID, string viewName, ObjectParameter rowCount)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("DealID", dealID) :
                new ObjectParameter("DealID", typeof(int));
    
            var viewNameParameter = viewName != null ?
                new ObjectParameter("ViewName", viewName) :
                new ObjectParameter("ViewName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_UpdateLastActiveView_ByDealIDUserID", userIDParameter, dealIDParameter, viewNameParameter, rowCount);
        }
    
        public virtual int REPS_UpdateMortgageStatus(Nullable<int> instrumentID, ObjectParameter rowCount)
        {
            var instrumentIDParameter = instrumentID.HasValue ?
                new ObjectParameter("InstrumentID", instrumentID) :
                new ObjectParameter("InstrumentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_UpdateMortgageStatus", instrumentIDParameter, rowCount);
        }
    
        public virtual int REPS_UpdateOrganisationTypeID(Nullable<int> organisationID, Nullable<int> organizationTypeID, ObjectParameter rowCount)
        {
            var organisationIDParameter = organisationID.HasValue ?
                new ObjectParameter("OrganisationID", organisationID) :
                new ObjectParameter("OrganisationID", typeof(int));
    
            var organizationTypeIDParameter = organizationTypeID.HasValue ?
                new ObjectParameter("OrganizationTypeID", organizationTypeID) :
                new ObjectParameter("OrganizationTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_UpdateOrganisationTypeID", organisationIDParameter, organizationTypeIDParameter, rowCount);
        }
    
        public virtual int REPS_UpdateParticipantBankDetail(Nullable<int> participantID, Nullable<int> bankID, Nullable<int> accountTypeID, string accountName, Nullable<decimal> accountNumber, Nullable<decimal> sortCode, Nullable<bool> verified, Nullable<int> iD, ObjectParameter rowCount)
        {
            var participantIDParameter = participantID.HasValue ?
                new ObjectParameter("ParticipantID", participantID) :
                new ObjectParameter("ParticipantID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var accountTypeIDParameter = accountTypeID.HasValue ?
                new ObjectParameter("AccountTypeID", accountTypeID) :
                new ObjectParameter("AccountTypeID", typeof(int));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var accountNumberParameter = accountNumber.HasValue ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(decimal));
    
            var sortCodeParameter = sortCode.HasValue ?
                new ObjectParameter("SortCode", sortCode) :
                new ObjectParameter("SortCode", typeof(decimal));
    
            var verifiedParameter = verified.HasValue ?
                new ObjectParameter("Verified", verified) :
                new ObjectParameter("Verified", typeof(bool));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_UpdateParticipantBankDetail", participantIDParameter, bankIDParameter, accountTypeIDParameter, accountNameParameter, accountNumberParameter, sortCodeParameter, verifiedParameter, iDParameter, rowCount);
        }
    
        public virtual int REPS_UpdateProperty(Nullable<int> dealID, string propertyDescription, string legalDescription, Nullable<int> addressID, Nullable<int> propertyTypeID, Nullable<bool> verified, Nullable<int> propertyID, ObjectParameter rowCount)
        {
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("DealID", dealID) :
                new ObjectParameter("DealID", typeof(int));
    
            var propertyDescriptionParameter = propertyDescription != null ?
                new ObjectParameter("PropertyDescription", propertyDescription) :
                new ObjectParameter("PropertyDescription", typeof(string));
    
            var legalDescriptionParameter = legalDescription != null ?
                new ObjectParameter("LegalDescription", legalDescription) :
                new ObjectParameter("LegalDescription", typeof(string));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var propertyTypeIDParameter = propertyTypeID.HasValue ?
                new ObjectParameter("PropertyTypeID", propertyTypeID) :
                new ObjectParameter("PropertyTypeID", typeof(int));
    
            var verifiedParameter = verified.HasValue ?
                new ObjectParameter("Verified", verified) :
                new ObjectParameter("Verified", typeof(bool));
    
            var propertyIDParameter = propertyID.HasValue ?
                new ObjectParameter("PropertyID", propertyID) :
                new ObjectParameter("PropertyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_UpdateProperty", dealIDParameter, propertyDescriptionParameter, legalDescriptionParameter, addressIDParameter, propertyTypeIDParameter, verifiedParameter, propertyIDParameter, rowCount);
        }
    
        public virtual int REPS_UpdatePropertyDetail(Nullable<int> propertyID, Nullable<int> rightTypeID, string propertyNumber, string portionNumber, string township, string propertyName, string registrationDivision, string sectionNumber, string planNumber, Nullable<int> unitNumber, Nullable<int> sizeTypeID, string size, string geo, Nullable<int> propertyDetailID, ObjectParameter rowCount)
        {
            var propertyIDParameter = propertyID.HasValue ?
                new ObjectParameter("PropertyID", propertyID) :
                new ObjectParameter("PropertyID", typeof(int));
    
            var rightTypeIDParameter = rightTypeID.HasValue ?
                new ObjectParameter("RightTypeID", rightTypeID) :
                new ObjectParameter("RightTypeID", typeof(int));
    
            var propertyNumberParameter = propertyNumber != null ?
                new ObjectParameter("PropertyNumber", propertyNumber) :
                new ObjectParameter("PropertyNumber", typeof(string));
    
            var portionNumberParameter = portionNumber != null ?
                new ObjectParameter("PortionNumber", portionNumber) :
                new ObjectParameter("PortionNumber", typeof(string));
    
            var townshipParameter = township != null ?
                new ObjectParameter("Township", township) :
                new ObjectParameter("Township", typeof(string));
    
            var propertyNameParameter = propertyName != null ?
                new ObjectParameter("PropertyName", propertyName) :
                new ObjectParameter("PropertyName", typeof(string));
    
            var registrationDivisionParameter = registrationDivision != null ?
                new ObjectParameter("RegistrationDivision", registrationDivision) :
                new ObjectParameter("RegistrationDivision", typeof(string));
    
            var sectionNumberParameter = sectionNumber != null ?
                new ObjectParameter("SectionNumber", sectionNumber) :
                new ObjectParameter("SectionNumber", typeof(string));
    
            var planNumberParameter = planNumber != null ?
                new ObjectParameter("PlanNumber", planNumber) :
                new ObjectParameter("PlanNumber", typeof(string));
    
            var unitNumberParameter = unitNumber.HasValue ?
                new ObjectParameter("UnitNumber", unitNumber) :
                new ObjectParameter("UnitNumber", typeof(int));
    
            var sizeTypeIDParameter = sizeTypeID.HasValue ?
                new ObjectParameter("SizeTypeID", sizeTypeID) :
                new ObjectParameter("SizeTypeID", typeof(int));
    
            var sizeParameter = size != null ?
                new ObjectParameter("Size", size) :
                new ObjectParameter("Size", typeof(string));
    
            var geoParameter = geo != null ?
                new ObjectParameter("Geo", geo) :
                new ObjectParameter("Geo", typeof(string));
    
            var propertyDetailIDParameter = propertyDetailID.HasValue ?
                new ObjectParameter("PropertyDetailID", propertyDetailID) :
                new ObjectParameter("PropertyDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_UpdatePropertyDetail", propertyIDParameter, rightTypeIDParameter, propertyNumberParameter, portionNumberParameter, townshipParameter, propertyNameParameter, registrationDivisionParameter, sectionNumberParameter, planNumberParameter, unitNumberParameter, sizeTypeIDParameter, sizeParameter, geoParameter, propertyDetailIDParameter, rowCount);
        }
    
        public virtual ObjectResult<Nullable<int>> REPS_UpdateUser_WorkflowID_ByUserID(Nullable<int> workflowID, Nullable<int> userID)
        {
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("REPS_UpdateUser_WorkflowID_ByUserID", workflowIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> REPS_GetUserID(string aspNetUserId)
        {
            var aspNetUserIdParameter = aspNetUserId != null ?
                new ObjectParameter("aspNetUserId", aspNetUserId) :
                new ObjectParameter("aspNetUserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("REPS_GetUserID", aspNetUserIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> REPS_GetAspNetUserID(string aspNetUserId)
        {
            var aspNetUserIdParameter = aspNetUserId != null ?
                new ObjectParameter("aspNetUserId", aspNetUserId) :
                new ObjectParameter("aspNetUserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("REPS_GetAspNetUserID", aspNetUserIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> REPS_LogTransaction(Nullable<int> dealID, Nullable<int> transactionTypeID, Nullable<int> transactionStatusID, Nullable<int> workflowTaskID, Nullable<int> userID)
        {
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("dealID", dealID) :
                new ObjectParameter("dealID", typeof(int));
    
            var transactionTypeIDParameter = transactionTypeID.HasValue ?
                new ObjectParameter("transactionTypeID", transactionTypeID) :
                new ObjectParameter("transactionTypeID", typeof(int));
    
            var transactionStatusIDParameter = transactionStatusID.HasValue ?
                new ObjectParameter("transactionStatusID", transactionStatusID) :
                new ObjectParameter("transactionStatusID", typeof(int));
    
            var workflowTaskIDParameter = workflowTaskID.HasValue ?
                new ObjectParameter("workflowTaskID", workflowTaskID) :
                new ObjectParameter("workflowTaskID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("REPS_LogTransaction", dealIDParameter, transactionTypeIDParameter, transactionStatusIDParameter, workflowTaskIDParameter, userIDParameter);
        }
    
        public virtual int REPS_UpdateDealStatusInWorkflowProgress(Nullable<int> dealID, Nullable<int> workflowTaskID, Nullable<int> userID, ObjectParameter identity)
        {
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("dealID", dealID) :
                new ObjectParameter("dealID", typeof(int));
    
            var workflowTaskIDParameter = workflowTaskID.HasValue ?
                new ObjectParameter("workflowTaskID", workflowTaskID) :
                new ObjectParameter("workflowTaskID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_UpdateDealStatusInWorkflowProgress", dealIDParameter, workflowTaskIDParameter, userIDParameter, identity);
        }
    
        public virtual ObjectResult<Nullable<int>> REPS_AddUserDeal(Nullable<int> dealID, Nullable<int> userID, Nullable<int> type, Nullable<int> topValue)
        {
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("DealID", dealID) :
                new ObjectParameter("DealID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var topValueParameter = topValue.HasValue ?
                new ObjectParameter("TopValue", topValue) :
                new ObjectParameter("TopValue", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("REPS_AddUserDeal", dealIDParameter, userIDParameter, typeParameter, topValueParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> REPS_DeleteAllTabsForUser_ByUserGUID(Nullable<int> userID, ObjectParameter rowCount)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("REPS_DeleteAllTabsForUser_ByUserGUID", userIDParameter, rowCount);
        }
    
        public virtual int REPS_UpdateLastActiveView_ByDealGUIDUserGUID(Nullable<int> userID, Nullable<int> dealID, string viewName, ObjectParameter rowCount)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("DealID", dealID) :
                new ObjectParameter("DealID", typeof(int));
    
            var viewNameParameter = viewName != null ?
                new ObjectParameter("ViewName", viewName) :
                new ObjectParameter("ViewName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_UpdateLastActiveView_ByDealGUIDUserGUID", userIDParameter, dealIDParameter, viewNameParameter, rowCount);
        }
    
        public virtual ObjectResult<REPS_GetWorkFlowTasks_Result> REPS_GetWorkFlowTasks(Nullable<int> workflowID)
        {
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetWorkFlowTasks_Result>("REPS_GetWorkFlowTasks", workflowIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> REPS_GetEntityID(string entityGUID)
        {
            var entityGUIDParameter = entityGUID != null ?
                new ObjectParameter("entityGUID", entityGUID) :
                new ObjectParameter("entityGUID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("REPS_GetEntityID", entityGUIDParameter);
        }
    
        public virtual int REPS_UpdateUserToken(string tokenId, string aspNetUsersId, ObjectParameter rowCount)
        {
            var tokenIdParameter = tokenId != null ?
                new ObjectParameter("TokenId", tokenId) :
                new ObjectParameter("TokenId", typeof(string));
    
            var aspNetUsersIdParameter = aspNetUsersId != null ?
                new ObjectParameter("AspNetUsersId", aspNetUsersId) :
                new ObjectParameter("AspNetUsersId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_UpdateUserToken", tokenIdParameter, aspNetUsersIdParameter, rowCount);
        }
    
        public virtual ObjectResult<Nullable<int>> REPS_GETDealIDByDealGUID(string uniqueReference)
        {
            var uniqueReferenceParameter = uniqueReference != null ?
                new ObjectParameter("uniqueReference", uniqueReference) :
                new ObjectParameter("uniqueReference", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("REPS_GETDealIDByDealGUID", uniqueReferenceParameter);
        }
    
        public virtual ObjectResult<REPS_GetHeaderTabNotificationBarActiveDeals_ByUserGUID_Result> REPS_GetHeaderTabNotificationBarActiveDeals_ByUserGUID(Nullable<int> userID, Nullable<int> topValue)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var topValueParameter = topValue.HasValue ?
                new ObjectParameter("TopValue", topValue) :
                new ObjectParameter("TopValue", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetHeaderTabNotificationBarActiveDeals_ByUserGUID_Result>("REPS_GetHeaderTabNotificationBarActiveDeals_ByUserGUID", userIDParameter, topValueParameter);
        }
    
        public virtual ObjectResult<REPS_GetHeaderTabUserActiveDeals_ByUserGUID_Result> REPS_GetHeaderTabUserActiveDeals_ByUserGUID(Nullable<int> userID, Nullable<int> topValue)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var topValueParameter = topValue.HasValue ?
                new ObjectParameter("TopValue", topValue) :
                new ObjectParameter("TopValue", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetHeaderTabUserActiveDeals_ByUserGUID_Result>("REPS_GetHeaderTabUserActiveDeals_ByUserGUID", userIDParameter, topValueParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> REPS_GetUserIDByAspNetUserID(string aspNetUsersId)
        {
            var aspNetUsersIdParameter = aspNetUsersId != null ?
                new ObjectParameter("AspNetUsersId", aspNetUsersId) :
                new ObjectParameter("AspNetUsersId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("REPS_GetUserIDByAspNetUserID", aspNetUsersIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> REPS_GetParticipantIDByParticipantGUID(Nullable<System.Guid> particiapntGUID)
        {
            var particiapntGUIDParameter = particiapntGUID.HasValue ?
                new ObjectParameter("particiapntGUID", particiapntGUID) :
                new ObjectParameter("particiapntGUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("REPS_GetParticipantIDByParticipantGUID", particiapntGUIDParameter);
        }
    
        public virtual ObjectResult<REPS_GetParticipants_Result> REPS_GetParticipants(Nullable<int> dealID, Nullable<int> participantID, string givenName, string familyName, string identityNumber, Nullable<int> participantTypeID, Nullable<int> start, Nullable<int> end)
        {
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("DealID", dealID) :
                new ObjectParameter("DealID", typeof(int));
    
            var participantIDParameter = participantID.HasValue ?
                new ObjectParameter("ParticipantID", participantID) :
                new ObjectParameter("ParticipantID", typeof(int));
    
            var givenNameParameter = givenName != null ?
                new ObjectParameter("GivenName", givenName) :
                new ObjectParameter("GivenName", typeof(string));
    
            var familyNameParameter = familyName != null ?
                new ObjectParameter("FamilyName", familyName) :
                new ObjectParameter("FamilyName", typeof(string));
    
            var identityNumberParameter = identityNumber != null ?
                new ObjectParameter("IdentityNumber", identityNumber) :
                new ObjectParameter("IdentityNumber", typeof(string));
    
            var participantTypeIDParameter = participantTypeID.HasValue ?
                new ObjectParameter("ParticipantTypeID", participantTypeID) :
                new ObjectParameter("ParticipantTypeID", typeof(int));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(int));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("End", end) :
                new ObjectParameter("End", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetParticipants_Result>("REPS_GetParticipants", dealIDParameter, participantIDParameter, givenNameParameter, familyNameParameter, identityNumberParameter, participantTypeIDParameter, startParameter, endParameter);
        }
    
        public virtual ObjectResult<REPS_GetParticipantBankDetails_Result> REPS_GetParticipantBankDetails(Nullable<int> participantID, Nullable<int> start, Nullable<int> end)
        {
            var participantIDParameter = participantID.HasValue ?
                new ObjectParameter("ParticipantID", participantID) :
                new ObjectParameter("ParticipantID", typeof(int));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(int));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("End", end) :
                new ObjectParameter("End", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetParticipantBankDetails_Result>("REPS_GetParticipantBankDetails", participantIDParameter, startParameter, endParameter);
        }
    
        public virtual ObjectResult<REPS_GetBankAddressCountByParticpantID_Result> REPS_GetBankAddressCountByParticpantID(Nullable<int> dealID, Nullable<int> participantID)
        {
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("DealID", dealID) :
                new ObjectParameter("DealID", typeof(int));
    
            var participantIDParameter = participantID.HasValue ?
                new ObjectParameter("ParticipantID", participantID) :
                new ObjectParameter("ParticipantID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetBankAddressCountByParticpantID_Result>("REPS_GetBankAddressCountByParticpantID", dealIDParameter, participantIDParameter);
        }
    
        public virtual ObjectResult<REPS_GetAddress_Result> REPS_GetAddress(Nullable<int> participantID, Nullable<int> addressID, Nullable<int> start, Nullable<int> end)
        {
            var participantIDParameter = participantID.HasValue ?
                new ObjectParameter("participantID", participantID) :
                new ObjectParameter("participantID", typeof(int));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("addressID", addressID) :
                new ObjectParameter("addressID", typeof(int));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(int));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("End", end) :
                new ObjectParameter("End", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetAddress_Result>("REPS_GetAddress", participantIDParameter, addressIDParameter, startParameter, endParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> REPS_GetAddressIDByAddressGUID(string uniqueReference)
        {
            var uniqueReferenceParameter = uniqueReference != null ?
                new ObjectParameter("uniqueReference", uniqueReference) :
                new ObjectParameter("uniqueReference", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("REPS_GetAddressIDByAddressGUID", uniqueReferenceParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> REPS_GetPropertyDetailIDByPropertyDetailGUID(string uniqueReference)
        {
            var uniqueReferenceParameter = uniqueReference != null ?
                new ObjectParameter("uniqueReference", uniqueReference) :
                new ObjectParameter("uniqueReference", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("REPS_GetPropertyDetailIDByPropertyDetailGUID", uniqueReferenceParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> REPS_GetPropertyIDByPropertyGUID(string uniqueReference)
        {
            var uniqueReferenceParameter = uniqueReference != null ?
                new ObjectParameter("uniqueReference", uniqueReference) :
                new ObjectParameter("uniqueReference", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("REPS_GetPropertyIDByPropertyGUID", uniqueReferenceParameter);
        }
    
        public virtual ObjectResult<REPS_GetProperties_Result> REPS_GetProperties(Nullable<int> dealID, Nullable<int> propertyID, Nullable<int> start, Nullable<int> end)
        {
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("DealID", dealID) :
                new ObjectParameter("DealID", typeof(int));
    
            var propertyIDParameter = propertyID.HasValue ?
                new ObjectParameter("PropertyID", propertyID) :
                new ObjectParameter("PropertyID", typeof(int));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(int));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("End", end) :
                new ObjectParameter("End", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetProperties_Result>("REPS_GetProperties", dealIDParameter, propertyIDParameter, startParameter, endParameter);
        }
    
        public virtual ObjectResult<REPS_GetInterestType_Result> REPS_GetInterestType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetInterestType_Result>("REPS_GetInterestType");
        }
    
        public virtual ObjectResult<REPS_GetMortgagePurchasePrice_Result> REPS_GetMortgagePurchasePrice(Nullable<int> dealID)
        {
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("DealID", dealID) :
                new ObjectParameter("DealID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetMortgagePurchasePrice_Result>("REPS_GetMortgagePurchasePrice", dealIDParameter);
        }
    
        public virtual ObjectResult<REPS_GetMortgages_ByDealID_Result> REPS_GetMortgages_ByDealID(Nullable<int> dealID, Nullable<int> mortgageID)
        {
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("DealID", dealID) :
                new ObjectParameter("DealID", typeof(int));
    
            var mortgageIDParameter = mortgageID.HasValue ?
                new ObjectParameter("MortgageID", mortgageID) :
                new ObjectParameter("MortgageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetMortgages_ByDealID_Result>("REPS_GetMortgages_ByDealID", dealIDParameter, mortgageIDParameter);
        }
    
        public virtual ObjectResult<REPS_GetReportName_Result> REPS_GetReportName(string location, string chartName, string chartType, string description, Nullable<int> start, Nullable<int> end)
        {
            var locationParameter = location != null ?
                new ObjectParameter("location", location) :
                new ObjectParameter("location", typeof(string));
    
            var chartNameParameter = chartName != null ?
                new ObjectParameter("chartName", chartName) :
                new ObjectParameter("chartName", typeof(string));
    
            var chartTypeParameter = chartType != null ?
                new ObjectParameter("chartType", chartType) :
                new ObjectParameter("chartType", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(int));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("End", end) :
                new ObjectParameter("End", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetReportName_Result>("REPS_GetReportName", locationParameter, chartNameParameter, chartTypeParameter, descriptionParameter, startParameter, endParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> REPS_GetMortgageIDByMortgageGUID(string uniqueReference)
        {
            var uniqueReferenceParameter = uniqueReference != null ?
                new ObjectParameter("uniqueReference", uniqueReference) :
                new ObjectParameter("uniqueReference", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("REPS_GetMortgageIDByMortgageGUID", uniqueReferenceParameter);
        }
    
        public virtual ObjectResult<REPS_ReportFilterFeeTypesListDropDown_Result> REPS_ReportFilterFeeTypesListDropDown(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_ReportFilterFeeTypesListDropDown_Result>("REPS_ReportFilterFeeTypesListDropDown", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<REPS_ReportGetUsers_Result> REPS_ReportGetUsers(Nullable<int> userID, Nullable<int> entityID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_ReportGetUsers_Result>("REPS_ReportGetUsers", userIDParameter, entityIDParameter);
        }
    
        public virtual ObjectResult<REPS_ReportWorkflowStatus_Result> REPS_ReportWorkflowStatus(Nullable<int> workflowID)
        {
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_ReportWorkflowStatus_Result>("REPS_ReportWorkflowStatus", workflowIDParameter);
        }
    
        public virtual ObjectResult<REPS_GetReportFilters_Result> REPS_GetReportFilters(Nullable<int> reportId, Nullable<int> start, Nullable<int> end)
        {
            var reportIdParameter = reportId.HasValue ?
                new ObjectParameter("ReportId", reportId) :
                new ObjectParameter("ReportId", typeof(int));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(int));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("End", end) :
                new ObjectParameter("End", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetReportFilters_Result>("REPS_GetReportFilters", reportIdParameter, startParameter, endParameter);
        }
    
        public virtual int REPS_UpdateAlerts_ByAlertID(string eventName, string location, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string description, Nullable<int> alertID, ObjectParameter rowCount)
        {
            var eventNameParameter = eventName != null ?
                new ObjectParameter("EventName", eventName) :
                new ObjectParameter("EventName", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var alertIDParameter = alertID.HasValue ?
                new ObjectParameter("AlertID", alertID) :
                new ObjectParameter("AlertID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_UpdateAlerts_ByAlertID", eventNameParameter, locationParameter, startDateParameter, endDateParameter, descriptionParameter, alertIDParameter, rowCount);
        }
    
        public virtual int REPS_UpdateAlertsStatus_ByAlertID(Nullable<int> statusID, Nullable<int> alertID, ObjectParameter rowCount)
        {
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var alertIDParameter = alertID.HasValue ?
                new ObjectParameter("AlertID", alertID) :
                new ObjectParameter("AlertID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_UpdateAlertsStatus_ByAlertID", statusIDParameter, alertIDParameter, rowCount);
        }
    
        public virtual int REPS_ADM_AddEntity(Nullable<int> organizationTypeID, string name, string registrationNumber, string legalName, string alternateName, string vatID, Nullable<decimal> telephone, Nullable<decimal> faxNumber, string email, Nullable<int> addressTypeID, string addressLine1, string addressLine2, string city, Nullable<int> provinceID, Nullable<int> countryID, string postalCode, Nullable<int> parentEntityID, ObjectParameter identity)
        {
            var organizationTypeIDParameter = organizationTypeID.HasValue ?
                new ObjectParameter("OrganizationTypeID", organizationTypeID) :
                new ObjectParameter("OrganizationTypeID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var registrationNumberParameter = registrationNumber != null ?
                new ObjectParameter("RegistrationNumber", registrationNumber) :
                new ObjectParameter("RegistrationNumber", typeof(string));
    
            var legalNameParameter = legalName != null ?
                new ObjectParameter("LegalName", legalName) :
                new ObjectParameter("LegalName", typeof(string));
    
            var alternateNameParameter = alternateName != null ?
                new ObjectParameter("AlternateName", alternateName) :
                new ObjectParameter("AlternateName", typeof(string));
    
            var vatIDParameter = vatID != null ?
                new ObjectParameter("VatID", vatID) :
                new ObjectParameter("VatID", typeof(string));
    
            var telephoneParameter = telephone.HasValue ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(decimal));
    
            var faxNumberParameter = faxNumber.HasValue ?
                new ObjectParameter("FaxNumber", faxNumber) :
                new ObjectParameter("FaxNumber", typeof(decimal));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var addressTypeIDParameter = addressTypeID.HasValue ?
                new ObjectParameter("AddressTypeID", addressTypeID) :
                new ObjectParameter("AddressTypeID", typeof(int));
    
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("AddressLine1", addressLine1) :
                new ObjectParameter("AddressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("AddressLine2", addressLine2) :
                new ObjectParameter("AddressLine2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var provinceIDParameter = provinceID.HasValue ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var parentEntityIDParameter = parentEntityID.HasValue ?
                new ObjectParameter("ParentEntityID", parentEntityID) :
                new ObjectParameter("ParentEntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_ADM_AddEntity", organizationTypeIDParameter, nameParameter, registrationNumberParameter, legalNameParameter, alternateNameParameter, vatIDParameter, telephoneParameter, faxNumberParameter, emailParameter, addressTypeIDParameter, addressLine1Parameter, addressLine2Parameter, cityParameter, provinceIDParameter, countryIDParameter, postalCodeParameter, parentEntityIDParameter, identity);
        }
    
        public virtual ObjectResult<REPS_GetTitles_Result> REPS_GetTitles(Nullable<int> titleID)
        {
            var titleIDParameter = titleID.HasValue ?
                new ObjectParameter("TitleID", titleID) :
                new ObjectParameter("TitleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetTitles_Result>("REPS_GetTitles", titleIDParameter);
        }
    
        public virtual ObjectResult<REPS_GetAlerts_ByAlertID_Result> REPS_GetAlerts_ByAlertID(Nullable<int> alertID)
        {
            var alertIDParameter = alertID.HasValue ?
                new ObjectParameter("AlertID", alertID) :
                new ObjectParameter("AlertID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetAlerts_ByAlertID_Result>("REPS_GetAlerts_ByAlertID", alertIDParameter);
        }
    
        public virtual ObjectResult<REPS_GetAlerts_ByUserID_Result> REPS_GetAlerts_ByUserID(Nullable<int> userID, string filter, Nullable<int> dealID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("DealID", dealID) :
                new ObjectParameter("DealID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetAlerts_ByUserID_Result>("REPS_GetAlerts_ByUserID", userIDParameter, filterParameter, dealIDParameter);
        }
    
        public virtual ObjectResult<REPS_GetDiaryItems_ByUserID_Result> REPS_GetDiaryItems_ByUserID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetDiaryItems_ByUserID_Result>("REPS_GetDiaryItems_ByUserID", userIDParameter);
        }
    
        public virtual int REPS_AddWorkflowActionNewTransaction(Nullable<int> dealID, Nullable<int> transactionTypeID, Nullable<int> transactionStatusID, Nullable<int> workflowTaskID, Nullable<int> userID, ObjectParameter rowCount)
        {
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("dealID", dealID) :
                new ObjectParameter("dealID", typeof(int));
    
            var transactionTypeIDParameter = transactionTypeID.HasValue ?
                new ObjectParameter("transactionTypeID", transactionTypeID) :
                new ObjectParameter("transactionTypeID", typeof(int));
    
            var transactionStatusIDParameter = transactionStatusID.HasValue ?
                new ObjectParameter("transactionStatusID", transactionStatusID) :
                new ObjectParameter("transactionStatusID", typeof(int));
    
            var workflowTaskIDParameter = workflowTaskID.HasValue ?
                new ObjectParameter("workflowTaskID", workflowTaskID) :
                new ObjectParameter("workflowTaskID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_AddWorkflowActionNewTransaction", dealIDParameter, transactionTypeIDParameter, transactionStatusIDParameter, workflowTaskIDParameter, userIDParameter, rowCount);
        }
    
        public virtual ObjectResult<Nullable<long>> REPS_GetAlertsIDByAlertsGUID(string uniqueReference)
        {
            var uniqueReferenceParameter = uniqueReference != null ?
                new ObjectParameter("uniqueReference", uniqueReference) :
                new ObjectParameter("uniqueReference", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("REPS_GetAlertsIDByAlertsGUID", uniqueReferenceParameter);
        }
    
        public virtual ObjectResult<REPS_GetMandatoryActionsList_Result> REPS_GetMandatoryActionsList(Nullable<int> workflowID)
        {
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("workflowID", workflowID) :
                new ObjectParameter("workflowID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetMandatoryActionsList_Result>("REPS_GetMandatoryActionsList", workflowIDParameter);
        }
    
        public virtual int REPS_UpdateWorkflowActionValues(Nullable<int> transactionID, Nullable<int> workflowActionVarID, Nullable<int> variableTypeID, string value, ObjectParameter rowCount)
        {
            var transactionIDParameter = transactionID.HasValue ?
                new ObjectParameter("transactionID", transactionID) :
                new ObjectParameter("transactionID", typeof(int));
    
            var workflowActionVarIDParameter = workflowActionVarID.HasValue ?
                new ObjectParameter("workflowActionVarID", workflowActionVarID) :
                new ObjectParameter("workflowActionVarID", typeof(int));
    
            var variableTypeIDParameter = variableTypeID.HasValue ?
                new ObjectParameter("variableTypeID", variableTypeID) :
                new ObjectParameter("variableTypeID", typeof(int));
    
            var valueParameter = value != null ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_UpdateWorkflowActionValues", transactionIDParameter, workflowActionVarIDParameter, variableTypeIDParameter, valueParameter, rowCount);
        }
    
        public virtual int REPS_ADM_AddUser(Nullable<int> entityID, Nullable<int> titleID, string givenName, string familyName, string identityNumber, string passportNumber, Nullable<int> passportCountryID, string taxID, Nullable<System.DateTime> birthDate, string birthPlace, Nullable<decimal> telephone, Nullable<decimal> mobileNumber, string email, Nullable<decimal> faxNumber, Nullable<int> jobTitleID, Nullable<bool> verified, Nullable<System.DateTime> dateCreated, Nullable<System.DateTime> dateModified, Nullable<bool> deleted, string aspNetUserId, Nullable<int> workflowID, ObjectParameter identity, string tokenId)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var titleIDParameter = titleID.HasValue ?
                new ObjectParameter("TitleID", titleID) :
                new ObjectParameter("TitleID", typeof(int));
    
            var givenNameParameter = givenName != null ?
                new ObjectParameter("GivenName", givenName) :
                new ObjectParameter("GivenName", typeof(string));
    
            var familyNameParameter = familyName != null ?
                new ObjectParameter("FamilyName", familyName) :
                new ObjectParameter("FamilyName", typeof(string));
    
            var identityNumberParameter = identityNumber != null ?
                new ObjectParameter("IdentityNumber", identityNumber) :
                new ObjectParameter("IdentityNumber", typeof(string));
    
            var passportNumberParameter = passportNumber != null ?
                new ObjectParameter("PassportNumber", passportNumber) :
                new ObjectParameter("PassportNumber", typeof(string));
    
            var passportCountryIDParameter = passportCountryID.HasValue ?
                new ObjectParameter("PassportCountryID", passportCountryID) :
                new ObjectParameter("PassportCountryID", typeof(int));
    
            var taxIDParameter = taxID != null ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var birthPlaceParameter = birthPlace != null ?
                new ObjectParameter("BirthPlace", birthPlace) :
                new ObjectParameter("BirthPlace", typeof(string));
    
            var telephoneParameter = telephone.HasValue ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(decimal));
    
            var mobileNumberParameter = mobileNumber.HasValue ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(decimal));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var faxNumberParameter = faxNumber.HasValue ?
                new ObjectParameter("FaxNumber", faxNumber) :
                new ObjectParameter("FaxNumber", typeof(decimal));
    
            var jobTitleIDParameter = jobTitleID.HasValue ?
                new ObjectParameter("JobTitleID", jobTitleID) :
                new ObjectParameter("JobTitleID", typeof(int));
    
            var verifiedParameter = verified.HasValue ?
                new ObjectParameter("Verified", verified) :
                new ObjectParameter("Verified", typeof(bool));
    
            var dateCreatedParameter = dateCreated.HasValue ?
                new ObjectParameter("DateCreated", dateCreated) :
                new ObjectParameter("DateCreated", typeof(System.DateTime));
    
            var dateModifiedParameter = dateModified.HasValue ?
                new ObjectParameter("DateModified", dateModified) :
                new ObjectParameter("DateModified", typeof(System.DateTime));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("Deleted", deleted) :
                new ObjectParameter("Deleted", typeof(bool));
    
            var aspNetUserIdParameter = aspNetUserId != null ?
                new ObjectParameter("AspNetUserId", aspNetUserId) :
                new ObjectParameter("AspNetUserId", typeof(string));
    
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            var tokenIdParameter = tokenId != null ?
                new ObjectParameter("TokenId", tokenId) :
                new ObjectParameter("TokenId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_ADM_AddUser", entityIDParameter, titleIDParameter, givenNameParameter, familyNameParameter, identityNumberParameter, passportNumberParameter, passportCountryIDParameter, taxIDParameter, birthDateParameter, birthPlaceParameter, telephoneParameter, mobileNumberParameter, emailParameter, faxNumberParameter, jobTitleIDParameter, verifiedParameter, dateCreatedParameter, dateModifiedParameter, deletedParameter, aspNetUserIdParameter, workflowIDParameter, identity, tokenIdParameter);
        }
    
        public virtual int REPS_ADM_UpdateReactivateUser(Nullable<int> entityID, Nullable<int> titleID, string givenName, string familyName, string identityNumber, string passportNumber, Nullable<int> passportCountryID, string taxID, Nullable<System.DateTime> birthDate, string birthPlace, Nullable<decimal> telephone, Nullable<decimal> mobile, Nullable<decimal> faxNumber, Nullable<int> jobTitleID, Nullable<bool> verified, Nullable<System.DateTime> dateModified, string aspNetUserId, Nullable<int> workflowID, string email, Nullable<System.DateTime> dateCreated)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var titleIDParameter = titleID.HasValue ?
                new ObjectParameter("TitleID", titleID) :
                new ObjectParameter("TitleID", typeof(int));
    
            var givenNameParameter = givenName != null ?
                new ObjectParameter("GivenName", givenName) :
                new ObjectParameter("GivenName", typeof(string));
    
            var familyNameParameter = familyName != null ?
                new ObjectParameter("FamilyName", familyName) :
                new ObjectParameter("FamilyName", typeof(string));
    
            var identityNumberParameter = identityNumber != null ?
                new ObjectParameter("IdentityNumber", identityNumber) :
                new ObjectParameter("IdentityNumber", typeof(string));
    
            var passportNumberParameter = passportNumber != null ?
                new ObjectParameter("PassportNumber", passportNumber) :
                new ObjectParameter("PassportNumber", typeof(string));
    
            var passportCountryIDParameter = passportCountryID.HasValue ?
                new ObjectParameter("PassportCountryID", passportCountryID) :
                new ObjectParameter("PassportCountryID", typeof(int));
    
            var taxIDParameter = taxID != null ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var birthPlaceParameter = birthPlace != null ?
                new ObjectParameter("BirthPlace", birthPlace) :
                new ObjectParameter("BirthPlace", typeof(string));
    
            var telephoneParameter = telephone.HasValue ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(decimal));
    
            var mobileParameter = mobile.HasValue ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(decimal));
    
            var faxNumberParameter = faxNumber.HasValue ?
                new ObjectParameter("FaxNumber", faxNumber) :
                new ObjectParameter("FaxNumber", typeof(decimal));
    
            var jobTitleIDParameter = jobTitleID.HasValue ?
                new ObjectParameter("JobTitleID", jobTitleID) :
                new ObjectParameter("JobTitleID", typeof(int));
    
            var verifiedParameter = verified.HasValue ?
                new ObjectParameter("Verified", verified) :
                new ObjectParameter("Verified", typeof(bool));
    
            var dateModifiedParameter = dateModified.HasValue ?
                new ObjectParameter("DateModified", dateModified) :
                new ObjectParameter("DateModified", typeof(System.DateTime));
    
            var aspNetUserIdParameter = aspNetUserId != null ?
                new ObjectParameter("AspNetUserId", aspNetUserId) :
                new ObjectParameter("AspNetUserId", typeof(string));
    
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var dateCreatedParameter = dateCreated.HasValue ?
                new ObjectParameter("DateCreated", dateCreated) :
                new ObjectParameter("DateCreated", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_ADM_UpdateReactivateUser", entityIDParameter, titleIDParameter, givenNameParameter, familyNameParameter, identityNumberParameter, passportNumberParameter, passportCountryIDParameter, taxIDParameter, birthDateParameter, birthPlaceParameter, telephoneParameter, mobileParameter, faxNumberParameter, jobTitleIDParameter, verifiedParameter, dateModifiedParameter, aspNetUserIdParameter, workflowIDParameter, emailParameter, dateCreatedParameter);
        }
    
        public virtual ObjectResult<REPS_GetUserInfo_Result> REPS_GetUserInfo(Nullable<int> userID, string aspNetUsersId)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var aspNetUsersIdParameter = aspNetUsersId != null ?
                new ObjectParameter("AspNetUsersId", aspNetUsersId) :
                new ObjectParameter("AspNetUsersId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetUserInfo_Result>("REPS_GetUserInfo", userIDParameter, aspNetUsersIdParameter);
        }
    
        public virtual ObjectResult<REPS_GetWorkflowDealCount_Result> REPS_GetWorkflowDealCount(Nullable<int> userID, Nullable<int> workflowID, Nullable<int> dealProcessTaskID, Nullable<int> entityID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            var dealProcessTaskIDParameter = dealProcessTaskID.HasValue ?
                new ObjectParameter("DealProcessTaskID", dealProcessTaskID) :
                new ObjectParameter("DealProcessTaskID", typeof(int));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetWorkflowDealCount_Result>("REPS_GetWorkflowDealCount", userIDParameter, workflowIDParameter, dealProcessTaskIDParameter, entityIDParameter);
        }
    
        public virtual int REPS_AddFinancialInstrument(Nullable<int> participant, Nullable<decimal> value, Nullable<decimal> deposit, string termLoan, Nullable<decimal> interestRate, Nullable<int> lenderID, Nullable<int> instrumentTypeID, Nullable<int> interestTypeID, ObjectParameter identity, Nullable<int> dealID, Nullable<int> workflowTaskID, Nullable<int> userID)
        {
            var participantParameter = participant.HasValue ?
                new ObjectParameter("Participant", participant) :
                new ObjectParameter("Participant", typeof(int));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(decimal));
    
            var depositParameter = deposit.HasValue ?
                new ObjectParameter("Deposit", deposit) :
                new ObjectParameter("Deposit", typeof(decimal));
    
            var termLoanParameter = termLoan != null ?
                new ObjectParameter("TermLoan", termLoan) :
                new ObjectParameter("TermLoan", typeof(string));
    
            var interestRateParameter = interestRate.HasValue ?
                new ObjectParameter("InterestRate", interestRate) :
                new ObjectParameter("InterestRate", typeof(decimal));
    
            var lenderIDParameter = lenderID.HasValue ?
                new ObjectParameter("LenderID", lenderID) :
                new ObjectParameter("LenderID", typeof(int));
    
            var instrumentTypeIDParameter = instrumentTypeID.HasValue ?
                new ObjectParameter("InstrumentTypeID", instrumentTypeID) :
                new ObjectParameter("InstrumentTypeID", typeof(int));
    
            var interestTypeIDParameter = interestTypeID.HasValue ?
                new ObjectParameter("InterestTypeID", interestTypeID) :
                new ObjectParameter("InterestTypeID", typeof(int));
    
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("DealID", dealID) :
                new ObjectParameter("DealID", typeof(int));
    
            var workflowTaskIDParameter = workflowTaskID.HasValue ?
                new ObjectParameter("WorkflowTaskID", workflowTaskID) :
                new ObjectParameter("WorkflowTaskID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_AddFinancialInstrument", participantParameter, valueParameter, depositParameter, termLoanParameter, interestRateParameter, lenderIDParameter, instrumentTypeIDParameter, interestTypeIDParameter, identity, dealIDParameter, workflowTaskIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<REPS_GetUsersByAspId_Result> REPS_GetUsersByAspId(string aspNetUsersId)
        {
            var aspNetUsersIdParameter = aspNetUsersId != null ?
                new ObjectParameter("AspNetUsersId", aspNetUsersId) :
                new ObjectParameter("AspNetUsersId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetUsersByAspId_Result>("REPS_GetUsersByAspId", aspNetUsersIdParameter);
        }
    
        public virtual ObjectResult<REPS_Template_Client_Care_Letter_Result> REPS_Template_Client_Care_Letter(Nullable<int> dealId)
        {
            var dealIdParameter = dealId.HasValue ?
                new ObjectParameter("DealId", dealId) :
                new ObjectParameter("DealId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_Template_Client_Care_Letter_Result>("REPS_Template_Client_Care_Letter", dealIdParameter);
        }
    
        public virtual ObjectResult<REPS_GetAddPaymentFields_Result> REPS_GetAddPaymentFields(Nullable<int> taskID, Nullable<int> workflowActionID)
        {
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("taskID", taskID) :
                new ObjectParameter("taskID", typeof(int));
    
            var workflowActionIDParameter = workflowActionID.HasValue ?
                new ObjectParameter("workflowActionID", workflowActionID) :
                new ObjectParameter("workflowActionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetAddPaymentFields_Result>("REPS_GetAddPaymentFields", taskIDParameter, workflowActionIDParameter);
        }
    
        public virtual int REPS_ArchivePaymentByTransactionID(Nullable<int> oldtransactionID, Nullable<int> dealID, Nullable<int> transactionTypeID, Nullable<int> transactionStatusID, Nullable<int> workflowTaskID, Nullable<int> userID, ObjectParameter rowCount)
        {
            var oldtransactionIDParameter = oldtransactionID.HasValue ?
                new ObjectParameter("oldtransactionID", oldtransactionID) :
                new ObjectParameter("oldtransactionID", typeof(int));
    
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("dealID", dealID) :
                new ObjectParameter("dealID", typeof(int));
    
            var transactionTypeIDParameter = transactionTypeID.HasValue ?
                new ObjectParameter("transactionTypeID", transactionTypeID) :
                new ObjectParameter("transactionTypeID", typeof(int));
    
            var transactionStatusIDParameter = transactionStatusID.HasValue ?
                new ObjectParameter("transactionStatusID", transactionStatusID) :
                new ObjectParameter("transactionStatusID", typeof(int));
    
            var workflowTaskIDParameter = workflowTaskID.HasValue ?
                new ObjectParameter("workflowTaskID", workflowTaskID) :
                new ObjectParameter("workflowTaskID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_ArchivePaymentByTransactionID", oldtransactionIDParameter, dealIDParameter, transactionTypeIDParameter, transactionStatusIDParameter, workflowTaskIDParameter, userIDParameter, rowCount);
        }
    
        public virtual ObjectResult<REPS_GetPaymentTypeList_Result> REPS_GetPaymentTypeList(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetPaymentTypeList_Result>("REPS_GetPaymentTypeList", startDateParameter, endDateParameter);
        }
    
        public virtual int REPS_UpdatePayment(Nullable<int> transactionID, Nullable<int> workflowActionVarID, Nullable<int> variableTypeID, string value, ObjectParameter rowCount)
        {
            var transactionIDParameter = transactionID.HasValue ?
                new ObjectParameter("transactionID", transactionID) :
                new ObjectParameter("transactionID", typeof(int));
    
            var workflowActionVarIDParameter = workflowActionVarID.HasValue ?
                new ObjectParameter("workflowActionVarID", workflowActionVarID) :
                new ObjectParameter("workflowActionVarID", typeof(int));
    
            var variableTypeIDParameter = variableTypeID.HasValue ?
                new ObjectParameter("variableTypeID", variableTypeID) :
                new ObjectParameter("variableTypeID", typeof(int));
    
            var valueParameter = value != null ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_UpdatePayment", transactionIDParameter, workflowActionVarIDParameter, variableTypeIDParameter, valueParameter, rowCount);
        }
    
        public virtual ObjectResult<REPS_VerifyIndividualExist_Result> REPS_VerifyIndividualExist(Nullable<int> dealID, Nullable<int> participantRoleID, string givenName, string familyName, string email)
        {
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("DealID", dealID) :
                new ObjectParameter("DealID", typeof(int));
    
            var participantRoleIDParameter = participantRoleID.HasValue ?
                new ObjectParameter("ParticipantRoleID", participantRoleID) :
                new ObjectParameter("ParticipantRoleID", typeof(int));
    
            var givenNameParameter = givenName != null ?
                new ObjectParameter("GivenName", givenName) :
                new ObjectParameter("GivenName", typeof(string));
    
            var familyNameParameter = familyName != null ?
                new ObjectParameter("FamilyName", familyName) :
                new ObjectParameter("FamilyName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_VerifyIndividualExist_Result>("REPS_VerifyIndividualExist", dealIDParameter, participantRoleIDParameter, givenNameParameter, familyNameParameter, emailParameter);
        }
    
        public virtual int REPS_AddPerson(Nullable<int> organizationID, Nullable<int> titleID, string givenName, string familyName, Nullable<int> identityTypeID, string identityNumber, string passportNumber, Nullable<int> passportCountryID, string taxID, Nullable<System.DateTime> birthDate, string birthPlace, Nullable<decimal> telephone, Nullable<decimal> faxNumber, Nullable<decimal> mobileNumber, string email, Nullable<int> jobTitleID, Nullable<bool> verified, Nullable<System.DateTime> dateCreated, Nullable<bool> deleted, Nullable<int> dealID, Nullable<int> participantRoleID, ObjectParameter identity)
        {
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            var titleIDParameter = titleID.HasValue ?
                new ObjectParameter("TitleID", titleID) :
                new ObjectParameter("TitleID", typeof(int));
    
            var givenNameParameter = givenName != null ?
                new ObjectParameter("GivenName", givenName) :
                new ObjectParameter("GivenName", typeof(string));
    
            var familyNameParameter = familyName != null ?
                new ObjectParameter("FamilyName", familyName) :
                new ObjectParameter("FamilyName", typeof(string));
    
            var identityTypeIDParameter = identityTypeID.HasValue ?
                new ObjectParameter("IdentityTypeID", identityTypeID) :
                new ObjectParameter("IdentityTypeID", typeof(int));
    
            var identityNumberParameter = identityNumber != null ?
                new ObjectParameter("IdentityNumber", identityNumber) :
                new ObjectParameter("IdentityNumber", typeof(string));
    
            var passportNumberParameter = passportNumber != null ?
                new ObjectParameter("PassportNumber", passportNumber) :
                new ObjectParameter("PassportNumber", typeof(string));
    
            var passportCountryIDParameter = passportCountryID.HasValue ?
                new ObjectParameter("PassportCountryID", passportCountryID) :
                new ObjectParameter("PassportCountryID", typeof(int));
    
            var taxIDParameter = taxID != null ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var birthPlaceParameter = birthPlace != null ?
                new ObjectParameter("BirthPlace", birthPlace) :
                new ObjectParameter("BirthPlace", typeof(string));
    
            var telephoneParameter = telephone.HasValue ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(decimal));
    
            var faxNumberParameter = faxNumber.HasValue ?
                new ObjectParameter("FaxNumber", faxNumber) :
                new ObjectParameter("FaxNumber", typeof(decimal));
    
            var mobileNumberParameter = mobileNumber.HasValue ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(decimal));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var jobTitleIDParameter = jobTitleID.HasValue ?
                new ObjectParameter("JobTitleID", jobTitleID) :
                new ObjectParameter("JobTitleID", typeof(int));
    
            var verifiedParameter = verified.HasValue ?
                new ObjectParameter("Verified", verified) :
                new ObjectParameter("Verified", typeof(bool));
    
            var dateCreatedParameter = dateCreated.HasValue ?
                new ObjectParameter("DateCreated", dateCreated) :
                new ObjectParameter("DateCreated", typeof(System.DateTime));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("Deleted", deleted) :
                new ObjectParameter("Deleted", typeof(bool));
    
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("DealID", dealID) :
                new ObjectParameter("DealID", typeof(int));
    
            var participantRoleIDParameter = participantRoleID.HasValue ?
                new ObjectParameter("ParticipantRoleID", participantRoleID) :
                new ObjectParameter("ParticipantRoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_AddPerson", organizationIDParameter, titleIDParameter, givenNameParameter, familyNameParameter, identityTypeIDParameter, identityNumberParameter, passportNumberParameter, passportCountryIDParameter, taxIDParameter, birthDateParameter, birthPlaceParameter, telephoneParameter, faxNumberParameter, mobileNumberParameter, emailParameter, jobTitleIDParameter, verifiedParameter, dateCreatedParameter, deletedParameter, dealIDParameter, participantRoleIDParameter, identity);
        }
    
        public virtual int REPS_AddOrganisation(Nullable<int> organizationTypeID, string name, string registrationNumber, string legalName, string vatID, Nullable<decimal> telephone, Nullable<decimal> faxNumber, string email, Nullable<bool> verified, Nullable<System.DateTime> dateCreated, Nullable<bool> deleted, Nullable<int> entityID, Nullable<int> dealID, Nullable<int> participantRoleID, ObjectParameter identity)
        {
            var organizationTypeIDParameter = organizationTypeID.HasValue ?
                new ObjectParameter("OrganizationTypeID", organizationTypeID) :
                new ObjectParameter("OrganizationTypeID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var registrationNumberParameter = registrationNumber != null ?
                new ObjectParameter("RegistrationNumber", registrationNumber) :
                new ObjectParameter("RegistrationNumber", typeof(string));
    
            var legalNameParameter = legalName != null ?
                new ObjectParameter("LegalName", legalName) :
                new ObjectParameter("LegalName", typeof(string));
    
            var vatIDParameter = vatID != null ?
                new ObjectParameter("VatID", vatID) :
                new ObjectParameter("VatID", typeof(string));
    
            var telephoneParameter = telephone.HasValue ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(decimal));
    
            var faxNumberParameter = faxNumber.HasValue ?
                new ObjectParameter("FaxNumber", faxNumber) :
                new ObjectParameter("FaxNumber", typeof(decimal));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var verifiedParameter = verified.HasValue ?
                new ObjectParameter("Verified", verified) :
                new ObjectParameter("Verified", typeof(bool));
    
            var dateCreatedParameter = dateCreated.HasValue ?
                new ObjectParameter("DateCreated", dateCreated) :
                new ObjectParameter("DateCreated", typeof(System.DateTime));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("Deleted", deleted) :
                new ObjectParameter("Deleted", typeof(bool));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("DealID", dealID) :
                new ObjectParameter("DealID", typeof(int));
    
            var participantRoleIDParameter = participantRoleID.HasValue ?
                new ObjectParameter("ParticipantRoleID", participantRoleID) :
                new ObjectParameter("ParticipantRoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_AddOrganisation", organizationTypeIDParameter, nameParameter, registrationNumberParameter, legalNameParameter, vatIDParameter, telephoneParameter, faxNumberParameter, emailParameter, verifiedParameter, dateCreatedParameter, deletedParameter, entityIDParameter, dealIDParameter, participantRoleIDParameter, identity);
        }
    
        public virtual ObjectResult<REPS_GetParticipantRoles_Result> REPS_GetParticipantRoles(Nullable<int> participantRoleID, Nullable<int> start, Nullable<int> end)
        {
            var participantRoleIDParameter = participantRoleID.HasValue ?
                new ObjectParameter("ParticipantRoleID", participantRoleID) :
                new ObjectParameter("ParticipantRoleID", typeof(int));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(int));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("End", end) :
                new ObjectParameter("End", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetParticipantRoles_Result>("REPS_GetParticipantRoles", participantRoleIDParameter, startParameter, endParameter);
        }
    
        public virtual int REPS_AddPayment(Nullable<int> dealID, Nullable<int> transactionID, Nullable<int> userID, Nullable<int> workflowTaskID, Nullable<int> workflowActionVarID, Nullable<int> variableTypeID, string value, ObjectParameter identity)
        {
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("dealID", dealID) :
                new ObjectParameter("dealID", typeof(int));
    
            var transactionIDParameter = transactionID.HasValue ?
                new ObjectParameter("transactionID", transactionID) :
                new ObjectParameter("transactionID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var workflowTaskIDParameter = workflowTaskID.HasValue ?
                new ObjectParameter("WorkflowTaskID", workflowTaskID) :
                new ObjectParameter("WorkflowTaskID", typeof(int));
    
            var workflowActionVarIDParameter = workflowActionVarID.HasValue ?
                new ObjectParameter("workflowActionVarID", workflowActionVarID) :
                new ObjectParameter("workflowActionVarID", typeof(int));
    
            var variableTypeIDParameter = variableTypeID.HasValue ?
                new ObjectParameter("variableTypeID", variableTypeID) :
                new ObjectParameter("variableTypeID", typeof(int));
    
            var valueParameter = value != null ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_AddPayment", dealIDParameter, transactionIDParameter, userIDParameter, workflowTaskIDParameter, workflowActionVarIDParameter, variableTypeIDParameter, valueParameter, identity);
        }
    
        public virtual int REPS_AddPaymentTransaction(Nullable<int> dealID, Nullable<int> transactionTypeID, Nullable<int> transactionStatusID, Nullable<int> workflowTaskID, Nullable<int> userID, ObjectParameter transactionID)
        {
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("dealID", dealID) :
                new ObjectParameter("dealID", typeof(int));
    
            var transactionTypeIDParameter = transactionTypeID.HasValue ?
                new ObjectParameter("transactionTypeID", transactionTypeID) :
                new ObjectParameter("transactionTypeID", typeof(int));
    
            var transactionStatusIDParameter = transactionStatusID.HasValue ?
                new ObjectParameter("transactionStatusID", transactionStatusID) :
                new ObjectParameter("transactionStatusID", typeof(int));
    
            var workflowTaskIDParameter = workflowTaskID.HasValue ?
                new ObjectParameter("workflowTaskID", workflowTaskID) :
                new ObjectParameter("workflowTaskID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_AddPaymentTransaction", dealIDParameter, transactionTypeIDParameter, transactionStatusIDParameter, workflowTaskIDParameter, userIDParameter, transactionID);
        }
    
        public virtual ObjectResult<Nullable<long>> REPS_GetTransactionDetailsIDByTransactionDetailsGUID(string uniqueReference)
        {
            var uniqueReferenceParameter = uniqueReference != null ?
                new ObjectParameter("uniqueReference", uniqueReference) :
                new ObjectParameter("uniqueReference", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("REPS_GetTransactionDetailsIDByTransactionDetailsGUID", uniqueReferenceParameter);
        }
    
        public virtual ObjectResult<REPS_GetPaymentList_Result> REPS_GetPaymentList(Nullable<int> dealID, Nullable<int> workflowTaskID)
        {
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("dealID", dealID) :
                new ObjectParameter("dealID", typeof(int));
    
            var workflowTaskIDParameter = workflowTaskID.HasValue ?
                new ObjectParameter("workflowTaskID", workflowTaskID) :
                new ObjectParameter("workflowTaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetPaymentList_Result>("REPS_GetPaymentList", dealIDParameter, workflowTaskIDParameter);
        }
    
        public virtual int REPS_DeletePaymentByTransactionID(Nullable<int> transactionID, ObjectParameter rowCount)
        {
            var transactionIDParameter = transactionID.HasValue ?
                new ObjectParameter("transactionID", transactionID) :
                new ObjectParameter("transactionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_DeletePaymentByTransactionID", transactionIDParameter, rowCount);
        }
    
        public virtual ObjectResult<REPS_GetEditPaymentFields_Result> REPS_GetEditPaymentFields(Nullable<int> dealID, Nullable<int> transactionID, Nullable<int> workflowActionID)
        {
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("dealID", dealID) :
                new ObjectParameter("dealID", typeof(int));
    
            var transactionIDParameter = transactionID.HasValue ?
                new ObjectParameter("transactionID", transactionID) :
                new ObjectParameter("transactionID", typeof(int));
    
            var workflowActionIDParameter = workflowActionID.HasValue ?
                new ObjectParameter("workflowActionID", workflowActionID) :
                new ObjectParameter("workflowActionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetEditPaymentFields_Result>("REPS_GetEditPaymentFields", dealIDParameter, transactionIDParameter, workflowActionIDParameter);
        }
    
        public virtual ObjectResult<REPS_GetDealCompletionDate_ByDealID_Result> REPS_GetDealCompletionDate_ByDealID(Nullable<int> dealID)
        {
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("DealID", dealID) :
                new ObjectParameter("DealID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetDealCompletionDate_ByDealID_Result>("REPS_GetDealCompletionDate_ByDealID", dealIDParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> REPS_GetUserDeletedStatus(string aspNetUsersId)
        {
            var aspNetUsersIdParameter = aspNetUsersId != null ?
                new ObjectParameter("AspNetUsersId", aspNetUsersId) :
                new ObjectParameter("AspNetUsersId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("REPS_GetUserDeletedStatus", aspNetUsersIdParameter);
        }
    
        public virtual int REPS_AddProperty(Nullable<int> dealID, string propertyDescription, string legalDescription, Nullable<int> addressID, Nullable<int> propertyTypeID, Nullable<bool> verified, Nullable<System.DateTime> dateCreated, Nullable<bool> deleted, ObjectParameter identity, Nullable<int> workflowTaskID, Nullable<int> userID)
        {
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("DealID", dealID) :
                new ObjectParameter("DealID", typeof(int));
    
            var propertyDescriptionParameter = propertyDescription != null ?
                new ObjectParameter("PropertyDescription", propertyDescription) :
                new ObjectParameter("PropertyDescription", typeof(string));
    
            var legalDescriptionParameter = legalDescription != null ?
                new ObjectParameter("LegalDescription", legalDescription) :
                new ObjectParameter("LegalDescription", typeof(string));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var propertyTypeIDParameter = propertyTypeID.HasValue ?
                new ObjectParameter("PropertyTypeID", propertyTypeID) :
                new ObjectParameter("PropertyTypeID", typeof(int));
    
            var verifiedParameter = verified.HasValue ?
                new ObjectParameter("Verified", verified) :
                new ObjectParameter("Verified", typeof(bool));
    
            var dateCreatedParameter = dateCreated.HasValue ?
                new ObjectParameter("DateCreated", dateCreated) :
                new ObjectParameter("DateCreated", typeof(System.DateTime));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("Deleted", deleted) :
                new ObjectParameter("Deleted", typeof(bool));
    
            var workflowTaskIDParameter = workflowTaskID.HasValue ?
                new ObjectParameter("WorkflowTaskID", workflowTaskID) :
                new ObjectParameter("WorkflowTaskID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_AddProperty", dealIDParameter, propertyDescriptionParameter, legalDescriptionParameter, addressIDParameter, propertyTypeIDParameter, verifiedParameter, dateCreatedParameter, deletedParameter, identity, workflowTaskIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<REPS_GetWorkFlowActionsEditFieldsValues_Result> REPS_GetWorkFlowActionsEditFieldsValues(Nullable<int> dealID, Nullable<int> taskID, Nullable<int> workflowActionID)
        {
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("dealID", dealID) :
                new ObjectParameter("dealID", typeof(int));
    
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("taskID", taskID) :
                new ObjectParameter("taskID", typeof(int));
    
            var workflowActionIDParameter = workflowActionID.HasValue ?
                new ObjectParameter("workflowActionID", workflowActionID) :
                new ObjectParameter("workflowActionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetWorkFlowActionsEditFieldsValues_Result>("REPS_GetWorkFlowActionsEditFieldsValues", dealIDParameter, taskIDParameter, workflowActionIDParameter);
        }
    
        public virtual int REPS_RemoveTransactionImg(Nullable<int> transactionDetailID, Nullable<bool> deleted, ObjectParameter rowCount)
        {
            var transactionDetailIDParameter = transactionDetailID.HasValue ?
                new ObjectParameter("transactionDetailID", transactionDetailID) :
                new ObjectParameter("transactionDetailID", typeof(int));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("Deleted", deleted) :
                new ObjectParameter("Deleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_RemoveTransactionImg", transactionDetailIDParameter, deletedParameter, rowCount);
        }
    
        public virtual int REPS_DeleteTransactionImg(Nullable<int> transactionDetailID, Nullable<bool> deleted, ObjectParameter rowCount)
        {
            var transactionDetailIDParameter = transactionDetailID.HasValue ?
                new ObjectParameter("transactionDetailID", transactionDetailID) :
                new ObjectParameter("transactionDetailID", typeof(int));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("Deleted", deleted) :
                new ObjectParameter("Deleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_DeleteTransactionImg", transactionDetailIDParameter, deletedParameter, rowCount);
        }
    
        public virtual ObjectResult<Nullable<long>> REPS_GetTransactionDetailByTransactionDetailGUID(Nullable<System.Guid> uniqueReference)
        {
            var uniqueReferenceParameter = uniqueReference.HasValue ?
                new ObjectParameter("uniqueReference", uniqueReference) :
                new ObjectParameter("uniqueReference", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("REPS_GetTransactionDetailByTransactionDetailGUID", uniqueReferenceParameter);
        }
    
        public virtual ObjectResult<REPS_GetUserRoleActions_Result> REPS_GetUserRoleActions(Nullable<int> roleID, Nullable<int> userID, Nullable<int> start, Nullable<int> end)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(int));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("End", end) :
                new ObjectParameter("End", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetUserRoleActions_Result>("REPS_GetUserRoleActions", roleIDParameter, userIDParameter, startParameter, endParameter);
        }
    
        public virtual ObjectResult<REPS_ADM_GetDocumentCategoryList_Result> REPS_ADM_GetDocumentCategoryList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_ADM_GetDocumentCategoryList_Result>("REPS_ADM_GetDocumentCategoryList");
        }
    
        public virtual ObjectResult<Nullable<int>> REPS_GetDealIDByAlertsGUID(string uniqueReference)
        {
            var uniqueReferenceParameter = uniqueReference != null ?
                new ObjectParameter("uniqueReference", uniqueReference) :
                new ObjectParameter("uniqueReference", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("REPS_GetDealIDByAlertsGUID", uniqueReferenceParameter);
        }
    
        public virtual ObjectResult<REPS_GetCurrentWorkflowDetails_Result> REPS_GetCurrentWorkflowDetails(Nullable<int> taskID, Nullable<int> taskWorkflowID)
        {
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("taskID", taskID) :
                new ObjectParameter("taskID", typeof(int));
    
            var taskWorkflowIDParameter = taskWorkflowID.HasValue ?
                new ObjectParameter("taskWorkflowID", taskWorkflowID) :
                new ObjectParameter("taskWorkflowID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetCurrentWorkflowDetails_Result>("REPS_GetCurrentWorkflowDetails", taskIDParameter, taskWorkflowIDParameter);
        }
    
        public virtual int REPS_UpdateUser_ToggleHeaderTab_ByUserID(Nullable<bool> toggleStatus, Nullable<int> userID, ObjectParameter rowCount)
        {
            var toggleStatusParameter = toggleStatus.HasValue ?
                new ObjectParameter("ToggleStatus", toggleStatus) :
                new ObjectParameter("ToggleStatus", typeof(bool));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_UpdateUser_ToggleHeaderTab_ByUserID", toggleStatusParameter, userIDParameter, rowCount);
        }
    
        public virtual ObjectResult<string> REPS_ADM_GetTemplateFilename(Nullable<int> documentTemplateID)
        {
            var documentTemplateIDParameter = documentTemplateID.HasValue ?
                new ObjectParameter("documentTemplateID", documentTemplateID) :
                new ObjectParameter("documentTemplateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("REPS_ADM_GetTemplateFilename", documentTemplateIDParameter);
        }
    
        public virtual int REPS_ADM_AddDocumentTemplate(Nullable<int> docTypeID, string templateName, string versionName, string xmlSPROC, string templateFile, string mimeTypeID, Nullable<int> userID, Nullable<bool> eSignable, Nullable<bool> isStaticDoc, Nullable<bool> isActive, Nullable<bool> isDocfusion, Nullable<System.Guid> templateFixGUID, ObjectParameter identity)
        {
            var docTypeIDParameter = docTypeID.HasValue ?
                new ObjectParameter("docTypeID", docTypeID) :
                new ObjectParameter("docTypeID", typeof(int));
    
            var templateNameParameter = templateName != null ?
                new ObjectParameter("templateName", templateName) :
                new ObjectParameter("templateName", typeof(string));
    
            var versionNameParameter = versionName != null ?
                new ObjectParameter("versionName", versionName) :
                new ObjectParameter("versionName", typeof(string));
    
            var xmlSPROCParameter = xmlSPROC != null ?
                new ObjectParameter("xmlSPROC", xmlSPROC) :
                new ObjectParameter("xmlSPROC", typeof(string));
    
            var templateFileParameter = templateFile != null ?
                new ObjectParameter("templateFile", templateFile) :
                new ObjectParameter("templateFile", typeof(string));
    
            var mimeTypeIDParameter = mimeTypeID != null ?
                new ObjectParameter("mimeTypeID", mimeTypeID) :
                new ObjectParameter("mimeTypeID", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var eSignableParameter = eSignable.HasValue ?
                new ObjectParameter("eSignable", eSignable) :
                new ObjectParameter("eSignable", typeof(bool));
    
            var isStaticDocParameter = isStaticDoc.HasValue ?
                new ObjectParameter("isStaticDoc", isStaticDoc) :
                new ObjectParameter("isStaticDoc", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var isDocfusionParameter = isDocfusion.HasValue ?
                new ObjectParameter("isDocfusion", isDocfusion) :
                new ObjectParameter("isDocfusion", typeof(bool));
    
            var templateFixGUIDParameter = templateFixGUID.HasValue ?
                new ObjectParameter("templateFixGUID", templateFixGUID) :
                new ObjectParameter("templateFixGUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_ADM_AddDocumentTemplate", docTypeIDParameter, templateNameParameter, versionNameParameter, xmlSPROCParameter, templateFileParameter, mimeTypeIDParameter, userIDParameter, eSignableParameter, isStaticDocParameter, isActiveParameter, isDocfusionParameter, templateFixGUIDParameter, identity);
        }
    
        public virtual int REPS_UpdateOrganisation(Nullable<int> organisationID, Nullable<int> organizationTypeID, string name, string registrationNumber, string legalName, string vatID, Nullable<decimal> telephone, Nullable<decimal> faxNumber, string email, Nullable<bool> verified, Nullable<bool> deleted, Nullable<int> entityID, Nullable<int> dealID, Nullable<int> participantRoleID, ObjectParameter rowCount)
        {
            var organisationIDParameter = organisationID.HasValue ?
                new ObjectParameter("OrganisationID", organisationID) :
                new ObjectParameter("OrganisationID", typeof(int));
    
            var organizationTypeIDParameter = organizationTypeID.HasValue ?
                new ObjectParameter("OrganizationTypeID", organizationTypeID) :
                new ObjectParameter("OrganizationTypeID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var registrationNumberParameter = registrationNumber != null ?
                new ObjectParameter("RegistrationNumber", registrationNumber) :
                new ObjectParameter("RegistrationNumber", typeof(string));
    
            var legalNameParameter = legalName != null ?
                new ObjectParameter("LegalName", legalName) :
                new ObjectParameter("LegalName", typeof(string));
    
            var vatIDParameter = vatID != null ?
                new ObjectParameter("VatID", vatID) :
                new ObjectParameter("VatID", typeof(string));
    
            var telephoneParameter = telephone.HasValue ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(decimal));
    
            var faxNumberParameter = faxNumber.HasValue ?
                new ObjectParameter("FaxNumber", faxNumber) :
                new ObjectParameter("FaxNumber", typeof(decimal));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var verifiedParameter = verified.HasValue ?
                new ObjectParameter("Verified", verified) :
                new ObjectParameter("Verified", typeof(bool));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("Deleted", deleted) :
                new ObjectParameter("Deleted", typeof(bool));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("DealID", dealID) :
                new ObjectParameter("DealID", typeof(int));
    
            var participantRoleIDParameter = participantRoleID.HasValue ?
                new ObjectParameter("ParticipantRoleID", participantRoleID) :
                new ObjectParameter("ParticipantRoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_UpdateOrganisation", organisationIDParameter, organizationTypeIDParameter, nameParameter, registrationNumberParameter, legalNameParameter, vatIDParameter, telephoneParameter, faxNumberParameter, emailParameter, verifiedParameter, deletedParameter, entityIDParameter, dealIDParameter, participantRoleIDParameter, rowCount);
        }
    
        public virtual int REPS_UpdatePerson(Nullable<int> organizationID, Nullable<int> titleID, string givenName, string familyName, Nullable<int> identityTypeID, string identityNumber, string passportNumber, Nullable<int> passportCountryID, string taxID, Nullable<System.DateTime> birthDate, string birthPlace, Nullable<decimal> telephone, Nullable<decimal> faxNumber, Nullable<decimal> mobileNumber, string email, Nullable<int> jobTitleID, Nullable<bool> verified, Nullable<int> personID, Nullable<int> participantRoleID, Nullable<int> dealID, ObjectParameter rowCount)
        {
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            var titleIDParameter = titleID.HasValue ?
                new ObjectParameter("TitleID", titleID) :
                new ObjectParameter("TitleID", typeof(int));
    
            var givenNameParameter = givenName != null ?
                new ObjectParameter("GivenName", givenName) :
                new ObjectParameter("GivenName", typeof(string));
    
            var familyNameParameter = familyName != null ?
                new ObjectParameter("FamilyName", familyName) :
                new ObjectParameter("FamilyName", typeof(string));
    
            var identityTypeIDParameter = identityTypeID.HasValue ?
                new ObjectParameter("IdentityTypeID", identityTypeID) :
                new ObjectParameter("IdentityTypeID", typeof(int));
    
            var identityNumberParameter = identityNumber != null ?
                new ObjectParameter("IdentityNumber", identityNumber) :
                new ObjectParameter("IdentityNumber", typeof(string));
    
            var passportNumberParameter = passportNumber != null ?
                new ObjectParameter("PassportNumber", passportNumber) :
                new ObjectParameter("PassportNumber", typeof(string));
    
            var passportCountryIDParameter = passportCountryID.HasValue ?
                new ObjectParameter("PassportCountryID", passportCountryID) :
                new ObjectParameter("PassportCountryID", typeof(int));
    
            var taxIDParameter = taxID != null ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var birthPlaceParameter = birthPlace != null ?
                new ObjectParameter("BirthPlace", birthPlace) :
                new ObjectParameter("BirthPlace", typeof(string));
    
            var telephoneParameter = telephone.HasValue ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(decimal));
    
            var faxNumberParameter = faxNumber.HasValue ?
                new ObjectParameter("FaxNumber", faxNumber) :
                new ObjectParameter("FaxNumber", typeof(decimal));
    
            var mobileNumberParameter = mobileNumber.HasValue ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(decimal));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var jobTitleIDParameter = jobTitleID.HasValue ?
                new ObjectParameter("JobTitleID", jobTitleID) :
                new ObjectParameter("JobTitleID", typeof(int));
    
            var verifiedParameter = verified.HasValue ?
                new ObjectParameter("Verified", verified) :
                new ObjectParameter("Verified", typeof(bool));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var participantRoleIDParameter = participantRoleID.HasValue ?
                new ObjectParameter("ParticipantRoleID", participantRoleID) :
                new ObjectParameter("ParticipantRoleID", typeof(int));
    
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("DealID", dealID) :
                new ObjectParameter("DealID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_UpdatePerson", organizationIDParameter, titleIDParameter, givenNameParameter, familyNameParameter, identityTypeIDParameter, identityNumberParameter, passportNumberParameter, passportCountryIDParameter, taxIDParameter, birthDateParameter, birthPlaceParameter, telephoneParameter, faxNumberParameter, mobileNumberParameter, emailParameter, jobTitleIDParameter, verifiedParameter, personIDParameter, participantRoleIDParameter, dealIDParameter, rowCount);
        }
    
        public virtual ObjectResult<REPS_ReportSumPerFeeTypeGenerated_Result> REPS_ReportSumPerFeeTypeGenerated(Nullable<int> userId, Nullable<int> entityID, Nullable<int> workflowTaskID, Nullable<int> feeTypeID, Nullable<int> valueTypeID, Nullable<int> feeDescID, Nullable<long> sum, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var workflowTaskIDParameter = workflowTaskID.HasValue ?
                new ObjectParameter("WorkflowTaskID", workflowTaskID) :
                new ObjectParameter("WorkflowTaskID", typeof(int));
    
            var feeTypeIDParameter = feeTypeID.HasValue ?
                new ObjectParameter("FeeTypeID", feeTypeID) :
                new ObjectParameter("FeeTypeID", typeof(int));
    
            var valueTypeIDParameter = valueTypeID.HasValue ?
                new ObjectParameter("ValueTypeID", valueTypeID) :
                new ObjectParameter("ValueTypeID", typeof(int));
    
            var feeDescIDParameter = feeDescID.HasValue ?
                new ObjectParameter("FeeDescID", feeDescID) :
                new ObjectParameter("FeeDescID", typeof(int));
    
            var sumParameter = sum.HasValue ?
                new ObjectParameter("sum", sum) :
                new ObjectParameter("sum", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_ReportSumPerFeeTypeGenerated_Result>("REPS_ReportSumPerFeeTypeGenerated", userIdParameter, entityIDParameter, workflowTaskIDParameter, feeTypeIDParameter, valueTypeIDParameter, feeDescIDParameter, sumParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<REPS_ReportSumPerFeeDescriptionChart_Result> REPS_ReportSumPerFeeDescriptionChart(Nullable<int> userId, Nullable<int> entityID, Nullable<int> workflowTaskID, Nullable<int> feeTypeID, Nullable<int> valueTypeID, Nullable<int> feeDescID, Nullable<long> sum, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var workflowTaskIDParameter = workflowTaskID.HasValue ?
                new ObjectParameter("WorkflowTaskID", workflowTaskID) :
                new ObjectParameter("WorkflowTaskID", typeof(int));
    
            var feeTypeIDParameter = feeTypeID.HasValue ?
                new ObjectParameter("FeeTypeID", feeTypeID) :
                new ObjectParameter("FeeTypeID", typeof(int));
    
            var valueTypeIDParameter = valueTypeID.HasValue ?
                new ObjectParameter("ValueTypeID", valueTypeID) :
                new ObjectParameter("ValueTypeID", typeof(int));
    
            var feeDescIDParameter = feeDescID.HasValue ?
                new ObjectParameter("FeeDescID", feeDescID) :
                new ObjectParameter("FeeDescID", typeof(int));
    
            var sumParameter = sum.HasValue ?
                new ObjectParameter("sum", sum) :
                new ObjectParameter("sum", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_ReportSumPerFeeDescriptionChart_Result>("REPS_ReportSumPerFeeDescriptionChart", userIdParameter, entityIDParameter, workflowTaskIDParameter, feeTypeIDParameter, valueTypeIDParameter, feeDescIDParameter, sumParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<REPS_ReportWorkflowDealPerCount_Result> REPS_ReportWorkflowDealPerCount(Nullable<int> userID, Nullable<int> workflowID, Nullable<int> dealProcessTaskID, Nullable<int> entityID, Nullable<int> taskID, Nullable<long> sum, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            var dealProcessTaskIDParameter = dealProcessTaskID.HasValue ?
                new ObjectParameter("DealProcessTaskID", dealProcessTaskID) :
                new ObjectParameter("DealProcessTaskID", typeof(int));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("TaskID", taskID) :
                new ObjectParameter("TaskID", typeof(int));
    
            var sumParameter = sum.HasValue ?
                new ObjectParameter("sum", sum) :
                new ObjectParameter("sum", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_ReportWorkflowDealPerCount_Result>("REPS_ReportWorkflowDealPerCount", userIDParameter, workflowIDParameter, dealProcessTaskIDParameter, entityIDParameter, taskIDParameter, sumParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<string> REPS_DocXML_SearchReportLetter(Nullable<int> dealID)
        {
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("DealID", dealID) :
                new ObjectParameter("DealID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("REPS_DocXML_SearchReportLetter", dealIDParameter);
        }
    
        public virtual ObjectResult<string> REPS_DocXML_MortgageLetter(Nullable<int> dealID)
        {
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("DealID", dealID) :
                new ObjectParameter("DealID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("REPS_DocXML_MortgageLetter", dealIDParameter);
        }
    
        public virtual ObjectResult<string> REPS_DocXML_ClientCareLetter(Nullable<int> dealID)
        {
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("DealID", dealID) :
                new ObjectParameter("DealID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("REPS_DocXML_ClientCareLetter", dealIDParameter);
        }
    
        public virtual ObjectResult<PS_ReportFeePerDealTable_Result> PS_ReportFeePerDealTable(Nullable<int> userId, Nullable<int> entityID, Nullable<int> workflowTaskID, Nullable<int> variableTypeID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var workflowTaskIDParameter = workflowTaskID.HasValue ?
                new ObjectParameter("WorkflowTaskID", workflowTaskID) :
                new ObjectParameter("WorkflowTaskID", typeof(int));
    
            var variableTypeIDParameter = variableTypeID.HasValue ?
                new ObjectParameter("VariableTypeID", variableTypeID) :
                new ObjectParameter("VariableTypeID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PS_ReportFeePerDealTable_Result>("PS_ReportFeePerDealTable", userIdParameter, entityIDParameter, workflowTaskIDParameter, variableTypeIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<REPS_GetDeals_Result> REPS_GetDeals(Nullable<int> userID, Nullable<int> taskID, string clientReference, Nullable<int> workflowID, Nullable<int> dealProcessTaskID, Nullable<int> dealId, string uniqueReference, Nullable<int> dealTypeId, Nullable<int> entityID, Nullable<int> start, Nullable<int> end)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("TaskID", taskID) :
                new ObjectParameter("TaskID", typeof(int));
    
            var clientReferenceParameter = clientReference != null ?
                new ObjectParameter("ClientReference", clientReference) :
                new ObjectParameter("ClientReference", typeof(string));
    
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            var dealProcessTaskIDParameter = dealProcessTaskID.HasValue ?
                new ObjectParameter("DealProcessTaskID", dealProcessTaskID) :
                new ObjectParameter("DealProcessTaskID", typeof(int));
    
            var dealIdParameter = dealId.HasValue ?
                new ObjectParameter("DealId", dealId) :
                new ObjectParameter("DealId", typeof(int));
    
            var uniqueReferenceParameter = uniqueReference != null ?
                new ObjectParameter("UniqueReference", uniqueReference) :
                new ObjectParameter("UniqueReference", typeof(string));
    
            var dealTypeIdParameter = dealTypeId.HasValue ?
                new ObjectParameter("DealTypeId", dealTypeId) :
                new ObjectParameter("DealTypeId", typeof(int));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(int));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("End", end) :
                new ObjectParameter("End", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetDeals_Result>("REPS_GetDeals", userIDParameter, taskIDParameter, clientReferenceParameter, workflowIDParameter, dealProcessTaskIDParameter, dealIdParameter, uniqueReferenceParameter, dealTypeIdParameter, entityIDParameter, startParameter, endParameter);
        }
    
        public virtual ObjectResult<REPS_GetWorkflowGUIDTaskGUID_Result> REPS_GetWorkflowGUIDTaskGUID(string taskGUID)
        {
            var taskGUIDParameter = taskGUID != null ?
                new ObjectParameter("taskGUID", taskGUID) :
                new ObjectParameter("taskGUID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetWorkflowGUIDTaskGUID_Result>("REPS_GetWorkflowGUIDTaskGUID", taskGUIDParameter);
        }
    
        public virtual int REPS_UpdateUser(Nullable<int> entityID, Nullable<int> titleID, string givenName, string familyName, string identityNumber, string passportNumber, Nullable<int> passportCountryID, string taxID, Nullable<System.DateTime> birthDate, string birthPlace, Nullable<decimal> telephone, Nullable<decimal> mobileNumber, string email, Nullable<decimal> faxNumber, Nullable<int> jobTitleID, Nullable<bool> verified, Nullable<int> userId, Nullable<int> roleID, Nullable<int> workflowID, string tokenId, ObjectParameter rowCount)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var titleIDParameter = titleID.HasValue ?
                new ObjectParameter("TitleID", titleID) :
                new ObjectParameter("TitleID", typeof(int));
    
            var givenNameParameter = givenName != null ?
                new ObjectParameter("GivenName", givenName) :
                new ObjectParameter("GivenName", typeof(string));
    
            var familyNameParameter = familyName != null ?
                new ObjectParameter("FamilyName", familyName) :
                new ObjectParameter("FamilyName", typeof(string));
    
            var identityNumberParameter = identityNumber != null ?
                new ObjectParameter("IdentityNumber", identityNumber) :
                new ObjectParameter("IdentityNumber", typeof(string));
    
            var passportNumberParameter = passportNumber != null ?
                new ObjectParameter("PassportNumber", passportNumber) :
                new ObjectParameter("PassportNumber", typeof(string));
    
            var passportCountryIDParameter = passportCountryID.HasValue ?
                new ObjectParameter("PassportCountryID", passportCountryID) :
                new ObjectParameter("PassportCountryID", typeof(int));
    
            var taxIDParameter = taxID != null ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var birthPlaceParameter = birthPlace != null ?
                new ObjectParameter("BirthPlace", birthPlace) :
                new ObjectParameter("BirthPlace", typeof(string));
    
            var telephoneParameter = telephone.HasValue ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(decimal));
    
            var mobileNumberParameter = mobileNumber.HasValue ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(decimal));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var faxNumberParameter = faxNumber.HasValue ?
                new ObjectParameter("FaxNumber", faxNumber) :
                new ObjectParameter("FaxNumber", typeof(decimal));
    
            var jobTitleIDParameter = jobTitleID.HasValue ?
                new ObjectParameter("JobTitleID", jobTitleID) :
                new ObjectParameter("JobTitleID", typeof(int));
    
            var verifiedParameter = verified.HasValue ?
                new ObjectParameter("Verified", verified) :
                new ObjectParameter("Verified", typeof(bool));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            var tokenIdParameter = tokenId != null ?
                new ObjectParameter("TokenId", tokenId) :
                new ObjectParameter("TokenId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_UpdateUser", entityIDParameter, titleIDParameter, givenNameParameter, familyNameParameter, identityNumberParameter, passportNumberParameter, passportCountryIDParameter, taxIDParameter, birthDateParameter, birthPlaceParameter, telephoneParameter, mobileNumberParameter, emailParameter, faxNumberParameter, jobTitleIDParameter, verifiedParameter, userIdParameter, roleIDParameter, workflowIDParameter, tokenIdParameter, rowCount);
        }
    
        public virtual ObjectResult<REPS_ReportSumPerFeeDescriptionTable_Result> REPS_ReportSumPerFeeDescriptionTable(Nullable<int> userId, Nullable<int> entityID, Nullable<int> workflowTaskID, Nullable<int> feeTypeID, Nullable<int> valueTypeID, Nullable<int> feeDescID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var workflowTaskIDParameter = workflowTaskID.HasValue ?
                new ObjectParameter("WorkflowTaskID", workflowTaskID) :
                new ObjectParameter("WorkflowTaskID", typeof(int));
    
            var feeTypeIDParameter = feeTypeID.HasValue ?
                new ObjectParameter("FeeTypeID", feeTypeID) :
                new ObjectParameter("FeeTypeID", typeof(int));
    
            var valueTypeIDParameter = valueTypeID.HasValue ?
                new ObjectParameter("ValueTypeID", valueTypeID) :
                new ObjectParameter("ValueTypeID", typeof(int));
    
            var feeDescIDParameter = feeDescID.HasValue ?
                new ObjectParameter("FeeDescID", feeDescID) :
                new ObjectParameter("FeeDescID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_ReportSumPerFeeDescriptionTable_Result>("REPS_ReportSumPerFeeDescriptionTable", userIdParameter, entityIDParameter, workflowTaskIDParameter, feeTypeIDParameter, valueTypeIDParameter, feeDescIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<REPS_ReportWorkflowDealPerCountTable_Result> REPS_ReportWorkflowDealPerCountTable(Nullable<int> userId, Nullable<int> workflowID, Nullable<int> dealProcessTaskID, Nullable<int> statusID, Nullable<int> entityID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            var dealProcessTaskIDParameter = dealProcessTaskID.HasValue ?
                new ObjectParameter("DealProcessTaskID", dealProcessTaskID) :
                new ObjectParameter("DealProcessTaskID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_ReportWorkflowDealPerCountTable_Result>("REPS_ReportWorkflowDealPerCountTable", userIdParameter, workflowIDParameter, dealProcessTaskIDParameter, statusIDParameter, entityIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<REPS_ADM_GetWorkflowsList_Result> REPS_ADM_GetWorkflowsList(Nullable<int> workflowID)
        {
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("workflowID", workflowID) :
                new ObjectParameter("workflowID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_ADM_GetWorkflowsList_Result>("REPS_ADM_GetWorkflowsList", workflowIDParameter);
        }
    
        public virtual ObjectResult<REPS_ADM_GetDocumentTemplateList_Result> REPS_ADM_GetDocumentTemplateList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_ADM_GetDocumentTemplateList_Result>("REPS_ADM_GetDocumentTemplateList");
        }
    
        public virtual ObjectResult<REPS_ADM_GetEditDocumentTemplateFields_Result> REPS_ADM_GetEditDocumentTemplateFields(Nullable<int> documentTemplateID)
        {
            var documentTemplateIDParameter = documentTemplateID.HasValue ?
                new ObjectParameter("documentTemplateID", documentTemplateID) :
                new ObjectParameter("documentTemplateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_ADM_GetEditDocumentTemplateFields_Result>("REPS_ADM_GetEditDocumentTemplateFields", documentTemplateIDParameter);
        }
    
        public virtual int REPS_ADM_UpdateDocumentVersionDocumentTemplate(Nullable<int> templateID, Nullable<int> templateVersionID, string templateName, string versionName, string xmlSPROC, string templateFile, string mimeTypeID, Nullable<int> userID, Nullable<bool> eSignable, Nullable<bool> isStaticDoc, Nullable<bool> isActive, Nullable<bool> isDocfusion, Nullable<System.Guid> templateFixGUID, ObjectParameter rowCount)
        {
            var templateIDParameter = templateID.HasValue ?
                new ObjectParameter("templateID", templateID) :
                new ObjectParameter("templateID", typeof(int));
    
            var templateVersionIDParameter = templateVersionID.HasValue ?
                new ObjectParameter("templateVersionID", templateVersionID) :
                new ObjectParameter("templateVersionID", typeof(int));
    
            var templateNameParameter = templateName != null ?
                new ObjectParameter("templateName", templateName) :
                new ObjectParameter("templateName", typeof(string));
    
            var versionNameParameter = versionName != null ?
                new ObjectParameter("versionName", versionName) :
                new ObjectParameter("versionName", typeof(string));
    
            var xmlSPROCParameter = xmlSPROC != null ?
                new ObjectParameter("xmlSPROC", xmlSPROC) :
                new ObjectParameter("xmlSPROC", typeof(string));
    
            var templateFileParameter = templateFile != null ?
                new ObjectParameter("templateFile", templateFile) :
                new ObjectParameter("templateFile", typeof(string));
    
            var mimeTypeIDParameter = mimeTypeID != null ?
                new ObjectParameter("mimeTypeID", mimeTypeID) :
                new ObjectParameter("mimeTypeID", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var eSignableParameter = eSignable.HasValue ?
                new ObjectParameter("eSignable", eSignable) :
                new ObjectParameter("eSignable", typeof(bool));
    
            var isStaticDocParameter = isStaticDoc.HasValue ?
                new ObjectParameter("isStaticDoc", isStaticDoc) :
                new ObjectParameter("isStaticDoc", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var isDocfusionParameter = isDocfusion.HasValue ?
                new ObjectParameter("isDocfusion", isDocfusion) :
                new ObjectParameter("isDocfusion", typeof(bool));
    
            var templateFixGUIDParameter = templateFixGUID.HasValue ?
                new ObjectParameter("templateFixGUID", templateFixGUID) :
                new ObjectParameter("templateFixGUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_ADM_UpdateDocumentVersionDocumentTemplate", templateIDParameter, templateVersionIDParameter, templateNameParameter, versionNameParameter, xmlSPROCParameter, templateFileParameter, mimeTypeIDParameter, userIDParameter, eSignableParameter, isStaticDocParameter, isActiveParameter, isDocfusionParameter, templateFixGUIDParameter, rowCount);
        }
    
        public virtual int REPS_ADM_AddWorkflowStepToDocumentTemplate(Nullable<int> documentTemplateVersionID, Nullable<int> workflowStepID, Nullable<int> createdByUserID, ObjectParameter rowCount)
        {
            var documentTemplateVersionIDParameter = documentTemplateVersionID.HasValue ?
                new ObjectParameter("documentTemplateVersionID", documentTemplateVersionID) :
                new ObjectParameter("documentTemplateVersionID", typeof(int));
    
            var workflowStepIDParameter = workflowStepID.HasValue ?
                new ObjectParameter("workflowStepID", workflowStepID) :
                new ObjectParameter("workflowStepID", typeof(int));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("createdByUserID", createdByUserID) :
                new ObjectParameter("createdByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_ADM_AddWorkflowStepToDocumentTemplate", documentTemplateVersionIDParameter, workflowStepIDParameter, createdByUserIDParameter, rowCount);
        }
    
        public virtual int REPS_ADM_DeleteDocumentWorkflow(Nullable<int> documentVersionID, Nullable<int> documentWorkflowID, Nullable<bool> deleted, ObjectParameter rowCount)
        {
            var documentVersionIDParameter = documentVersionID.HasValue ?
                new ObjectParameter("DocumentVersionID", documentVersionID) :
                new ObjectParameter("DocumentVersionID", typeof(int));
    
            var documentWorkflowIDParameter = documentWorkflowID.HasValue ?
                new ObjectParameter("DocumentWorkflowID", documentWorkflowID) :
                new ObjectParameter("DocumentWorkflowID", typeof(int));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("Deleted", deleted) :
                new ObjectParameter("Deleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_ADM_DeleteDocumentWorkflow", documentVersionIDParameter, documentWorkflowIDParameter, deletedParameter, rowCount);
        }
    
        public virtual ObjectResult<REPS_ADM_GetDocumentWorkflowTaskList_Result> REPS_ADM_GetDocumentWorkflowTaskList(Nullable<int> documentTemplateID)
        {
            var documentTemplateIDParameter = documentTemplateID.HasValue ?
                new ObjectParameter("documentTemplateID", documentTemplateID) :
                new ObjectParameter("documentTemplateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_ADM_GetDocumentWorkflowTaskList_Result>("REPS_ADM_GetDocumentWorkflowTaskList", documentTemplateIDParameter);
        }
    
        public virtual int REPS_ADM_RemoveDocumentTemplate(Nullable<int> documentTemplateID, ObjectParameter rowCount)
        {
            var documentTemplateIDParameter = documentTemplateID.HasValue ?
                new ObjectParameter("documentTemplateID", documentTemplateID) :
                new ObjectParameter("documentTemplateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_ADM_RemoveDocumentTemplate", documentTemplateIDParameter, rowCount);
        }
    
        public virtual int REPS_ADM_SaveDocumentTemplate(Nullable<int> templateID, string templateName, string versionName, string xmlSPROC, string templateFile, string mimeTypeID, Nullable<int> userID, Nullable<bool> eSignable, Nullable<bool> isStaticDoc, Nullable<bool> isActive, Nullable<bool> isDocfusion, ObjectParameter identity)
        {
            var templateIDParameter = templateID.HasValue ?
                new ObjectParameter("templateID", templateID) :
                new ObjectParameter("templateID", typeof(int));
    
            var templateNameParameter = templateName != null ?
                new ObjectParameter("templateName", templateName) :
                new ObjectParameter("templateName", typeof(string));
    
            var versionNameParameter = versionName != null ?
                new ObjectParameter("versionName", versionName) :
                new ObjectParameter("versionName", typeof(string));
    
            var xmlSPROCParameter = xmlSPROC != null ?
                new ObjectParameter("xmlSPROC", xmlSPROC) :
                new ObjectParameter("xmlSPROC", typeof(string));
    
            var templateFileParameter = templateFile != null ?
                new ObjectParameter("templateFile", templateFile) :
                new ObjectParameter("templateFile", typeof(string));
    
            var mimeTypeIDParameter = mimeTypeID != null ?
                new ObjectParameter("mimeTypeID", mimeTypeID) :
                new ObjectParameter("mimeTypeID", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var eSignableParameter = eSignable.HasValue ?
                new ObjectParameter("eSignable", eSignable) :
                new ObjectParameter("eSignable", typeof(bool));
    
            var isStaticDocParameter = isStaticDoc.HasValue ?
                new ObjectParameter("isStaticDoc", isStaticDoc) :
                new ObjectParameter("isStaticDoc", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var isDocfusionParameter = isDocfusion.HasValue ?
                new ObjectParameter("isDocfusion", isDocfusion) :
                new ObjectParameter("isDocfusion", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_ADM_SaveDocumentTemplate", templateIDParameter, templateNameParameter, versionNameParameter, xmlSPROCParameter, templateFileParameter, mimeTypeIDParameter, userIDParameter, eSignableParameter, isStaticDocParameter, isActiveParameter, isDocfusionParameter, identity);
        }
    
        public virtual int REPS_ADM_UpdateDocumentWorkflow(Nullable<int> newDocumentVerisonID, Nullable<int> oldDocumentVerisonID, ObjectParameter rowCount)
        {
            var newDocumentVerisonIDParameter = newDocumentVerisonID.HasValue ?
                new ObjectParameter("NewDocumentVerisonID", newDocumentVerisonID) :
                new ObjectParameter("NewDocumentVerisonID", typeof(int));
    
            var oldDocumentVerisonIDParameter = oldDocumentVerisonID.HasValue ?
                new ObjectParameter("OldDocumentVerisonID", oldDocumentVerisonID) :
                new ObjectParameter("OldDocumentVerisonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_ADM_UpdateDocumentWorkflow", newDocumentVerisonIDParameter, oldDocumentVerisonIDParameter, rowCount);
        }
    
        public virtual ObjectResult<REPS_GetDocumentTemplateListByWorkflow_Result> REPS_GetDocumentTemplateListByWorkflow(Nullable<int> workflowID, Nullable<int> dealID)
        {
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("workflowID", workflowID) :
                new ObjectParameter("workflowID", typeof(int));
    
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("dealID", dealID) :
                new ObjectParameter("dealID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetDocumentTemplateListByWorkflow_Result>("REPS_GetDocumentTemplateListByWorkflow", workflowIDParameter, dealIDParameter);
        }
    
        public virtual ObjectResult<REPS_GetDocumentType_Result> REPS_GetDocumentType(Nullable<int> workflowID)
        {
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("workflowID", workflowID) :
                new ObjectParameter("workflowID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetDocumentType_Result>("REPS_GetDocumentType", workflowIDParameter);
        }
    
        public virtual ObjectResult<REPS_GetDocumentTypeListByWorkflow_Result> REPS_GetDocumentTypeListByWorkflow(Nullable<int> workflowID)
        {
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("workflowID", workflowID) :
                new ObjectParameter("workflowID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetDocumentTypeListByWorkflow_Result>("REPS_GetDocumentTypeListByWorkflow", workflowIDParameter);
        }
    
        public virtual int REPS_ADM_UpdateDocumentTemplate(Nullable<int> templateVersionID, ObjectParameter rowCount)
        {
            var templateVersionIDParameter = templateVersionID.HasValue ?
                new ObjectParameter("templateVersionID", templateVersionID) :
                new ObjectParameter("templateVersionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_ADM_UpdateDocumentTemplate", templateVersionIDParameter, rowCount);
        }
    
        public virtual ObjectResult<REPS_GetDealLastActionBy_Result> REPS_GetDealLastActionBy(Nullable<int> dealID)
        {
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("DealID", dealID) :
                new ObjectParameter("DealID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetDealLastActionBy_Result>("REPS_GetDealLastActionBy", dealIDParameter);
        }
    
        public virtual int sp_generate_merge(string table_name, string target_table, string from, Nullable<bool> include_timestamp, Nullable<bool> debug_mode, string schema, Nullable<bool> ommit_images, Nullable<bool> ommit_identity, Nullable<int> top, string cols_to_include, string cols_to_exclude, Nullable<bool> update_only_if_changed, Nullable<bool> disable_constraints, Nullable<bool> ommit_computed_cols, Nullable<bool> include_use_db, Nullable<bool> results_to_text, Nullable<bool> include_rowsaffected, Nullable<bool> nologo)
        {
            var table_nameParameter = table_name != null ?
                new ObjectParameter("table_name", table_name) :
                new ObjectParameter("table_name", typeof(string));
    
            var target_tableParameter = target_table != null ?
                new ObjectParameter("target_table", target_table) :
                new ObjectParameter("target_table", typeof(string));
    
            var fromParameter = from != null ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(string));
    
            var include_timestampParameter = include_timestamp.HasValue ?
                new ObjectParameter("include_timestamp", include_timestamp) :
                new ObjectParameter("include_timestamp", typeof(bool));
    
            var debug_modeParameter = debug_mode.HasValue ?
                new ObjectParameter("debug_mode", debug_mode) :
                new ObjectParameter("debug_mode", typeof(bool));
    
            var schemaParameter = schema != null ?
                new ObjectParameter("schema", schema) :
                new ObjectParameter("schema", typeof(string));
    
            var ommit_imagesParameter = ommit_images.HasValue ?
                new ObjectParameter("ommit_images", ommit_images) :
                new ObjectParameter("ommit_images", typeof(bool));
    
            var ommit_identityParameter = ommit_identity.HasValue ?
                new ObjectParameter("ommit_identity", ommit_identity) :
                new ObjectParameter("ommit_identity", typeof(bool));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var cols_to_includeParameter = cols_to_include != null ?
                new ObjectParameter("cols_to_include", cols_to_include) :
                new ObjectParameter("cols_to_include", typeof(string));
    
            var cols_to_excludeParameter = cols_to_exclude != null ?
                new ObjectParameter("cols_to_exclude", cols_to_exclude) :
                new ObjectParameter("cols_to_exclude", typeof(string));
    
            var update_only_if_changedParameter = update_only_if_changed.HasValue ?
                new ObjectParameter("update_only_if_changed", update_only_if_changed) :
                new ObjectParameter("update_only_if_changed", typeof(bool));
    
            var disable_constraintsParameter = disable_constraints.HasValue ?
                new ObjectParameter("disable_constraints", disable_constraints) :
                new ObjectParameter("disable_constraints", typeof(bool));
    
            var ommit_computed_colsParameter = ommit_computed_cols.HasValue ?
                new ObjectParameter("ommit_computed_cols", ommit_computed_cols) :
                new ObjectParameter("ommit_computed_cols", typeof(bool));
    
            var include_use_dbParameter = include_use_db.HasValue ?
                new ObjectParameter("include_use_db", include_use_db) :
                new ObjectParameter("include_use_db", typeof(bool));
    
            var results_to_textParameter = results_to_text.HasValue ?
                new ObjectParameter("results_to_text", results_to_text) :
                new ObjectParameter("results_to_text", typeof(bool));
    
            var include_rowsaffectedParameter = include_rowsaffected.HasValue ?
                new ObjectParameter("include_rowsaffected", include_rowsaffected) :
                new ObjectParameter("include_rowsaffected", typeof(bool));
    
            var nologoParameter = nologo.HasValue ?
                new ObjectParameter("nologo", nologo) :
                new ObjectParameter("nologo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_generate_merge", table_nameParameter, target_tableParameter, fromParameter, include_timestampParameter, debug_modeParameter, schemaParameter, ommit_imagesParameter, ommit_identityParameter, topParameter, cols_to_includeParameter, cols_to_excludeParameter, update_only_if_changedParameter, disable_constraintsParameter, ommit_computed_colsParameter, include_use_dbParameter, results_to_textParameter, include_rowsaffectedParameter, nologoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> REPS_GetExistingUser(string aspNetUserId, Nullable<int> entityID)
        {
            var aspNetUserIdParameter = aspNetUserId != null ?
                new ObjectParameter("aspNetUserId", aspNetUserId) :
                new ObjectParameter("aspNetUserId", typeof(string));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("REPS_GetExistingUser", aspNetUserIdParameter, entityIDParameter);
        }
    
        public virtual int REPS_DeleteUserFromDeletedEntity(Nullable<int> entityID, Nullable<int> entityNull, ObjectParameter rowCount)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("entityID", entityID) :
                new ObjectParameter("entityID", typeof(int));
    
            var entityNullParameter = entityNull.HasValue ?
                new ObjectParameter("entityNull", entityNull) :
                new ObjectParameter("entityNull", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_DeleteUserFromDeletedEntity", entityIDParameter, entityNullParameter, rowCount);
        }
    
        public virtual ObjectResult<REPS_GetUsers_Result> REPS_GetUsers(string givenName, string familyName, string identityNumber, Nullable<int> userID, Nullable<int> entityID, Nullable<int> emptyEntityId, Nullable<int> start, Nullable<int> end)
        {
            var givenNameParameter = givenName != null ?
                new ObjectParameter("GivenName", givenName) :
                new ObjectParameter("GivenName", typeof(string));
    
            var familyNameParameter = familyName != null ?
                new ObjectParameter("FamilyName", familyName) :
                new ObjectParameter("FamilyName", typeof(string));
    
            var identityNumberParameter = identityNumber != null ?
                new ObjectParameter("IdentityNumber", identityNumber) :
                new ObjectParameter("IdentityNumber", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var emptyEntityIdParameter = emptyEntityId.HasValue ?
                new ObjectParameter("emptyEntityId", emptyEntityId) :
                new ObjectParameter("emptyEntityId", typeof(int));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(int));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("End", end) :
                new ObjectParameter("End", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetUsers_Result>("REPS_GetUsers", givenNameParameter, familyNameParameter, identityNumberParameter, userIDParameter, entityIDParameter, emptyEntityIdParameter, startParameter, endParameter);
        }
    
        public virtual ObjectResult<REPS_GetEntities_Result> REPS_GetEntities(string name, string legalName, string registrationNumber, Nullable<int> entityId, Nullable<int> emptyEntityId)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var legalNameParameter = legalName != null ?
                new ObjectParameter("LegalName", legalName) :
                new ObjectParameter("LegalName", typeof(string));
    
            var registrationNumberParameter = registrationNumber != null ?
                new ObjectParameter("RegistrationNumber", registrationNumber) :
                new ObjectParameter("RegistrationNumber", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(int));
    
            var emptyEntityIdParameter = emptyEntityId.HasValue ?
                new ObjectParameter("emptyEntityId", emptyEntityId) :
                new ObjectParameter("emptyEntityId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetEntities_Result>("REPS_GetEntities", nameParameter, legalNameParameter, registrationNumberParameter, entityIdParameter, emptyEntityIdParameter);
        }
    
        public virtual ObjectResult<REPS_GetCorrespondence_ByUserID_Result> REPS_GetCorrespondence_ByUserID(Nullable<int> userID, Nullable<int> dealID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("DealID", dealID) :
                new ObjectParameter("DealID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetCorrespondence_ByUserID_Result>("REPS_GetCorrespondence_ByUserID", userIDParameter, dealIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> REPS_GETCorrespondenceIDByCorrespondenceGUID(string uniqueReference)
        {
            var uniqueReferenceParameter = uniqueReference != null ?
                new ObjectParameter("uniqueReference", uniqueReference) :
                new ObjectParameter("uniqueReference", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("REPS_GETCorrespondenceIDByCorrespondenceGUID", uniqueReferenceParameter);
        }
    
        public virtual ObjectResult<REPS_AutoSearchParticipant_Result> REPS_AutoSearchParticipant(Nullable<int> userId, string searchResult, Nullable<int> entityID, Nullable<int> start, Nullable<int> end)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var searchResultParameter = searchResult != null ?
                new ObjectParameter("SearchResult", searchResult) :
                new ObjectParameter("SearchResult", typeof(string));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(int));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("End", end) :
                new ObjectParameter("End", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_AutoSearchParticipant_Result>("REPS_AutoSearchParticipant", userIdParameter, searchResultParameter, entityIDParameter, startParameter, endParameter);
        }
    
        public virtual int REPS_AddParticipant(Nullable<int> dealID, Nullable<int> participantTypeID, Nullable<int> participantRoleID, Nullable<int> personID, Nullable<int> organizationID, Nullable<int> bankID, Nullable<System.DateTime> dateCreated, Nullable<bool> deleted, Nullable<int> entityID, ObjectParameter identity)
        {
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("DealID", dealID) :
                new ObjectParameter("DealID", typeof(int));
    
            var participantTypeIDParameter = participantTypeID.HasValue ?
                new ObjectParameter("ParticipantTypeID", participantTypeID) :
                new ObjectParameter("ParticipantTypeID", typeof(int));
    
            var participantRoleIDParameter = participantRoleID.HasValue ?
                new ObjectParameter("ParticipantRoleID", participantRoleID) :
                new ObjectParameter("ParticipantRoleID", typeof(int));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var dateCreatedParameter = dateCreated.HasValue ?
                new ObjectParameter("DateCreated", dateCreated) :
                new ObjectParameter("DateCreated", typeof(System.DateTime));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("Deleted", deleted) :
                new ObjectParameter("Deleted", typeof(bool));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_AddParticipant", dealIDParameter, participantTypeIDParameter, participantRoleIDParameter, personIDParameter, organizationIDParameter, bankIDParameter, dateCreatedParameter, deletedParameter, entityIDParameter, identity);
        }
    
        public virtual ObjectResult<REPS_ReportFeePerDealChart_Result> REPS_ReportFeePerDealChart(Nullable<int> userId, Nullable<int> entityID, Nullable<int> workflowTaskID, Nullable<int> dealProcessTaskID, Nullable<int> variableTypeID, Nullable<long> sum, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var workflowTaskIDParameter = workflowTaskID.HasValue ?
                new ObjectParameter("WorkflowTaskID", workflowTaskID) :
                new ObjectParameter("WorkflowTaskID", typeof(int));
    
            var dealProcessTaskIDParameter = dealProcessTaskID.HasValue ?
                new ObjectParameter("DealProcessTaskID", dealProcessTaskID) :
                new ObjectParameter("DealProcessTaskID", typeof(int));
    
            var variableTypeIDParameter = variableTypeID.HasValue ?
                new ObjectParameter("VariableTypeID", variableTypeID) :
                new ObjectParameter("VariableTypeID", typeof(int));
    
            var sumParameter = sum.HasValue ?
                new ObjectParameter("sum", sum) :
                new ObjectParameter("sum", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_ReportFeePerDealChart_Result>("REPS_ReportFeePerDealChart", userIdParameter, entityIDParameter, workflowTaskIDParameter, dealProcessTaskIDParameter, variableTypeIDParameter, sumParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<REPS_GetTemplatePerWorkflowStep_Result> REPS_GetTemplatePerWorkflowStep(Nullable<int> documentTemplateID, Nullable<int> workflowStepID)
        {
            var documentTemplateIDParameter = documentTemplateID.HasValue ?
                new ObjectParameter("documentTemplateID", documentTemplateID) :
                new ObjectParameter("documentTemplateID", typeof(int));
    
            var workflowStepIDParameter = workflowStepID.HasValue ?
                new ObjectParameter("workflowStepID", workflowStepID) :
                new ObjectParameter("workflowStepID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetTemplatePerWorkflowStep_Result>("REPS_GetTemplatePerWorkflowStep", documentTemplateIDParameter, workflowStepIDParameter);
        }
    
        public virtual int REPS_ADM_SwitchUserWorkflowID(Nullable<int> oldWorkflowID, Nullable<int> newWorkflowID, ObjectParameter rowCount)
        {
            var oldWorkflowIDParameter = oldWorkflowID.HasValue ?
                new ObjectParameter("oldWorkflowID", oldWorkflowID) :
                new ObjectParameter("oldWorkflowID", typeof(int));
    
            var newWorkflowIDParameter = newWorkflowID.HasValue ?
                new ObjectParameter("newWorkflowID", newWorkflowID) :
                new ObjectParameter("newWorkflowID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_ADM_SwitchUserWorkflowID", oldWorkflowIDParameter, newWorkflowIDParameter, rowCount);
        }
    
        public virtual ObjectResult<REPS_ReportFeePerDealTable_Result> REPS_ReportFeePerDealTable(Nullable<int> userId, Nullable<int> entityID, Nullable<int> workflowTaskID, Nullable<int> dealProcessTaskID, Nullable<int> variableTypeID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var workflowTaskIDParameter = workflowTaskID.HasValue ?
                new ObjectParameter("WorkflowTaskID", workflowTaskID) :
                new ObjectParameter("WorkflowTaskID", typeof(int));
    
            var dealProcessTaskIDParameter = dealProcessTaskID.HasValue ?
                new ObjectParameter("DealProcessTaskID", dealProcessTaskID) :
                new ObjectParameter("DealProcessTaskID", typeof(int));
    
            var variableTypeIDParameter = variableTypeID.HasValue ?
                new ObjectParameter("VariableTypeID", variableTypeID) :
                new ObjectParameter("VariableTypeID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_ReportFeePerDealTable_Result>("REPS_ReportFeePerDealTable", userIdParameter, entityIDParameter, workflowTaskIDParameter, dealProcessTaskIDParameter, variableTypeIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int REPS_ADM_UpdateLogoutUserOnRoleChange(Nullable<int> roleID, ObjectParameter rowCount)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_ADM_UpdateLogoutUserOnRoleChange", roleIDParameter, rowCount);
        }
    
        public virtual ObjectResult<REPS_ReportMonthlyPaymentChart_Result> REPS_ReportMonthlyPaymentChart(Nullable<int> userId, string year, Nullable<int> entityID, Nullable<int> dealProcessTaskID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var dealProcessTaskIDParameter = dealProcessTaskID.HasValue ?
                new ObjectParameter("DealProcessTaskID", dealProcessTaskID) :
                new ObjectParameter("DealProcessTaskID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_ReportMonthlyPaymentChart_Result>("REPS_ReportMonthlyPaymentChart", userIdParameter, yearParameter, entityIDParameter, dealProcessTaskIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<REPS_ReportMonthlyPaymentTable_Result> REPS_ReportMonthlyPaymentTable(Nullable<int> userId, string year, Nullable<int> entityID, Nullable<int> dealProcessTaskID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var dealProcessTaskIDParameter = dealProcessTaskID.HasValue ?
                new ObjectParameter("DealProcessTaskID", dealProcessTaskID) :
                new ObjectParameter("DealProcessTaskID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_ReportMonthlyPaymentTable_Result>("REPS_ReportMonthlyPaymentTable", userIdParameter, yearParameter, entityIDParameter, dealProcessTaskIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<REPS_GetCurrentWorkflowStep_ByDealIDTransactionTypeID_Result> REPS_GetCurrentWorkflowStep_ByDealIDTransactionTypeID(Nullable<int> dealID, Nullable<int> workflowID, Nullable<int> userID, Nullable<int> entityID, Nullable<int> startDate, Nullable<int> endDate)
        {
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("DealID", dealID) :
                new ObjectParameter("DealID", typeof(int));
    
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("WorkflowID", workflowID) :
                new ObjectParameter("WorkflowID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(int));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetCurrentWorkflowStep_ByDealIDTransactionTypeID_Result>("REPS_GetCurrentWorkflowStep_ByDealIDTransactionTypeID", dealIDParameter, workflowIDParameter, userIDParameter, entityIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int REPS_AddUploadedStandardDocument(string filename, string mimeType, Nullable<int> documentTemplateID, Nullable<int> dealID, Nullable<int> userID, Nullable<int> transactionTypeID, Nullable<int> transactionStatusID, Nullable<int> workflowStepId, Nullable<int> workflowTaskID, ObjectParameter rowCount)
        {
            var filenameParameter = filename != null ?
                new ObjectParameter("filename", filename) :
                new ObjectParameter("filename", typeof(string));
    
            var mimeTypeParameter = mimeType != null ?
                new ObjectParameter("mimeType", mimeType) :
                new ObjectParameter("mimeType", typeof(string));
    
            var documentTemplateIDParameter = documentTemplateID.HasValue ?
                new ObjectParameter("documentTemplateID", documentTemplateID) :
                new ObjectParameter("documentTemplateID", typeof(int));
    
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("dealID", dealID) :
                new ObjectParameter("dealID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var transactionTypeIDParameter = transactionTypeID.HasValue ?
                new ObjectParameter("transactionTypeID", transactionTypeID) :
                new ObjectParameter("transactionTypeID", typeof(int));
    
            var transactionStatusIDParameter = transactionStatusID.HasValue ?
                new ObjectParameter("transactionStatusID", transactionStatusID) :
                new ObjectParameter("transactionStatusID", typeof(int));
    
            var workflowStepIdParameter = workflowStepId.HasValue ?
                new ObjectParameter("workflowStepId", workflowStepId) :
                new ObjectParameter("workflowStepId", typeof(int));
    
            var workflowTaskIDParameter = workflowTaskID.HasValue ?
                new ObjectParameter("WorkflowTaskID", workflowTaskID) :
                new ObjectParameter("WorkflowTaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_AddUploadedStandardDocument", filenameParameter, mimeTypeParameter, documentTemplateIDParameter, dealIDParameter, userIDParameter, transactionTypeIDParameter, transactionStatusIDParameter, workflowStepIdParameter, workflowTaskIDParameter, rowCount);
        }
    
        public virtual int REPS_AddUploadedSignedDocument(string filename, string mimeType, Nullable<int> documentTemplateID, Nullable<int> dealID, Nullable<int> userID, Nullable<int> transactionTypeID, Nullable<int> transactionStatusID, Nullable<int> workflowStepId, Nullable<int> workflowTaskID, ObjectParameter rowCount)
        {
            var filenameParameter = filename != null ?
                new ObjectParameter("filename", filename) :
                new ObjectParameter("filename", typeof(string));
    
            var mimeTypeParameter = mimeType != null ?
                new ObjectParameter("mimeType", mimeType) :
                new ObjectParameter("mimeType", typeof(string));
    
            var documentTemplateIDParameter = documentTemplateID.HasValue ?
                new ObjectParameter("documentTemplateID", documentTemplateID) :
                new ObjectParameter("documentTemplateID", typeof(int));
    
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("dealID", dealID) :
                new ObjectParameter("dealID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var transactionTypeIDParameter = transactionTypeID.HasValue ?
                new ObjectParameter("transactionTypeID", transactionTypeID) :
                new ObjectParameter("transactionTypeID", typeof(int));
    
            var transactionStatusIDParameter = transactionStatusID.HasValue ?
                new ObjectParameter("transactionStatusID", transactionStatusID) :
                new ObjectParameter("transactionStatusID", typeof(int));
    
            var workflowStepIdParameter = workflowStepId.HasValue ?
                new ObjectParameter("workflowStepId", workflowStepId) :
                new ObjectParameter("workflowStepId", typeof(int));
    
            var workflowTaskIDParameter = workflowTaskID.HasValue ?
                new ObjectParameter("WorkflowTaskID", workflowTaskID) :
                new ObjectParameter("WorkflowTaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_AddUploadedSignedDocument", filenameParameter, mimeTypeParameter, documentTemplateIDParameter, dealIDParameter, userIDParameter, transactionTypeIDParameter, transactionStatusIDParameter, workflowStepIdParameter, workflowTaskIDParameter, rowCount);
        }
    
        public virtual ObjectResult<REPS_GetDocumentTemplateDetails_Result> REPS_GetDocumentTemplateDetails(Nullable<int> workflowID, Nullable<int> dealID)
        {
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("workflowID", workflowID) :
                new ObjectParameter("workflowID", typeof(int));
    
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("dealID", dealID) :
                new ObjectParameter("dealID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPS_GetDocumentTemplateDetails_Result>("REPS_GetDocumentTemplateDetails", workflowIDParameter, dealIDParameter);
        }
    
        public virtual int REPS_ADM_AddNewTask(Nullable<int> workflowID, string taskName, Nullable<int> taskOrder, string icon, ObjectParameter rowCount, ObjectParameter identity)
        {
            var workflowIDParameter = workflowID.HasValue ?
                new ObjectParameter("workflowID", workflowID) :
                new ObjectParameter("workflowID", typeof(int));
    
            var taskNameParameter = taskName != null ?
                new ObjectParameter("taskName", taskName) :
                new ObjectParameter("taskName", typeof(string));
    
            var taskOrderParameter = taskOrder.HasValue ?
                new ObjectParameter("taskOrder", taskOrder) :
                new ObjectParameter("taskOrder", typeof(int));
    
            var iconParameter = icon != null ?
                new ObjectParameter("icon", icon) :
                new ObjectParameter("icon", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_ADM_AddNewTask", workflowIDParameter, taskNameParameter, taskOrderParameter, iconParameter, rowCount, identity);
        }
    
        public virtual int REPS_AddGeneratedDocument(Nullable<int> dealID, Nullable<int> userID, Nullable<int> templateID, Nullable<int> workflowStepID, string mimeType, Nullable<int> transactionTypeID, Nullable<int> transactionStatusID, Nullable<int> workflowTaskID, string filename, ObjectParameter rowCount)
        {
            var dealIDParameter = dealID.HasValue ?
                new ObjectParameter("dealID", dealID) :
                new ObjectParameter("dealID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var templateIDParameter = templateID.HasValue ?
                new ObjectParameter("templateID", templateID) :
                new ObjectParameter("templateID", typeof(int));
    
            var workflowStepIDParameter = workflowStepID.HasValue ?
                new ObjectParameter("WorkflowStepID", workflowStepID) :
                new ObjectParameter("WorkflowStepID", typeof(int));
    
            var mimeTypeParameter = mimeType != null ?
                new ObjectParameter("mimeType", mimeType) :
                new ObjectParameter("mimeType", typeof(string));
    
            var transactionTypeIDParameter = transactionTypeID.HasValue ?
                new ObjectParameter("transactionTypeID", transactionTypeID) :
                new ObjectParameter("transactionTypeID", typeof(int));
    
            var transactionStatusIDParameter = transactionStatusID.HasValue ?
                new ObjectParameter("transactionStatusID", transactionStatusID) :
                new ObjectParameter("transactionStatusID", typeof(int));
    
            var workflowTaskIDParameter = workflowTaskID.HasValue ?
                new ObjectParameter("WorkflowTaskID", workflowTaskID) :
                new ObjectParameter("WorkflowTaskID", typeof(int));
    
            var filenameParameter = filename != null ?
                new ObjectParameter("filename", filename) :
                new ObjectParameter("filename", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_AddGeneratedDocument", dealIDParameter, userIDParameter, templateIDParameter, workflowStepIDParameter, mimeTypeParameter, transactionTypeIDParameter, transactionStatusIDParameter, workflowTaskIDParameter, filenameParameter, rowCount);
        }
    
        public virtual int REPS_UpdateDocumentTemplate(Nullable<int> documentTemplateID, Nullable<int> workflowStepID, Nullable<bool> deleted, ObjectParameter rowCount)
        {
            var documentTemplateIDParameter = documentTemplateID.HasValue ?
                new ObjectParameter("DocumentTemplateID", documentTemplateID) :
                new ObjectParameter("DocumentTemplateID", typeof(int));
    
            var workflowStepIDParameter = workflowStepID.HasValue ?
                new ObjectParameter("WorkflowStepID", workflowStepID) :
                new ObjectParameter("WorkflowStepID", typeof(int));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("Deleted", deleted) :
                new ObjectParameter("Deleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_UpdateDocumentTemplate", documentTemplateIDParameter, workflowStepIDParameter, deletedParameter, rowCount);
        }
    
        public virtual int sp_generate_merge1(string table_name, string target_table, string from, Nullable<bool> include_timestamp, Nullable<bool> debug_mode, string schema, Nullable<bool> ommit_images, Nullable<bool> ommit_identity, Nullable<int> top, string cols_to_include, string cols_to_exclude, Nullable<bool> update_only_if_changed, Nullable<bool> disable_constraints, Nullable<bool> ommit_computed_cols, Nullable<bool> include_use_db, Nullable<bool> results_to_text, Nullable<bool> include_rowsaffected, Nullable<bool> nologo)
        {
            var table_nameParameter = table_name != null ?
                new ObjectParameter("table_name", table_name) :
                new ObjectParameter("table_name", typeof(string));
    
            var target_tableParameter = target_table != null ?
                new ObjectParameter("target_table", target_table) :
                new ObjectParameter("target_table", typeof(string));
    
            var fromParameter = from != null ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(string));
    
            var include_timestampParameter = include_timestamp.HasValue ?
                new ObjectParameter("include_timestamp", include_timestamp) :
                new ObjectParameter("include_timestamp", typeof(bool));
    
            var debug_modeParameter = debug_mode.HasValue ?
                new ObjectParameter("debug_mode", debug_mode) :
                new ObjectParameter("debug_mode", typeof(bool));
    
            var schemaParameter = schema != null ?
                new ObjectParameter("schema", schema) :
                new ObjectParameter("schema", typeof(string));
    
            var ommit_imagesParameter = ommit_images.HasValue ?
                new ObjectParameter("ommit_images", ommit_images) :
                new ObjectParameter("ommit_images", typeof(bool));
    
            var ommit_identityParameter = ommit_identity.HasValue ?
                new ObjectParameter("ommit_identity", ommit_identity) :
                new ObjectParameter("ommit_identity", typeof(bool));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var cols_to_includeParameter = cols_to_include != null ?
                new ObjectParameter("cols_to_include", cols_to_include) :
                new ObjectParameter("cols_to_include", typeof(string));
    
            var cols_to_excludeParameter = cols_to_exclude != null ?
                new ObjectParameter("cols_to_exclude", cols_to_exclude) :
                new ObjectParameter("cols_to_exclude", typeof(string));
    
            var update_only_if_changedParameter = update_only_if_changed.HasValue ?
                new ObjectParameter("update_only_if_changed", update_only_if_changed) :
                new ObjectParameter("update_only_if_changed", typeof(bool));
    
            var disable_constraintsParameter = disable_constraints.HasValue ?
                new ObjectParameter("disable_constraints", disable_constraints) :
                new ObjectParameter("disable_constraints", typeof(bool));
    
            var ommit_computed_colsParameter = ommit_computed_cols.HasValue ?
                new ObjectParameter("ommit_computed_cols", ommit_computed_cols) :
                new ObjectParameter("ommit_computed_cols", typeof(bool));
    
            var include_use_dbParameter = include_use_db.HasValue ?
                new ObjectParameter("include_use_db", include_use_db) :
                new ObjectParameter("include_use_db", typeof(bool));
    
            var results_to_textParameter = results_to_text.HasValue ?
                new ObjectParameter("results_to_text", results_to_text) :
                new ObjectParameter("results_to_text", typeof(bool));
    
            var include_rowsaffectedParameter = include_rowsaffected.HasValue ?
                new ObjectParameter("include_rowsaffected", include_rowsaffected) :
                new ObjectParameter("include_rowsaffected", typeof(bool));
    
            var nologoParameter = nologo.HasValue ?
                new ObjectParameter("nologo", nologo) :
                new ObjectParameter("nologo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_generate_merge1", table_nameParameter, target_tableParameter, fromParameter, include_timestampParameter, debug_modeParameter, schemaParameter, ommit_imagesParameter, ommit_identityParameter, topParameter, cols_to_includeParameter, cols_to_excludeParameter, update_only_if_changedParameter, disable_constraintsParameter, ommit_computed_colsParameter, include_use_dbParameter, results_to_textParameter, include_rowsaffectedParameter, nologoParameter);
        }
    
        public virtual ObjectResult<string> REPS_GetWorkFlowAction(Nullable<int> workFlowStepID)
        {
            var workFlowStepIDParameter = workFlowStepID.HasValue ?
                new ObjectParameter("WorkFlowStepID", workFlowStepID) :
                new ObjectParameter("WorkFlowStepID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("REPS_GetWorkFlowAction", workFlowStepIDParameter);
        }
    
        public virtual int REPS_UpdateParticipant(Nullable<int> participantTypeID, Nullable<int> participantRoleID, Nullable<int> personID, Nullable<int> organizationID, Nullable<int> bankID, Nullable<int> participantID, ObjectParameter rowCount)
        {
            var participantTypeIDParameter = participantTypeID.HasValue ?
                new ObjectParameter("ParticipantTypeID", participantTypeID) :
                new ObjectParameter("ParticipantTypeID", typeof(int));
    
            var participantRoleIDParameter = participantRoleID.HasValue ?
                new ObjectParameter("ParticipantRoleID", participantRoleID) :
                new ObjectParameter("ParticipantRoleID", typeof(int));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var organizationIDParameter = organizationID.HasValue ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var participantIDParameter = participantID.HasValue ?
                new ObjectParameter("ParticipantID", participantID) :
                new ObjectParameter("ParticipantID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REPS_UpdateParticipant", participantTypeIDParameter, participantRoleIDParameter, personIDParameter, organizationIDParameter, bankIDParameter, participantIDParameter, rowCount);
        }
    
        public virtual int sp_generate_merge2(string table_name, string target_table, string from, Nullable<bool> include_timestamp, Nullable<bool> debug_mode, string schema, Nullable<bool> ommit_images, Nullable<bool> ommit_identity, Nullable<int> top, string cols_to_include, string cols_to_exclude, Nullable<bool> update_only_if_changed, Nullable<bool> disable_constraints, Nullable<bool> ommit_computed_cols, Nullable<bool> include_use_db, Nullable<bool> results_to_text, Nullable<bool> include_rowsaffected, Nullable<bool> nologo)
        {
            var table_nameParameter = table_name != null ?
                new ObjectParameter("table_name", table_name) :
                new ObjectParameter("table_name", typeof(string));
    
            var target_tableParameter = target_table != null ?
                new ObjectParameter("target_table", target_table) :
                new ObjectParameter("target_table", typeof(string));
    
            var fromParameter = from != null ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(string));
    
            var include_timestampParameter = include_timestamp.HasValue ?
                new ObjectParameter("include_timestamp", include_timestamp) :
                new ObjectParameter("include_timestamp", typeof(bool));
    
            var debug_modeParameter = debug_mode.HasValue ?
                new ObjectParameter("debug_mode", debug_mode) :
                new ObjectParameter("debug_mode", typeof(bool));
    
            var schemaParameter = schema != null ?
                new ObjectParameter("schema", schema) :
                new ObjectParameter("schema", typeof(string));
    
            var ommit_imagesParameter = ommit_images.HasValue ?
                new ObjectParameter("ommit_images", ommit_images) :
                new ObjectParameter("ommit_images", typeof(bool));
    
            var ommit_identityParameter = ommit_identity.HasValue ?
                new ObjectParameter("ommit_identity", ommit_identity) :
                new ObjectParameter("ommit_identity", typeof(bool));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var cols_to_includeParameter = cols_to_include != null ?
                new ObjectParameter("cols_to_include", cols_to_include) :
                new ObjectParameter("cols_to_include", typeof(string));
    
            var cols_to_excludeParameter = cols_to_exclude != null ?
                new ObjectParameter("cols_to_exclude", cols_to_exclude) :
                new ObjectParameter("cols_to_exclude", typeof(string));
    
            var update_only_if_changedParameter = update_only_if_changed.HasValue ?
                new ObjectParameter("update_only_if_changed", update_only_if_changed) :
                new ObjectParameter("update_only_if_changed", typeof(bool));
    
            var disable_constraintsParameter = disable_constraints.HasValue ?
                new ObjectParameter("disable_constraints", disable_constraints) :
                new ObjectParameter("disable_constraints", typeof(bool));
    
            var ommit_computed_colsParameter = ommit_computed_cols.HasValue ?
                new ObjectParameter("ommit_computed_cols", ommit_computed_cols) :
                new ObjectParameter("ommit_computed_cols", typeof(bool));
    
            var include_use_dbParameter = include_use_db.HasValue ?
                new ObjectParameter("include_use_db", include_use_db) :
                new ObjectParameter("include_use_db", typeof(bool));
    
            var results_to_textParameter = results_to_text.HasValue ?
                new ObjectParameter("results_to_text", results_to_text) :
                new ObjectParameter("results_to_text", typeof(bool));
    
            var include_rowsaffectedParameter = include_rowsaffected.HasValue ?
                new ObjectParameter("include_rowsaffected", include_rowsaffected) :
                new ObjectParameter("include_rowsaffected", typeof(bool));
    
            var nologoParameter = nologo.HasValue ?
                new ObjectParameter("nologo", nologo) :
                new ObjectParameter("nologo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_generate_merge2", table_nameParameter, target_tableParameter, fromParameter, include_timestampParameter, debug_modeParameter, schemaParameter, ommit_imagesParameter, ommit_identityParameter, topParameter, cols_to_includeParameter, cols_to_excludeParameter, update_only_if_changedParameter, disable_constraintsParameter, ommit_computed_colsParameter, include_use_dbParameter, results_to_textParameter, include_rowsaffectedParameter, nologoParameter);
        }
    }
}
