/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]		
			   
Automatic run  HKR: Project PRoperties -> Build events -> sqlcmd -i "$(MSBuildProjectDirectory)\PrefillScript.PostDeployment.sql" -S (local)
--------------------------------------------------------------------------------------
*/



/*----------------------------------------- ADDRESS TYPE -------------------------------------*/

	GO

	--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
	--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
	--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

	SET NOCOUNT ON

	MERGE INTO [AddressType] AS Target
	USING (VALUES
	(10,'Street','2015-05-12T00:00:00',NULL,0)
	,(20,'Postal','2015-05-12T00:00:00',NULL,0)
	) AS Source ([AddressTypeID],[Description],[DateCreated],[DateModified],[Deleted])
	ON (Target.[AddressTypeID] = Source.[AddressTypeID])
	WHEN MATCHED AND (
	NULLIF(Source.[Description], Target.[Description]) IS NOT NULL OR NULLIF(Target.[Description], Source.[Description]) IS NOT NULL OR 
	NULLIF(Source.[DateCreated], Target.[DateCreated]) IS NOT NULL OR NULLIF(Target.[DateCreated], Source.[DateCreated]) IS NOT NULL OR 
	NULLIF(Source.[DateModified], Target.[DateModified]) IS NOT NULL OR NULLIF(Target.[DateModified], Source.[DateModified]) IS NOT NULL OR 
	NULLIF(Source.[Deleted], Target.[Deleted]) IS NOT NULL OR NULLIF(Target.[Deleted], Source.[Deleted]) IS NOT NULL) THEN
	UPDATE SET
	[Description] = Source.[Description], 
	[DateCreated] = Source.[DateCreated], 
	[DateModified] = Source.[DateModified], 
	[Deleted] = Source.[Deleted]
	WHEN NOT MATCHED BY TARGET THEN
	INSERT([AddressTypeID],[Description],[DateCreated],[DateModified],[Deleted])
	VALUES(Source.[AddressTypeID],Source.[Description],Source.[DateCreated],Source.[DateModified],Source.[Deleted])
	WHEN NOT MATCHED BY SOURCE THEN 
	DELETE;

	GO
	DECLARE @mergeError int
	, @mergeCount int
	SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
	IF @mergeError != 0
	BEGIN
	PRINT 'ERROR OCCURRED IN MERGE FOR [AddressType]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
	END
	ELSE
	BEGIN
	PRINT '[AddressType] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
	END
	GO

	SET NOCOUNT OFF
	GO

/*----------------------------------------- END  - ADDRESS TYPE -------------------------------------*/


/*----------------------------------------- ALERTSTATUS -------------------------------------*/

	GO

	--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
	--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
	--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

	SET NOCOUNT ON

	SET IDENTITY_INSERT [AlertStatus] ON

	MERGE INTO [AlertStatus] AS Target
	USING (VALUES
	  (1,'Active')
	 ,(2,'Complete')
	 ,(3,'Overdue')
	 ,(4,'Archived')
	 ,(5,'Deleted')
	) AS Source ([ID],[Description])
	ON (Target.[ID] = Source.[ID])
	WHEN MATCHED AND (
		NULLIF(Source.[Description], Target.[Description]) IS NOT NULL OR NULLIF(Target.[Description], Source.[Description]) IS NOT NULL) THEN
	 UPDATE SET
	  [Description] = Source.[Description]
	WHEN NOT MATCHED BY TARGET THEN
	 INSERT([ID],[Description])
	 VALUES(Source.[ID],Source.[Description])
	WHEN NOT MATCHED BY SOURCE THEN 
	 DELETE;

	GO
	DECLARE @mergeError int
	 , @mergeCount int
	SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
	IF @mergeError != 0
	 BEGIN
	 PRINT 'ERROR OCCURRED IN MERGE FOR [AlertStatus]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
	 END
	ELSE
	 BEGIN
	 PRINT '[AlertStatus] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
	 END
	GO

	SET IDENTITY_INSERT [AlertStatus] OFF
	GO
	SET NOCOUNT OFF
	GO


/*----------------------------------------- END  - ALERTSTATUS -------------------------------------*/

/*----------------------------------------- ALERT TYPE -------------------------------------*/

	GO

	--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
	--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
	--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

	SET NOCOUNT ON

	SET IDENTITY_INSERT [AlertType] ON

	MERGE INTO [AlertType] AS Target
	USING (VALUES
	  (1,'Task Reminder',0)
	 ,(2,'Call Client',0)
	 ,(3,'Client Meeting',0)
	 ,(4,'Meeting - General',0)
	) AS Source ([ID],[Description],[IsDeleted])
	ON (Target.[ID] = Source.[ID])
	WHEN MATCHED AND (
		NULLIF(Source.[Description], Target.[Description]) IS NOT NULL OR NULLIF(Target.[Description], Source.[Description]) IS NOT NULL OR 
		NULLIF(Source.[IsDeleted], Target.[IsDeleted]) IS NOT NULL OR NULLIF(Target.[IsDeleted], Source.[IsDeleted]) IS NOT NULL) THEN
	 UPDATE SET
	  [Description] = Source.[Description], 
	  [IsDeleted] = Source.[IsDeleted]
	WHEN NOT MATCHED BY TARGET THEN
	 INSERT([ID],[Description],[IsDeleted])
	 VALUES(Source.[ID],Source.[Description],Source.[IsDeleted])
	WHEN NOT MATCHED BY SOURCE THEN 
	 DELETE;

	GO
	DECLARE @mergeError int
	 , @mergeCount int
	SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
	IF @mergeError != 0
	 BEGIN
	 PRINT 'ERROR OCCURRED IN MERGE FOR [AlertType]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
	 END
	ELSE
	 BEGIN
	 PRINT '[AlertType] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
	 END
	GO

	SET IDENTITY_INSERT [AlertType] OFF
	GO
	SET NOCOUNT OFF
	GO


/*----------------------------------------- END  - ALERT TYPE -------------------------------------*/



/*----------------------------------------- CURRENCY TYPE-------------------------------------*/



/*----------------------------------------- END CURRENCY TYPE-------------------------------------*/


/*----------------------------------------- DEAL TYPE-------------------------------------*/

	GO

	--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
	--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
	--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

	SET NOCOUNT ON

	MERGE INTO [DealType] AS Target
	USING (VALUES
	  (10,'Commercial','2015-05-11T14:42:47.517',NULL,0)
	 ,(20,'Development','2015-05-11T14:43:33.927',NULL,0)
	 ,(30,'Residential','2016-06-28T00:00:00',NULL,0)
	) AS Source ([DealTypeID],[Description],[DateCreated],[DateModified],[Deleted])
	ON (Target.[DealTypeID] = Source.[DealTypeID])
	WHEN MATCHED AND (
		NULLIF(Source.[Description], Target.[Description]) IS NOT NULL OR NULLIF(Target.[Description], Source.[Description]) IS NOT NULL OR 
		NULLIF(Source.[DateCreated], Target.[DateCreated]) IS NOT NULL OR NULLIF(Target.[DateCreated], Source.[DateCreated]) IS NOT NULL OR 
		NULLIF(Source.[DateModified], Target.[DateModified]) IS NOT NULL OR NULLIF(Target.[DateModified], Source.[DateModified]) IS NOT NULL OR 
		NULLIF(Source.[Deleted], Target.[Deleted]) IS NOT NULL OR NULLIF(Target.[Deleted], Source.[Deleted]) IS NOT NULL) THEN
	 UPDATE SET
	  [Description] = Source.[Description], 
	  [DateCreated] = Source.[DateCreated], 
	  [DateModified] = Source.[DateModified], 
	  [Deleted] = Source.[Deleted]
	WHEN NOT MATCHED BY TARGET THEN
	 INSERT([DealTypeID],[Description],[DateCreated],[DateModified],[Deleted])
	 VALUES(Source.[DealTypeID],Source.[Description],Source.[DateCreated],Source.[DateModified],Source.[Deleted])
	WHEN NOT MATCHED BY SOURCE THEN 
	 DELETE;

	GO
	DECLARE @mergeError int
	 , @mergeCount int
	SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
	IF @mergeError != 0
	 BEGIN
	 PRINT 'ERROR OCCURRED IN MERGE FOR [DealType]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
	 END
	ELSE
	 BEGIN
	 PRINT '[DealType] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
	 END
	GO

	SET NOCOUNT OFF
	GO


/*----------------------------------------- END DEAL TYPE-------------------------------------*/

/*----------------------------------------- DOCUMENT TEMPLATE -------------------------------------*/

GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

SET IDENTITY_INSERT [DocumentTemplate] ON

MERGE INTO [DocumentTemplate] AS Target
USING (VALUES
  (1,'Client Care Letter',1,NULL,1,0,1,1,'18C8FC6C-9F36-4252-A57A-C428CB3F0F2E                                                                                                                                                                                                                           ')
 ,(2,'Mortgage Letter',2,NULL,1,0,1,2,'2FFC92A6-D66B-45A4-A43A-8FC9EF9DBAC8                                                                                                                                                                                                                           ')
 ,(3,'Confirmation of Registration',3,NULL,1,0,0,3,'963A5B11-3F1B-4837-A3D2-41D3537872EA                                                                                                                                                                                                                           ')
 ,(4,'ID Document',4,NULL,1,0,0,4,'6E3BA5B5-108D-437A-9FFC-8DCB1257E9DC                                                                                                                                                                                                                           ')
 ,(5,'Proof of Address',5,NULL,1,0,0,5,'62B6114F-33E0-4BBA-B948-03E1E2E44FAA                                                                                                                                                                                                                           ')
 ,(6,'Statement of Account',6,NULL,1,0,1,6,'5E415420-AC1A-48FE-9494-CC1F8939E29A                                                                                                                                                                                                                           ')
 ,(7,'Title Letter',7,NULL,1,0,1,7,'A86D8D62-4D80-41CB-A3BD-74C246A3A66D                                                                                                                                                                                                                           ')
 ,(8,'Memorandum of Sale',8,NULL,1,0,0,8,'4C2DEB66-8D0F-4C01-8A68-CE1B0F75418A                                                                                                                                                                                                                           ')
 ,(9,'Schedule of Fees',9,NULL,1,0,0,9,'C2C45D3C-B681-4F9E-9021-EAF8309B9129                                                                                                                                                                                                                           ')
 ,(10,'Schedule of Stamp Duty',10,NULL,1,0,0,10,'A27D519D-50B4-4611-84E1-7F1B2B654525                                                                                                                                                                                                                           ')
 ,(11,'Transfer Document',11,NULL,1,0,0,11,'7431CDAC-B9C0-4D37-BC8C-A013284F692B                                                                                                                                                                                                                           ')
 ,(12,'Contract',12,NULL,1,0,0,12,'055E0E3D-4570-4BA0-86CD-B4D8253BC927                                                                                                                                                                                                                           ')
 ,(13,'Proof of Insurance',13,NULL,1,0,0,13,'6A37EEDD-486C-4F22-945B-D1EAA0A98741                                                                                                                                                                                                                           ')
 ,(14,'Confirmation of Registration',14,NULL,1,0,0,14,'119B6C79-EF2F-4F41-A979-5BA7FB5265A0                                                                                                                                                                                                                           ')
 ,(15,'Search Report',15,NULL,1,0,1,15,'91331AF5-0DDF-40DF-8073-651BE0211D1B                                                                                                                                                                                                                           ')
 ,(16,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
) AS Source ([ID],[TemplateDisplayName],[DocumentVersionID],[AttributeName],[IsActive],[IsDeleted],[IsDocfusionTemplate],[DisplayOrder],[TemplateFixGUID])
ON (Target.[ID] = Source.[ID])
WHEN MATCHED AND (
	NULLIF(Source.[TemplateDisplayName], Target.[TemplateDisplayName]) IS NOT NULL OR NULLIF(Target.[TemplateDisplayName], Source.[TemplateDisplayName]) IS NOT NULL OR 
	NULLIF(Source.[DocumentVersionID], Target.[DocumentVersionID]) IS NOT NULL OR NULLIF(Target.[DocumentVersionID], Source.[DocumentVersionID]) IS NOT NULL OR 
	NULLIF(Source.[AttributeName], Target.[AttributeName]) IS NOT NULL OR NULLIF(Target.[AttributeName], Source.[AttributeName]) IS NOT NULL OR 
	NULLIF(Source.[IsActive], Target.[IsActive]) IS NOT NULL OR NULLIF(Target.[IsActive], Source.[IsActive]) IS NOT NULL OR 
	NULLIF(Source.[IsDeleted], Target.[IsDeleted]) IS NOT NULL OR NULLIF(Target.[IsDeleted], Source.[IsDeleted]) IS NOT NULL OR 
	NULLIF(Source.[IsDocfusionTemplate], Target.[IsDocfusionTemplate]) IS NOT NULL OR NULLIF(Target.[IsDocfusionTemplate], Source.[IsDocfusionTemplate]) IS NOT NULL OR 
	NULLIF(Source.[DisplayOrder], Target.[DisplayOrder]) IS NOT NULL OR NULLIF(Target.[DisplayOrder], Source.[DisplayOrder]) IS NOT NULL OR 
	NULLIF(Source.[TemplateFixGUID], Target.[TemplateFixGUID]) IS NOT NULL OR NULLIF(Target.[TemplateFixGUID], Source.[TemplateFixGUID]) IS NOT NULL) THEN
 UPDATE SET
  [TemplateDisplayName] = Source.[TemplateDisplayName], 
  [DocumentVersionID] = Source.[DocumentVersionID], 
  [AttributeName] = Source.[AttributeName], 
  [IsActive] = Source.[IsActive], 
  [IsDeleted] = Source.[IsDeleted], 
  [IsDocfusionTemplate] = Source.[IsDocfusionTemplate], 
  [DisplayOrder] = Source.[DisplayOrder], 
  [TemplateFixGUID] = Source.[TemplateFixGUID]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([ID],[TemplateDisplayName],[DocumentVersionID],[AttributeName],[IsActive],[IsDeleted],[IsDocfusionTemplate],[DisplayOrder],[TemplateFixGUID])
 VALUES(Source.[ID],Source.[TemplateDisplayName],Source.[DocumentVersionID],Source.[AttributeName],Source.[IsActive],Source.[IsDeleted],Source.[IsDocfusionTemplate],Source.[DisplayOrder],Source.[TemplateFixGUID])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [DocumentTemplate]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[DocumentTemplate] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET IDENTITY_INSERT [DocumentTemplate] OFF
GO
SET NOCOUNT OFF
GO
/*----------------------------------------- END DOCUMENT TEMPLATE -------------------------------------*/


/*----------------------------------------- DOCUMENT TYPE-------------------------------------*/

	GO

	--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
	--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
	--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

	SET NOCOUNT ON

	SET IDENTITY_INSERT [DocumentType] ON

	MERGE INTO [DocumentType] AS Target
	USING (VALUES
	  (1,'Buyer Documents',1,'2016-06-09T00:00:00')
	 ,(2,'Deal Documents',2,'2016-06-09T00:00:00')
	 ,(3,'Mortgage Documents',3,'2016-06-09T00:00:00')
	 ,(4,'Search Documents',4,'2016-07-02T00:00:00')
	) AS Source ([ID],[Description],[OrderBy],[DateCreated])
	ON (Target.[ID] = Source.[ID])
	WHEN MATCHED AND (
		NULLIF(Source.[Description], Target.[Description]) IS NOT NULL OR NULLIF(Target.[Description], Source.[Description]) IS NOT NULL OR 
		NULLIF(Source.[OrderBy], Target.[OrderBy]) IS NOT NULL OR NULLIF(Target.[OrderBy], Source.[OrderBy]) IS NOT NULL OR 
		NULLIF(Source.[DateCreated], Target.[DateCreated]) IS NOT NULL OR NULLIF(Target.[DateCreated], Source.[DateCreated]) IS NOT NULL) THEN
	 UPDATE SET
	  [Description] = Source.[Description], 
	  [OrderBy] = Source.[OrderBy], 
	  [DateCreated] = Source.[DateCreated]
	WHEN NOT MATCHED BY TARGET THEN
	 INSERT([ID],[Description],[OrderBy],[DateCreated])
	 VALUES(Source.[ID],Source.[Description],Source.[OrderBy],Source.[DateCreated])
	WHEN NOT MATCHED BY SOURCE THEN 
	 DELETE;

	GO
	DECLARE @mergeError int
	 , @mergeCount int
	SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
	IF @mergeError != 0
	 BEGIN
	 PRINT 'ERROR OCCURRED IN MERGE FOR [DocumentType]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
	 END
	ELSE
	 BEGIN
	 PRINT '[DocumentType] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
	 END
	GO

	SET IDENTITY_INSERT [DocumentType] OFF
	GO
	SET NOCOUNT OFF
	GO

/*----------------------------------------- END DOCUMENT TYPE-------------------------------------*/

/*----------------------------------------- DOCUMENT Version-------------------------------------*/

GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

SET IDENTITY_INSERT [DocumentVersion] ON

MERGE INTO [DocumentVersion] AS Target
USING (VALUES
  (1,1,'1.0','Client Care Letter - Welcome Pack.docx','','.docx','REPS_DocXML_ClientCareLetter','2016-06-09T00:00:00',4070,1,0,0)
 ,(2,1,'1.0','Mortgage Letter.docx',NULL,'.docx','REPS_DocXML_MortgageLetter','2016-06-09T00:00:00',4070,0,0,0)
 ,(3,1,'1.0',NULL,NULL,'',NULL,'2016-06-09T00:00:00',4070,1,0,0)
 ,(4,1,'1.0',NULL,NULL,'',NULL,'2016-06-09T00:00:00',4070,0,0,0)
 ,(5,1,'1.0',NULL,NULL,'',NULL,'2016-06-09T00:00:00',4070,0,0,0)
 ,(6,1,'1.0',NULL,NULL,'.docx',NULL,'2016-06-09T00:00:00',4070,1,0,1)
 ,(7,2,'1.0',NULL,NULL,'.docx',NULL,'2016-06-09T00:00:00',4070,1,0,0)
 ,(8,2,'1.0',NULL,NULL,NULL,NULL,'2016-07-02T00:00:00',4070,1,0,0)
 ,(9,2,'1.0','Fee Schedule.docx',NULL,'.docx',NULL,'2016-07-02T00:00:00',4070,1,1,0)
 ,(10,2,'1.0','Stamp Duty Letter.docx',NULL,'.docx',NULL,'2016-07-02T00:00:00',4070,1,1,0)
 ,(11,2,'1.0',NULL,NULL,NULL,NULL,'2016-07-02T00:00:00',4070,1,0,0)
 ,(12,3,'1.0',NULL,NULL,NULL,NULL,'2016-07-02T00:00:00',4070,1,0,0)
 ,(13,3,'1.0',NULL,NULL,NULL,NULL,'2016-07-02T00:00:00',4070,1,0,0)
 ,(14,3,'1.0',NULL,NULL,NULL,NULL,'2016-07-02T00:00:00',4070,1,0,0)
 ,(15,4,'1.0','Search Report Letter.docx',NULL,'.docx','REPS_DocXML_SearchReportLetter','2016-07-02T00:00:00',4070,1,0,0)
) AS Source ([ID],[DocumentTypeID],[VersionName],[TemplateFileName],[Comments],[MimeTypeID],[XMLStoredProc],[DateCreated],[CreatedByUserID],[eSignable],[IsStaticDoc],[IsDeleted])
ON (Target.[ID] = Source.[ID])
WHEN MATCHED AND (
	NULLIF(Source.[DocumentTypeID], Target.[DocumentTypeID]) IS NOT NULL OR NULLIF(Target.[DocumentTypeID], Source.[DocumentTypeID]) IS NOT NULL OR 
	NULLIF(Source.[VersionName], Target.[VersionName]) IS NOT NULL OR NULLIF(Target.[VersionName], Source.[VersionName]) IS NOT NULL OR 
	NULLIF(Source.[TemplateFileName], Target.[TemplateFileName]) IS NOT NULL OR NULLIF(Target.[TemplateFileName], Source.[TemplateFileName]) IS NOT NULL OR 
	NULLIF(Source.[Comments], Target.[Comments]) IS NOT NULL OR NULLIF(Target.[Comments], Source.[Comments]) IS NOT NULL OR 
	NULLIF(Source.[MimeTypeID], Target.[MimeTypeID]) IS NOT NULL OR NULLIF(Target.[MimeTypeID], Source.[MimeTypeID]) IS NOT NULL OR 
	NULLIF(Source.[XMLStoredProc], Target.[XMLStoredProc]) IS NOT NULL OR NULLIF(Target.[XMLStoredProc], Source.[XMLStoredProc]) IS NOT NULL OR 
	NULLIF(Source.[DateCreated], Target.[DateCreated]) IS NOT NULL OR NULLIF(Target.[DateCreated], Source.[DateCreated]) IS NOT NULL OR 
	NULLIF(Source.[CreatedByUserID], Target.[CreatedByUserID]) IS NOT NULL OR NULLIF(Target.[CreatedByUserID], Source.[CreatedByUserID]) IS NOT NULL OR 
	NULLIF(Source.[eSignable], Target.[eSignable]) IS NOT NULL OR NULLIF(Target.[eSignable], Source.[eSignable]) IS NOT NULL OR 
	NULLIF(Source.[IsStaticDoc], Target.[IsStaticDoc]) IS NOT NULL OR NULLIF(Target.[IsStaticDoc], Source.[IsStaticDoc]) IS NOT NULL OR 
	NULLIF(Source.[IsDeleted], Target.[IsDeleted]) IS NOT NULL OR NULLIF(Target.[IsDeleted], Source.[IsDeleted]) IS NOT NULL) THEN
 UPDATE SET
  [DocumentTypeID] = Source.[DocumentTypeID], 
  [VersionName] = Source.[VersionName], 
  [TemplateFileName] = Source.[TemplateFileName], 
  [Comments] = Source.[Comments], 
  [MimeTypeID] = Source.[MimeTypeID], 
  [XMLStoredProc] = Source.[XMLStoredProc], 
  [DateCreated] = Source.[DateCreated], 
  [CreatedByUserID] = Source.[CreatedByUserID], 
  [eSignable] = Source.[eSignable], 
  [IsStaticDoc] = Source.[IsStaticDoc], 
  [IsDeleted] = Source.[IsDeleted]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([ID],[DocumentTypeID],[VersionName],[TemplateFileName],[Comments],[MimeTypeID],[XMLStoredProc],[DateCreated],[CreatedByUserID],[eSignable],[IsStaticDoc],[IsDeleted])
 VALUES(Source.[ID],Source.[DocumentTypeID],Source.[VersionName],Source.[TemplateFileName],Source.[Comments],Source.[MimeTypeID],Source.[XMLStoredProc],Source.[DateCreated],Source.[CreatedByUserID],Source.[eSignable],Source.[IsStaticDoc],Source.[IsDeleted])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [DocumentVersion]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[DocumentVersion] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET IDENTITY_INSERT [DocumentVersion] OFF
GO
SET NOCOUNT OFF
GO
/*----------------------------------------- END DOCUMENT Version-------------------------------------*/

/*----------------------------------------- REPORTS - PLEASE CHANGE FILE NAME IN REPORTTEMPLATE FOLDER WHEN CHANGING REPORT NAME -------------------------------------*/
GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

SET IDENTITY_INSERT [Reports] ON

MERGE INTO [Reports] AS Target
USING (VALUES
  (1,'Work In Progress',1,'REPS_ReportWorkflowDealPerCountTable','REPS_ReportWorkflowDealPerCount','@UserId=userID,@WorkflowID=workflowID,@DealProcessTaskID=DealProcessTaskID,@StatusID=StatusID,@EntityID=entityId,@StartDate=startDate,@EndDate=endDate','@UserId=userID,@WorkflowID=workflowID,@DealProcessTaskID=DealProcessTaskID,@EntityID=entityId,@TaskID=taskID,@StartDate=startDate,@EndDate=endDate')
 ,(2,'User Overview',1,NULL,NULL,NULL,NULL)
 ,(3,'Finance Overview',1,NULL,NULL,NULL,NULL)
 ,(4,'Matter Created per User',1,'REPS_GetDealReportUserSpecific',NULL,'@UserId=userID,@DealId=dealId,@UniqueReference=uniqueReference,@OrganisationId=organisationId,@DealStatusId=dealStatusId,@DealTypeId=dealTypeId,@Start=start,@End=end',NULL)
 ,(5,'Monthly Payment Overview',NULL,'REPS_ReportMonthlyPaymentTable','REPS_ReportMonthlyPaymentChart','@UserId=userID,@Year=year,@EntityID=entityId,@DealProcessTaskID=dealProcessTaskID,@StartDate=startDate,@EndDate=endDate','@UserId=userID,@Year=year,@EntityID=entityId,@DealProcessTaskID=dealProcessTaskID,@StartDate=startDate,@EndDate=endDate')
 ,(6,'Payment Per Deal Type',NULL,'REPS_ReportFeePerDealTable','REPS_ReportFeePerDealChart','@UserId=userID,@EntityID=entityId,@WorkflowTaskID=workflowTaskID,@DealProcessTaskID=dealProcessTaskID,@VariableTypeID=valueTypeID,@StartDate=startDate,@EndDate=endDate','@UserId=userID,@EntityID=entityId,@WorkflowTaskID=workflowTaskID,@DealProcessTaskID=dealProcessTaskID,@VariableTypeID=valueTypeID,@StartDate=startDate,@EndDate=endDate')
 ,(7,'Payment Type',1,'REPS_ReportSumPerFeeDescriptionTable','REPS_ReportSumPerFeeTypeGenerated','@UserId=userID,@EntityID=entityId,@WorkflowTaskID=workflowTaskID,@FeeTypeID=feeTypeID,@ValueTypeID=valueTypeID,@FeeDescID=feeDescID,@StartDate=startDate,@EndDate=endDate','@UserId=userID,@EntityID=entityId,@WorkflowTaskID=workflowTaskID,@FeeTypeID=feeTypeID,@ValueTypeID=valueTypeID,@FeeDescID=feeDescID,@StartDate=startDate,@EndDate=endDate')
) AS Source ([ReportsId],[Description],[Deleted],[TableProcedure],[ChartProcedure],[TableParameter],[ChartParameter])
ON (Target.[ReportsId] = Source.[ReportsId])
WHEN MATCHED AND (
	NULLIF(Source.[Description], Target.[Description]) IS NOT NULL OR NULLIF(Target.[Description], Source.[Description]) IS NOT NULL OR 
	NULLIF(Source.[Deleted], Target.[Deleted]) IS NOT NULL OR NULLIF(Target.[Deleted], Source.[Deleted]) IS NOT NULL OR 
	NULLIF(Source.[TableProcedure], Target.[TableProcedure]) IS NOT NULL OR NULLIF(Target.[TableProcedure], Source.[TableProcedure]) IS NOT NULL OR 
	NULLIF(Source.[ChartProcedure], Target.[ChartProcedure]) IS NOT NULL OR NULLIF(Target.[ChartProcedure], Source.[ChartProcedure]) IS NOT NULL OR 
	NULLIF(Source.[TableParameter], Target.[TableParameter]) IS NOT NULL OR NULLIF(Target.[TableParameter], Source.[TableParameter]) IS NOT NULL OR 
	NULLIF(Source.[ChartParameter], Target.[ChartParameter]) IS NOT NULL OR NULLIF(Target.[ChartParameter], Source.[ChartParameter]) IS NOT NULL) THEN
 UPDATE SET
  [Description] = Source.[Description], 
  [Deleted] = Source.[Deleted], 
  [TableProcedure] = Source.[TableProcedure], 
  [ChartProcedure] = Source.[ChartProcedure], 
  [TableParameter] = Source.[TableParameter], 
  [ChartParameter] = Source.[ChartParameter]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([ReportsId],[Description],[Deleted],[TableProcedure],[ChartProcedure],[TableParameter],[ChartParameter])
 VALUES(Source.[ReportsId],Source.[Description],Source.[Deleted],Source.[TableProcedure],Source.[ChartProcedure],Source.[TableParameter],Source.[ChartParameter])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [Reports]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[Reports] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET IDENTITY_INSERT [Reports] OFF
GO
SET NOCOUNT OFF
GO
/*----------------------------------------- END REPORTS -------------------------------------*/

/*-----------------------------------------  REPORTS Locations-------------------------------------*/
GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

MERGE INTO [ReportLocation] AS Target
USING (VALUES
  (1,'Dashboard',0,2,6,'doughnut','Payments Per Matter Type')
 ,(2,'Dashboard',0,3,7,'bar','Payment Type')
 ,(3,'Dashboard',0,4,1,'pie','Sum per workflow')
 ,(4,'Report',0,1,1,'pie','Sum per workflow')
 ,(5,'Report',0,2,2,'table','r2')
 ,(6,'Report',0,3,3,'table','r3')
 ,(7,'Report',0,4,4,'table','r4')
 ,(8,'Report',0,5,5,'bar','Monthly Payment Overview')
 ,(9,'Dashboard',0,1,5,'bar','Monthly Payment Overview')
 ,(10,'Report',0,6,6,'doughnut','Payments Per Matter Type')
 ,(11,'Report',0,7,7,'bar','Payment Type')
) AS Source ([reportLocationID],[Location],[Deleted],[Order],[ReportsId],[ChartType],[ChartName])
ON (Target.[reportLocationID] = Source.[reportLocationID])
WHEN MATCHED AND (
	NULLIF(Source.[Location], Target.[Location]) IS NOT NULL OR NULLIF(Target.[Location], Source.[Location]) IS NOT NULL OR 
	NULLIF(Source.[Deleted], Target.[Deleted]) IS NOT NULL OR NULLIF(Target.[Deleted], Source.[Deleted]) IS NOT NULL OR 
	NULLIF(Source.[Order], Target.[Order]) IS NOT NULL OR NULLIF(Target.[Order], Source.[Order]) IS NOT NULL OR 
	NULLIF(Source.[ReportsId], Target.[ReportsId]) IS NOT NULL OR NULLIF(Target.[ReportsId], Source.[ReportsId]) IS NOT NULL OR 
	NULLIF(Source.[ChartType], Target.[ChartType]) IS NOT NULL OR NULLIF(Target.[ChartType], Source.[ChartType]) IS NOT NULL OR 
	NULLIF(Source.[ChartName], Target.[ChartName]) IS NOT NULL OR NULLIF(Target.[ChartName], Source.[ChartName]) IS NOT NULL) THEN
 UPDATE SET
  [Location] = Source.[Location], 
  [Deleted] = Source.[Deleted], 
  [Order] = Source.[Order], 
  [ReportsId] = Source.[ReportsId], 
  [ChartType] = Source.[ChartType], 
  [ChartName] = Source.[ChartName]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([reportLocationID],[Location],[Deleted],[Order],[ReportsId],[ChartType],[ChartName])
 VALUES(Source.[reportLocationID],Source.[Location],Source.[Deleted],Source.[Order],Source.[ReportsId],Source.[ChartType],Source.[ChartName])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [ReportLocation]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[ReportLocation] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET NOCOUNT OFF
GO

/*----------------------------------------- END REPORTS Locations-------------------------------------*/

/*-----------------------------------------  REPORTS filters -------------------------------------*/
GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

MERGE INTO [ReportFilters] AS Target
USING (VALUES
  (1,1,'Status','Drop','REPS_ReportWorkflowStatus','@WorkflowID=WorkflowID','statusID')
 ,(2,1,'Deal Creator','Drop','REPS_ReportGetUsers','@UserID=userId,@EntityID=entityId','userID')
 ,(3,6,'Deal Creator','Drop','REPS_ReportGetUsers','@UserID=userId,@EntityID=entityId','userID')
 ,(4,7,'Deal Creator','Drop','REPS_ReportGetUsers','@UserID=userId,@EntityID=entityId','userID')
 ,(5,7,'Payment Description','Drop','REPS_ReportFilterFeeTypesListDropDown','@StartDate=startDate,@EndDate=endDate','feeDescID')
 ,(6,5,'Deal Creator','Drop','REPS_ReportGetUsers','@UserID=userId,@EntityID=entityId','userID')
) AS Source ([ReportsFiltersId],[ReportsId],[Description],[Type],[DropdownProcedure],[Parameter],[FilterID])
ON (Target.[ReportsFiltersId] = Source.[ReportsFiltersId])
WHEN MATCHED AND (
	NULLIF(Source.[ReportsId], Target.[ReportsId]) IS NOT NULL OR NULLIF(Target.[ReportsId], Source.[ReportsId]) IS NOT NULL OR 
	NULLIF(Source.[Description], Target.[Description]) IS NOT NULL OR NULLIF(Target.[Description], Source.[Description]) IS NOT NULL OR 
	NULLIF(Source.[Type], Target.[Type]) IS NOT NULL OR NULLIF(Target.[Type], Source.[Type]) IS NOT NULL OR 
	NULLIF(Source.[DropdownProcedure], Target.[DropdownProcedure]) IS NOT NULL OR NULLIF(Target.[DropdownProcedure], Source.[DropdownProcedure]) IS NOT NULL OR 
	NULLIF(Source.[Parameter], Target.[Parameter]) IS NOT NULL OR NULLIF(Target.[Parameter], Source.[Parameter]) IS NOT NULL OR 
	NULLIF(Source.[FilterID], Target.[FilterID]) IS NOT NULL OR NULLIF(Target.[FilterID], Source.[FilterID]) IS NOT NULL) THEN
 UPDATE SET
  [ReportsId] = Source.[ReportsId], 
  [Description] = Source.[Description], 
  [Type] = Source.[Type], 
  [DropdownProcedure] = Source.[DropdownProcedure], 
  [Parameter] = Source.[Parameter], 
  [FilterID] = Source.[FilterID]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([ReportsFiltersId],[ReportsId],[Description],[Type],[DropdownProcedure],[Parameter],[FilterID])
 VALUES(Source.[ReportsFiltersId],Source.[ReportsId],Source.[Description],Source.[Type],Source.[DropdownProcedure],Source.[Parameter],Source.[FilterID])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [ReportFilters]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[ReportFilters] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET NOCOUNT OFF
GO

/*----------------------------------------- END REPORTS Filters -------------------------------------*/

/*----------------------------------------- FEE TYPE TABLE REPORTS Filters -------------------------------------*/
GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

MERGE INTO [FeeType] AS Target
USING (VALUES
  (1,'Local Council Searches',0,'2016-08-19T15:01:10.473')
 ,(2,'Conveyancing Fee',0,'2016-08-19T15:01:20.140')
 ,(3,'Land Registry Search Fee',0,'2016-08-19T15:01:30.327')
 ,(4,'Land Registry Fee',0,'2016-08-19T15:01:38.703')
 ,(5,'Stamp Duty',0,'2016-08-19T15:01:55.577')
 ,(6,'Other Fee',0,'2016-08-19T15:01:58.973')
) AS Source ([FeeTypeID],[Description],[Deleted],[DateCreated])
ON (Target.[FeeTypeID] = Source.[FeeTypeID])
WHEN MATCHED AND (
	NULLIF(Source.[Description], Target.[Description]) IS NOT NULL OR NULLIF(Target.[Description], Source.[Description]) IS NOT NULL OR 
	NULLIF(Source.[Deleted], Target.[Deleted]) IS NOT NULL OR NULLIF(Target.[Deleted], Source.[Deleted]) IS NOT NULL OR 
	NULLIF(Source.[DateCreated], Target.[DateCreated]) IS NOT NULL OR NULLIF(Target.[DateCreated], Source.[DateCreated]) IS NOT NULL) THEN
 UPDATE SET
  [Description] = Source.[Description], 
  [Deleted] = Source.[Deleted], 
  [DateCreated] = Source.[DateCreated]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([FeeTypeID],[Description],[Deleted],[DateCreated])
 VALUES(Source.[FeeTypeID],Source.[Description],Source.[Deleted],Source.[DateCreated])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [FeeType]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[FeeType] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET NOCOUNT OFF
GO
/*----------------------------------------- END FEE TYPE TABLE REPORTS Filters -------------------------------------*/


/*----------------------------------------- ROLE -------------------------------------*/
GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

SET IDENTITY_INSERT [Role] ON

MERGE INTO [Role] AS Target
USING (VALUES
  (1,'Admin','2015-05-20T00:00:00',NULL,0)
 ,(2,'Sytem','2015-05-20T00:00:00',NULL,0)
 ,(3,'Transfer Attorney','2015-05-20T00:00:00',NULL,0)
 ,(4,'Bond Attorney','2015-05-20T00:00:00',NULL,0)
 ,(5,'Cancellation Attorney','2015-05-20T00:00:00',NULL,0)
 ,(6,'Bond Bank','2015-05-20T00:00:00',NULL,0)
 ,(7,'Cancellation Bank','2015-05-20T00:00:00',NULL,0)
 ,(8,'Superuser','2015-05-20T00:00:00',NULL,0)
 ,(9,'Normal User','2017-07-25T09:31:53.773','2017-08-04T13:33:37.687',0)
) AS Source ([RoleID],[Description],[DateCreated],[DateModified],[Deleted])
ON (Target.[RoleID] = Source.[RoleID])
WHEN MATCHED AND (
	NULLIF(Source.[Description], Target.[Description]) IS NOT NULL OR NULLIF(Target.[Description], Source.[Description]) IS NOT NULL OR 
	NULLIF(Source.[DateCreated], Target.[DateCreated]) IS NOT NULL OR NULLIF(Target.[DateCreated], Source.[DateCreated]) IS NOT NULL OR 
	NULLIF(Source.[DateModified], Target.[DateModified]) IS NOT NULL OR NULLIF(Target.[DateModified], Source.[DateModified]) IS NOT NULL OR 
	NULLIF(Source.[Deleted], Target.[Deleted]) IS NOT NULL OR NULLIF(Target.[Deleted], Source.[Deleted]) IS NOT NULL) THEN
 UPDATE SET
  [Description] = Source.[Description], 
  [DateCreated] = Source.[DateCreated], 
  [DateModified] = Source.[DateModified], 
  [Deleted] = Source.[Deleted]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([RoleID],[Description],[DateCreated],[DateModified],[Deleted])
 VALUES(Source.[RoleID],Source.[Description],Source.[DateCreated],Source.[DateModified],Source.[Deleted])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [Role]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[Role] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET IDENTITY_INSERT [Role] OFF
GO
SET NOCOUNT OFF
GO


--GO

----MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
----Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
----Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

--SET NOCOUNT ON

--SET IDENTITY_INSERT [Role] ON

--MERGE INTO [Role] AS Target
--USING (VALUES
--  (1,'Admin','2015-05-20T00:00:00',NULL,0)
-- ,(2,'Sytem','2015-05-20T00:00:00',NULL,0)
-- ,(3,'Transfer Attorney','2015-05-20T00:00:00',NULL,0)
-- ,(4,'Bond Attorney','2015-05-20T00:00:00',NULL,0)
-- ,(5,'Cancellation Attorney','2015-05-20T00:00:00',NULL,0)
-- ,(6,'Bond Bank','2015-05-20T00:00:00',NULL,0)
-- ,(7,'Cancellation Bank','2015-05-20T00:00:00',NULL,0)
-- ,(8,'Superuser','2015-05-20T00:00:00',NULL,0)
--) AS Source ([RoleID],[Description],[DateCreated],[DateModified],[Deleted])
--ON (Target.[RoleID] = Source.[RoleID])
--WHEN MATCHED AND (
--	NULLIF(Source.[Description], Target.[Description]) IS NOT NULL OR NULLIF(Target.[Description], Source.[Description]) IS NOT NULL OR 
--	NULLIF(Source.[DateCreated], Target.[DateCreated]) IS NOT NULL OR NULLIF(Target.[DateCreated], Source.[DateCreated]) IS NOT NULL OR 
--	NULLIF(Source.[DateModified], Target.[DateModified]) IS NOT NULL OR NULLIF(Target.[DateModified], Source.[DateModified]) IS NOT NULL OR 
--	NULLIF(Source.[Deleted], Target.[Deleted]) IS NOT NULL OR NULLIF(Target.[Deleted], Source.[Deleted]) IS NOT NULL) THEN
-- UPDATE SET
--  [Description] = Source.[Description], 
--  [DateCreated] = Source.[DateCreated], 
--  [DateModified] = Source.[DateModified], 
--  [Deleted] = Source.[Deleted]
--WHEN NOT MATCHED BY TARGET THEN
-- INSERT([RoleID],[Description],[DateCreated],[DateModified],[Deleted])
-- VALUES(Source.[RoleID],Source.[Description],Source.[DateCreated],Source.[DateModified],Source.[Deleted])
--WHEN NOT MATCHED BY SOURCE THEN 
-- DELETE;

--GO
--DECLARE @mergeError int
-- , @mergeCount int
--SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
--IF @mergeError != 0
-- BEGIN
-- PRINT 'ERROR OCCURRED IN MERGE FOR [Role]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
-- END
--ELSE
-- BEGIN
-- PRINT '[Role] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
-- END
--GO

--SET IDENTITY_INSERT [Role] OFF
--GO
--SET NOCOUNT OFF
--GO

/*----------------------------------------- END ROLE -------------------------------------*/


/*----------------------------------------- INSTRUMENT TYPE -------------------------------------*/
GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

MERGE INTO [InstrumentType] AS Target
USING (VALUES
  (1,'First Time','2016-06-27T00:00:00',NULL,0)
 ,(2,'Second Time','2016-06-27T00:00:00',NULL,0)
 ,(3,'Remortgage','2016-06-27T00:00:00',NULL,0)
) AS Source ([InstrumentTypeID],[Description],[DateCreated],[DateModified],[Deleted])
ON (Target.[InstrumentTypeID] = Source.[InstrumentTypeID])
WHEN MATCHED AND (
	NULLIF(Source.[Description], Target.[Description]) IS NOT NULL OR NULLIF(Target.[Description], Source.[Description]) IS NOT NULL OR 
	NULLIF(Source.[DateCreated], Target.[DateCreated]) IS NOT NULL OR NULLIF(Target.[DateCreated], Source.[DateCreated]) IS NOT NULL OR 
	NULLIF(Source.[DateModified], Target.[DateModified]) IS NOT NULL OR NULLIF(Target.[DateModified], Source.[DateModified]) IS NOT NULL OR 
	NULLIF(Source.[Deleted], Target.[Deleted]) IS NOT NULL OR NULLIF(Target.[Deleted], Source.[Deleted]) IS NOT NULL) THEN
 UPDATE SET
  [Description] = Source.[Description], 
  [DateCreated] = Source.[DateCreated], 
  [DateModified] = Source.[DateModified], 
  [Deleted] = Source.[Deleted]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([InstrumentTypeID],[Description],[DateCreated],[DateModified],[Deleted])
 VALUES(Source.[InstrumentTypeID],Source.[Description],Source.[DateCreated],Source.[DateModified],Source.[Deleted])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [InstrumentType]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[InstrumentType] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET NOCOUNT OFF
GO

/*----------------------------------------- END INSTRUMENT TYPE -------------------------------------*/


/*----------------------------------------- INTEREST TYPE -------------------------------------*/

SELECT TOP 1000 [InterestTypeID]
      ,[Description]
      ,[DateCreated]
      ,[DateModified]
      ,[Deleted]
  FROM [dbo].[InterestType]

/*----------------------------------------- END INTEREST TYPE -------------------------------------*/

/*----------------------------------------- JOB TITLE -------------------------------------*/
GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

SET IDENTITY_INSERT [JobTitle] ON

MERGE INTO [JobTitle] AS Target
USING (VALUES
  (1,'Transfer Attorney','2015-04-29T11:54:27.360',NULL,0)
 ,(2,'Bond Attorney','2015-04-29T11:54:32.917',NULL,0)
 ,(3,'Cancellation Attorney','2015-04-29T11:54:36.267',NULL,0)
 ,(4,'Banker','2015-05-21T00:00:00',NULL,0)
) AS Source ([JobTitleID],[Description],[DateCreated],[DateModified],[Deleted])
ON (Target.[JobTitleID] = Source.[JobTitleID])
WHEN MATCHED AND (
	NULLIF(Source.[Description], Target.[Description]) IS NOT NULL OR NULLIF(Target.[Description], Source.[Description]) IS NOT NULL OR 
	NULLIF(Source.[DateCreated], Target.[DateCreated]) IS NOT NULL OR NULLIF(Target.[DateCreated], Source.[DateCreated]) IS NOT NULL OR 
	NULLIF(Source.[DateModified], Target.[DateModified]) IS NOT NULL OR NULLIF(Target.[DateModified], Source.[DateModified]) IS NOT NULL OR 
	NULLIF(Source.[Deleted], Target.[Deleted]) IS NOT NULL OR NULLIF(Target.[Deleted], Source.[Deleted]) IS NOT NULL) THEN
 UPDATE SET
  [Description] = Source.[Description], 
  [DateCreated] = Source.[DateCreated], 
  [DateModified] = Source.[DateModified], 
  [Deleted] = Source.[Deleted]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([JobTitleID],[Description],[DateCreated],[DateModified],[Deleted])
 VALUES(Source.[JobTitleID],Source.[Description],Source.[DateCreated],Source.[DateModified],Source.[Deleted])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [JobTitle]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[JobTitle] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET IDENTITY_INSERT [JobTitle] OFF
GO
SET NOCOUNT OFF
GO

/*----------------------------------------- END JOB TITLE -------------------------------------*/


/*----------------------------------------- TITLE -------------------------------------*/

GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

SET IDENTITY_INSERT [Title] ON

MERGE INTO [Title] AS Target
USING (VALUES
  (1,'Mr','2015-09-16T21:35:59.963',NULL,0)
 ,(2,'Mrs','2015-09-16T21:35:59.963',NULL,0)
 ,(3,'Miss','2015-09-16T21:35:59.963',NULL,0)
) AS Source ([TitleID],[Description],[DateCreated],[DateModified],[Deleted])
ON (Target.[TitleID] = Source.[TitleID])
WHEN MATCHED AND (
	NULLIF(Source.[Description], Target.[Description]) IS NOT NULL OR NULLIF(Target.[Description], Source.[Description]) IS NOT NULL OR 
	NULLIF(Source.[DateCreated], Target.[DateCreated]) IS NOT NULL OR NULLIF(Target.[DateCreated], Source.[DateCreated]) IS NOT NULL OR 
	NULLIF(Source.[DateModified], Target.[DateModified]) IS NOT NULL OR NULLIF(Target.[DateModified], Source.[DateModified]) IS NOT NULL OR 
	NULLIF(Source.[Deleted], Target.[Deleted]) IS NOT NULL OR NULLIF(Target.[Deleted], Source.[Deleted]) IS NOT NULL) THEN
 UPDATE SET
  [Description] = Source.[Description], 
  [DateCreated] = Source.[DateCreated], 
  [DateModified] = Source.[DateModified], 
  [Deleted] = Source.[Deleted]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([TitleID],[Description],[DateCreated],[DateModified],[Deleted])
 VALUES(Source.[TitleID],Source.[Description],Source.[DateCreated],Source.[DateModified],Source.[Deleted])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [Title]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[Title] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET IDENTITY_INSERT [Title] OFF
GO
SET NOCOUNT OFF
GO

/*----------------------------------------- END TITLE -------------------------------------*/


/*----------------------------------------- LENDERS -------------------------------------*/

GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

SET IDENTITY_INSERT [Lenders] ON

MERGE INTO [Lenders] AS Target
USING (VALUES
  (1,'Accord Mortgages Ltd','','','','','','','','')
 ,(2,'Adam & Company','','','','','','','','')
 ,(3,'Adam & Company International','','','','','','','','')
 ,(4,'Ahli United Bank (UK) plc','','','','','','','','')
 ,(5,'Aldermore Bank PLC','','','','','','','','')
 ,(6,'Allied Irish Bank (GB)','','','','','','','','')
 ,(7,'Aviva Equity Release UK Ltd','','','','','','','','')
 ,(8,'Bank of Ireland (UK) plc','One Temple Quay','Temple Back East','BRISTOL','','BS1 6DX','0117 943 6393','www.bankofirelandmortgages.co.uk','')
 ,(9,'Bank of Ireland as Bank of Ireland Mortgages','','','','','','','','')
 ,(10,'Bank of Scotland Beginning A','','','','','','','','')
 ,(11,'Bank of Scotland Beginning O','','','','','','','','')
 ,(12,'Barclays Bank as The Woolwich','','','','','','','','')
 ,(13,'Barclays Bank Plc as Standard Life Mortgages','','','','','','','','')
 ,(14,'Barnsley Building Soc','','','','','','','','')
 ,(15,'Birmingham Midshires','','','','','','','','')
 ,(16,'Bradford & Bingley Plc','','','','','','','','')
 ,(17,'Britannia','','','','','','','','')
 ,(18,'Buckinghamshire Building Society','','','','','','','','')
 ,(19,'Capital Home Loans','','','','','','','','')
 ,(20,'Chelsea Building Society','','','','','','','','')
 ,(21,'Cheshire Building Society','','','','','','','','')
 ,(22,'Church House Trust','','','','','','','','')
 ,(23,'Clydesdale Bank plc','','','','','','','','')
 ,(24,'Co-operative Bank plc','','','','','','','','')
 ,(25,'Coutts','','','','','','','','')
 ,(26,'Coutts Finance Co','','','','','','','','')
 ,(27,'Coventry Building Society','','','','','','','','')
 ,(28,'Darlington Building Society','','','','','','','','')
 ,(29,'DB UK Bank Ltd','','','','','','','','')
 ,(30,'Derbyshire Building Society','','','','','','','','')
 ,(31,'Derbyshire Home Loans','','','','','','','','')
 ,(32,'Dudley Building Society','','','','','','','','')
 ,(33,'Dunfermline Building Society','','','','','','','','')
 ,(34,'Earl Shilton Building Society','','','','','','','','')
 ,(35,'Ecology Building Society','','','','','','','','')
 ,(36,'Family Building Soc','','','','','','','','')
 ,(37,'Furness Building Society','','','','','','','','')
 ,(38,'GE Money Home Lending Ltd','','','','','','','','')
 ,(39,'Godiva Mortgages Ltd','','','','','','','','')
 ,(40,'Halifax','Trinity Road','HALIFAX','West Yorkshire','','HX1 2RG','0870 600 5000','www.halifax.co.uk','')
 ,(41,'Halifax Loans Ltd','','','','','','','','')
 ,(42,'Hinckley and Rugby Building Society','81 Upper Bond Street','HINCKLEY','Leicestershire','','LE10 1DG','01455 251 234',' www.hrbs.co.uk','')
 ,(43,'HSBC Bank plc','8 Canada Square','Canary Wharf','LONDON','','E14 5HQ','020 7991 8888','www.hsbc.co.uk','')
 ,(44,'Intelligent Finance','','','','','','','','')
 ,(45,'Investec Bank plc','','','','','','','','')
 ,(46,'ITL Mortgages','','','','','','','','')
 ,(47,'JPMorgan Chase Bank, N.A.','','','','','','','','')
 ,(48,'Kensington Mortgage Company Ltd','','','','','','','','')
 ,(49,'Kent Reliance','','','','','','','','')
 ,(50,'Leeds Building Society','105 Albion Street','LEEDS','','','LS1 5AS',' 0113 2252000','www.leedsbuildingsociety.co.uk','')
 ,(51,'Lloyds Bank plc pre fixed 20/40','','','','','','','','')
 ,(52,'Lloyds Bank plc pre fixed 50/30/77','','','','','','','','')
 ,(53,'Lloyds TSB Scotland plc','','','','','','','','')
 ,(54,'Magellan Homeloans','','','','','','','','')
 ,(55,'Market Harborough Building Society','','','','','','','','')
 ,(56,'Metro Bank plc','','','','','','','','')
 ,(57,'Monmouthshire Building Society','','','','','','','','')
 ,(58,'Mortgage Agency Services','','','','','','','','')
 ,(59,'Mortgage Express','','','','','','','','')
 ,(60,'National Counties Building Society','','','','','','','','')
 ,(61,'National Westminster Bank plc','','','','','','','','')
 ,(62,'Nationwide Building Society','','','','','','','','')
 ,(63,'New Life Mortgages Ltd','','','','','','','','')
 ,(64,'NRAM plc','','','','','','','','')
 ,(65,'Paragon Mortgages (2010) Ltd','','','','','','','','')
 ,(66,'Paragon Mortgages Ltd','','','','','','','','')
 ,(67,'Paratus AMC Ltd','','','','','','','','')
 ,(68,'Platform Home Loans Ltd','','','','','','','','')
 ,(69,'Precise Mortgages','','','','','','','','')
 ,(70,'Principality Building Society','','','','','','','','')
 ,(71,'Saffron Building Society','','','','','','','','')
 ,(72,'Santander UK plc','2 Triton Square','Regents Place','LONDON','','NW1 3AN','0870 607 6000','www.santander.co.uk','')
 ,(73,'Scottish Building Society','','','','','','','','')
 ,(74,'Scottish Widows Bank plc','','','','','','','','')
 ,(75,'Skipton Building Society','','','','','','','','')
 ,(76,'St James Place Bank','','','','','','','','')
 ,(77,'State Bank of India UK','','','','','','','','')
 ,(78,'Swansea Building Society','','','','','','','','')
 ,(79,'Tesco Bank','','','','','','','','')
 ,(80,'The Mortgage Business','','','','','','','','')
 ,(81,'The Mortgage Works','','','','','','','','')
 ,(82,'The Royal Bank of Scotland plc','Po Box 1000','Gogarburn','EDINBURGH','','EH12 1HQ','0131 556 8555','www.rbs.co.uk','')
 ,(83,'Direct Line Mortgages','','','','','','','','')
 ,(84,'Direct Line One','','','','','','','','')
 ,(85,'First Active','','','','','','','','')
 ,(86,'Natwest one Account','','','','','','','','')
 ,(87,'One Account','','','','','','','','')
 ,(88,'Virgin One','','','','','','','','')
 ,(89,'The Tipton & Coseley Building Society','','','','','','','','')
 ,(90,'Topaz Finance plc','','','','','','','','')
 ,(91,'TSB Bank plc','','','','','','','','')
 ,(92,'UCB Home Loans Corporation Ltd','','','','','','','','')
 ,(93,'Ulster Bank Ltd','','','','','','','','')
 ,(94,'Virgin Money plc','','','','','','','','')
 ,(95,'Yorkshire Bank Home Loans Ltd','20 Merrion Way','LEEDS','','','LS2 8NZ','0113 247 2000','','')
 ,(96,'Yorkshire Building Society','Yorkshire House','Yorkshire Drive','BRADFORD','West Yorkshire','BD5 8LJ','01274 740740','www.ybs.co.uk','')
) AS Source ([ID],[Name],[AddressLine1],[AddressLine2],[AddressLine3],[AddressLine4],[PostalCode],[ContactNumber],[website],[email])
ON (Target.[ID] = Source.[ID])
WHEN MATCHED AND (
	NULLIF(Source.[Name], Target.[Name]) IS NOT NULL OR NULLIF(Target.[Name], Source.[Name]) IS NOT NULL OR 
	NULLIF(Source.[AddressLine1], Target.[AddressLine1]) IS NOT NULL OR NULLIF(Target.[AddressLine1], Source.[AddressLine1]) IS NOT NULL OR 
	NULLIF(Source.[AddressLine2], Target.[AddressLine2]) IS NOT NULL OR NULLIF(Target.[AddressLine2], Source.[AddressLine2]) IS NOT NULL OR 
	NULLIF(Source.[AddressLine3], Target.[AddressLine3]) IS NOT NULL OR NULLIF(Target.[AddressLine3], Source.[AddressLine3]) IS NOT NULL OR 
	NULLIF(Source.[AddressLine4], Target.[AddressLine4]) IS NOT NULL OR NULLIF(Target.[AddressLine4], Source.[AddressLine4]) IS NOT NULL OR 
	NULLIF(Source.[PostalCode], Target.[PostalCode]) IS NOT NULL OR NULLIF(Target.[PostalCode], Source.[PostalCode]) IS NOT NULL OR 
	NULLIF(Source.[ContactNumber], Target.[ContactNumber]) IS NOT NULL OR NULLIF(Target.[ContactNumber], Source.[ContactNumber]) IS NOT NULL OR 
	NULLIF(Source.[website], Target.[website]) IS NOT NULL OR NULLIF(Target.[website], Source.[website]) IS NOT NULL OR 
	NULLIF(Source.[email], Target.[email]) IS NOT NULL OR NULLIF(Target.[email], Source.[email]) IS NOT NULL) THEN
 UPDATE SET
  [Name] = Source.[Name], 
  [AddressLine1] = Source.[AddressLine1], 
  [AddressLine2] = Source.[AddressLine2], 
  [AddressLine3] = Source.[AddressLine3], 
  [AddressLine4] = Source.[AddressLine4], 
  [PostalCode] = Source.[PostalCode], 
  [ContactNumber] = Source.[ContactNumber], 
  [website] = Source.[website], 
  [email] = Source.[email]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([ID],[Name],[AddressLine1],[AddressLine2],[AddressLine3],[AddressLine4],[PostalCode],[ContactNumber],[website],[email])
 VALUES(Source.[ID],Source.[Name],Source.[AddressLine1],Source.[AddressLine2],Source.[AddressLine3],Source.[AddressLine4],Source.[PostalCode],Source.[ContactNumber],Source.[website],Source.[email])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [Lenders]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[Lenders] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET IDENTITY_INSERT [Lenders] OFF
GO
SET NOCOUNT OFF
GO

/*----------------------------------------- END LENDERS -------------------------------------*/

/*----------------------------------------- MIME -------------------------------------*/

GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

SET IDENTITY_INSERT [MimeType] ON

MERGE INTO [MimeType] AS Target
USING (VALUES
  (1,'.au','audio/basic','2016-06-20T00:00:00',NULL,0)
 ,(2,'.avi','video/msvideo, video/avi, video/x-msvideo','2016-06-20T00:00:00',NULL,1)
 ,(3,'.bmp','image/bmp','2016-06-20T00:00:00',NULL,1)
 ,(4,'.bz2','application/x-bzip2','2016-06-20T00:00:00',NULL,1)
 ,(5,'.css','text/css','2016-06-20T00:00:00',NULL,1)
 ,(6,'.dtd','application/xml-dtd','2016-06-20T00:00:00',NULL,1)
 ,(7,'.doc','application/msword','2016-06-20T00:00:00',NULL,1)
 ,(8,'.exe','application/octet-stream','2016-06-20T00:00:00',NULL,1)
 ,(9,'.gif','image/gif','2016-06-20T00:00:00',NULL,1)
 ,(10,'.gz','application/x-gzip','2016-06-20T00:00:00',NULL,1)
 ,(11,'.hqx','application/mac-binhex40','2016-06-20T00:00:00',NULL,1)
 ,(12,'.html','text/html','2016-06-20T00:00:00',NULL,1)
 ,(13,'.jar','application/java-archive','2016-06-20T00:00:00',NULL,1)
 ,(14,'.jpg','image/jpeg','2016-06-20T00:00:00',NULL,1)
 ,(15,'.js','application/x-javascript','2016-06-20T00:00:00',NULL,1)
 ,(16,'.midi','audio/x-midi','2016-06-20T00:00:00',NULL,1)
 ,(17,'.mp3','audio/mpeg','2016-06-20T00:00:00',NULL,1)
 ,(18,'.mpeg','video/mpeg','2016-06-20T00:00:00',NULL,1)
 ,(19,'.ogg','audio/vorbis, application/ogg','2016-06-20T00:00:00',NULL,1)
 ,(20,'.pdf','application/pdf','2016-06-20T00:00:00',NULL,1)
 ,(21,'.pl','application/x-perl','2016-06-20T00:00:00',NULL,1)
 ,(22,'.png','image/png','2016-06-20T00:00:00',NULL,1)
 ,(23,'.ppt','application/vnd.ms-powerpoint','2016-06-20T00:00:00',NULL,1)
 ,(24,'.ps','application/postscript','2016-06-20T00:00:00',NULL,1)
 ,(25,'.qt','video/quicktime','2016-06-20T00:00:00',NULL,1)
 ,(26,'.ra','audio/x-pn-realaudio, audio/vnd.rn-realaudio','2016-06-20T00:00:00',NULL,1)
 ,(27,'.ram','audio/x-pn-realaudio, audio/vnd.rn-realaudio','2016-06-20T00:00:00',NULL,1)
 ,(28,'.rdf','application/rdf, application/rdf+xml','2016-06-20T00:00:00',NULL,1)
 ,(29,'.rtf','application/rtf','2016-06-20T00:00:00',NULL,1)
 ,(30,'.sgml','text/sgml','2016-06-20T00:00:00',NULL,1)
 ,(31,'.sit','application/x-stuffit','2016-06-20T00:00:00',NULL,1)
 ,(32,'.svg','image/svg+xml','2016-06-20T00:00:00',NULL,1)
 ,(33,'.swf','application/x-shockwave-flash','2016-06-20T00:00:00',NULL,1)
 ,(34,'.tar.gz','application/x-tar','2016-06-20T00:00:00',NULL,1)
 ,(35,'.tgz','application/x-tar','2016-06-20T00:00:00',NULL,1)
 ,(36,'.tiff','image/tiff','2016-06-20T00:00:00',NULL,1)
 ,(37,'.tsv','text/tab-separated-values','2016-06-20T00:00:00',NULL,1)
 ,(38,'.txt','text/plain','2016-06-20T00:00:00',NULL,1)
 ,(39,'.wav','audio/wav, audio/x-wav','2016-06-20T00:00:00',NULL,1)
 ,(40,'.xls','application/vnd.ms-excel','2016-06-20T00:00:00',NULL,1)
 ,(41,'.xml','application/xml','2016-06-20T00:00:00',NULL,1)
 ,(42,'.zip','application/zip, application/x-compressed-zip','2016-06-20T00:00:00',NULL,1)
) AS Source ([MimeTypeID],[Extension],[Description],[DateCreated],[DateModified],[Deleted])
ON (Target.[MimeTypeID] = Source.[MimeTypeID])
WHEN MATCHED AND (
	NULLIF(Source.[Extension], Target.[Extension]) IS NOT NULL OR NULLIF(Target.[Extension], Source.[Extension]) IS NOT NULL OR 
	NULLIF(Source.[Description], Target.[Description]) IS NOT NULL OR NULLIF(Target.[Description], Source.[Description]) IS NOT NULL OR 
	NULLIF(Source.[DateCreated], Target.[DateCreated]) IS NOT NULL OR NULLIF(Target.[DateCreated], Source.[DateCreated]) IS NOT NULL OR 
	NULLIF(Source.[DateModified], Target.[DateModified]) IS NOT NULL OR NULLIF(Target.[DateModified], Source.[DateModified]) IS NOT NULL OR 
	NULLIF(Source.[Deleted], Target.[Deleted]) IS NOT NULL OR NULLIF(Target.[Deleted], Source.[Deleted]) IS NOT NULL) THEN
 UPDATE SET
  [Extension] = Source.[Extension], 
  [Description] = Source.[Description], 
  [DateCreated] = Source.[DateCreated], 
  [DateModified] = Source.[DateModified], 
  [Deleted] = Source.[Deleted]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([MimeTypeID],[Extension],[Description],[DateCreated],[DateModified],[Deleted])
 VALUES(Source.[MimeTypeID],Source.[Extension],Source.[Description],Source.[DateCreated],Source.[DateModified],Source.[Deleted])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [MimeType]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[MimeType] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET IDENTITY_INSERT [MimeType] OFF
GO
SET NOCOUNT OFF
GO

/*----------------------------------------- END MIME -------------------------------------*/

/*----------------------------------------- ORGANISATION TYPE -------------------------------------*/

GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

SET IDENTITY_INSERT [OrganizationType] ON

MERGE INTO [OrganizationType] AS Target
USING (VALUES
  (4,'Law Firm','2015-04-27T00:00:00',NULL,0)
 ,(5,'Individual','2015-04-27T00:00:00',NULL,0)
) AS Source ([OrganizationTypeID],[Description],[DateCreated],[DateModified],[Deleted])
ON (Target.[OrganizationTypeID] = Source.[OrganizationTypeID])
WHEN MATCHED AND (
	NULLIF(Source.[Description], Target.[Description]) IS NOT NULL OR NULLIF(Target.[Description], Source.[Description]) IS NOT NULL OR 
	NULLIF(Source.[DateCreated], Target.[DateCreated]) IS NOT NULL OR NULLIF(Target.[DateCreated], Source.[DateCreated]) IS NOT NULL OR 
	NULLIF(Source.[DateModified], Target.[DateModified]) IS NOT NULL OR NULLIF(Target.[DateModified], Source.[DateModified]) IS NOT NULL OR 
	NULLIF(Source.[Deleted], Target.[Deleted]) IS NOT NULL OR NULLIF(Target.[Deleted], Source.[Deleted]) IS NOT NULL) THEN
 UPDATE SET
  [Description] = Source.[Description], 
  [DateCreated] = Source.[DateCreated], 
  [DateModified] = Source.[DateModified], 
  [Deleted] = Source.[Deleted]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([OrganizationTypeID],[Description],[DateCreated],[DateModified],[Deleted])
 VALUES(Source.[OrganizationTypeID],Source.[Description],Source.[DateCreated],Source.[DateModified],Source.[Deleted])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [OrganizationType]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[OrganizationType] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET IDENTITY_INSERT [OrganizationType] OFF
GO
SET NOCOUNT OFF
GO

/*----------------------------------------- END ORGANISATION TYPE -------------------------------------*/

/*----------------------------------------- INTEREST TYPE -------------------------------------*/
GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

SET IDENTITY_INSERT [InterestType] ON

MERGE INTO [InterestType] AS Target
USING (VALUES
  (1,'Fixed','2016-06-28T00:00:00',NULL,0)
 ,(2,'Comp','2016-06-28T00:00:00',NULL,0)
) AS Source ([InterestTypeID],[Description],[DateCreated],[DateModified],[Deleted])
ON (Target.[InterestTypeID] = Source.[InterestTypeID])
WHEN MATCHED AND (
	NULLIF(Source.[Description], Target.[Description]) IS NOT NULL OR NULLIF(Target.[Description], Source.[Description]) IS NOT NULL OR 
	NULLIF(Source.[DateCreated], Target.[DateCreated]) IS NOT NULL OR NULLIF(Target.[DateCreated], Source.[DateCreated]) IS NOT NULL OR 
	NULLIF(Source.[DateModified], Target.[DateModified]) IS NOT NULL OR NULLIF(Target.[DateModified], Source.[DateModified]) IS NOT NULL OR 
	NULLIF(Source.[Deleted], Target.[Deleted]) IS NOT NULL OR NULLIF(Target.[Deleted], Source.[Deleted]) IS NOT NULL) THEN
 UPDATE SET
  [Description] = Source.[Description], 
  [DateCreated] = Source.[DateCreated], 
  [DateModified] = Source.[DateModified], 
  [Deleted] = Source.[Deleted]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([InterestTypeID],[Description],[DateCreated],[DateModified],[Deleted])
 VALUES(Source.[InterestTypeID],Source.[Description],Source.[DateCreated],Source.[DateModified],Source.[Deleted])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [InterestType]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[InterestType] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET IDENTITY_INSERT [InterestType] OFF
GO
SET NOCOUNT OFF
GO
/*----------------------------------------- END INTEREST TYPE -------------------------------------*/


/*----------------------------------------- PARTICIPANT ROLE -------------------------------------*/


GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

MERGE INTO [ParticipantRole] AS Target
USING (VALUES
  (10,'Lender',0)
 ,(20,'Estate Agency',0)
 ,(40,'Buyer Solicitor',0)
 ,(50,'Seller Solicitor',0)
 ,(60,'Mortgage Provider (Buyer)',0)
 ,(70,'Mortgage Provider (Seller)',0)
 ,(80,'Seller',0)
 ,(90,'Buyer',0)
) AS Source ([ParticipantRoleID],[Description],[Deleted])
ON (Target.[ParticipantRoleID] = Source.[ParticipantRoleID])
WHEN MATCHED AND (
	NULLIF(Source.[Description], Target.[Description]) IS NOT NULL OR NULLIF(Target.[Description], Source.[Description]) IS NOT NULL OR 
	NULLIF(Source.[Deleted], Target.[Deleted]) IS NOT NULL OR NULLIF(Target.[Deleted], Source.[Deleted]) IS NOT NULL) THEN
 UPDATE SET
  [Description] = Source.[Description], 
  [Deleted] = Source.[Deleted]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([ParticipantRoleID],[Description],[Deleted])
 VALUES(Source.[ParticipantRoleID],Source.[Description],Source.[Deleted])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [ParticipantRole]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[ParticipantRole] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET NOCOUNT OFF
GO

/*----------------------------------------- END PARTICIPANT ROLE -------------------------------------*/

/*----------------------------------------- PARTICIPANT TYPE -------------------------------------*/

GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

MERGE INTO [ParticipantType] AS Target
USING (VALUES
  (10,'Individual','2015-05-12T00:00:00',NULL,0)
 ,(20,'Company','2015-05-12T00:00:00',NULL,0)
) AS Source ([ParticipantTypeID],[Description],[DateCreated],[DateModified],[Deleted])
ON (Target.[ParticipantTypeID] = Source.[ParticipantTypeID])
WHEN MATCHED AND (
	NULLIF(Source.[Description], Target.[Description]) IS NOT NULL OR NULLIF(Target.[Description], Source.[Description]) IS NOT NULL OR 
	NULLIF(Source.[DateCreated], Target.[DateCreated]) IS NOT NULL OR NULLIF(Target.[DateCreated], Source.[DateCreated]) IS NOT NULL OR 
	NULLIF(Source.[DateModified], Target.[DateModified]) IS NOT NULL OR NULLIF(Target.[DateModified], Source.[DateModified]) IS NOT NULL OR 
	NULLIF(Source.[Deleted], Target.[Deleted]) IS NOT NULL OR NULLIF(Target.[Deleted], Source.[Deleted]) IS NOT NULL) THEN
 UPDATE SET
  [Description] = Source.[Description], 
  [DateCreated] = Source.[DateCreated], 
  [DateModified] = Source.[DateModified], 
  [Deleted] = Source.[Deleted]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([ParticipantTypeID],[Description],[DateCreated],[DateModified],[Deleted])
 VALUES(Source.[ParticipantTypeID],Source.[Description],Source.[DateCreated],Source.[DateModified],Source.[Deleted])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [ParticipantType]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[ParticipantType] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET NOCOUNT OFF
GO

/*----------------------------------------- END PARTICIPANT TYPE -------------------------------------*/

/*----------------------------------------- PROPERTY TYPE -------------------------------------*/

GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

MERGE INTO [PropertyType] AS Target
USING (VALUES
  (10,'Freehold','2015-05-13T00:00:00',NULL,0)
 ,(20,'Leasehold','2015-05-13T00:00:00',NULL,0)
) AS Source ([PropertyTypeID],[Description],[DateCreated],[DateModified],[Deleted])
ON (Target.[PropertyTypeID] = Source.[PropertyTypeID])
WHEN MATCHED AND (
	NULLIF(Source.[Description], Target.[Description]) IS NOT NULL OR NULLIF(Target.[Description], Source.[Description]) IS NOT NULL OR 
	NULLIF(Source.[DateCreated], Target.[DateCreated]) IS NOT NULL OR NULLIF(Target.[DateCreated], Source.[DateCreated]) IS NOT NULL OR 
	NULLIF(Source.[DateModified], Target.[DateModified]) IS NOT NULL OR NULLIF(Target.[DateModified], Source.[DateModified]) IS NOT NULL OR 
	NULLIF(Source.[Deleted], Target.[Deleted]) IS NOT NULL OR NULLIF(Target.[Deleted], Source.[Deleted]) IS NOT NULL) THEN
 UPDATE SET
  [Description] = Source.[Description], 
  [DateCreated] = Source.[DateCreated], 
  [DateModified] = Source.[DateModified], 
  [Deleted] = Source.[Deleted]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([PropertyTypeID],[Description],[DateCreated],[DateModified],[Deleted])
 VALUES(Source.[PropertyTypeID],Source.[Description],Source.[DateCreated],Source.[DateModified],Source.[Deleted])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [PropertyType]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[PropertyType] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET NOCOUNT OFF
GO

/*----------------------------------------- END PROPERTY TYPE -------------------------------------*/

/*----------------------------------------- PROVINCE -------------------------------------*/

GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

SET IDENTITY_INSERT [Province] ON

MERGE INTO [Province] AS Target
USING (VALUES
  (1,4,'Eastern Cape','2015-05-12T00:00:00',NULL,0)
 ,(2,4,'Free State','2015-05-12T00:00:00',NULL,0)
 ,(3,4,'Gauteng','2015-08-08T00:00:00',NULL,0)
 ,(4,4,'KwaZulu-Natal','2015-08-08T00:00:00',NULL,0)
 ,(5,4,'Western Cape','2015-08-08T00:00:00',NULL,0)
 ,(6,4,'Limpopo','2015-08-08T00:00:00',NULL,0)
 ,(7,4,'Northern Cape','2015-08-08T00:00:00',NULL,0)
 ,(8,4,'Mpumalanga','2015-08-08T00:00:00',NULL,0)
 ,(9,4,'North West','2015-08-08T00:00:00',NULL,0)
 ,(12,1197,'Eastern Cape','2015-08-08T00:00:00',NULL,0)
 ,(13,1197,'Free State','2015-08-08T00:00:00',NULL,0)
 ,(10,1197,'Gauteng','2015-08-08T00:00:00',NULL,0)
 ,(11,1197,'North West','2015-08-08T00:00:00',NULL,0)
 ,(14,1197,'Northern Cape','2015-08-08T00:00:00',NULL,0)
 ,(15,1197,'Mpumalanga','2015-08-08T00:00:00',NULL,0)
 ,(16,1197,'KwaZulu-Natal','2015-08-08T00:00:00',NULL,0)
 ,(17,1197,'Limpopo','2015-08-08T00:00:00',NULL,0)
 ,(18,1197,'Republic of South Africa','2015-08-08T00:00:00',NULL,0)
 ,(33,1226,'Aberconwy and Colwyn','2016-09-09T00:00:00',NULL,0)
 ,(38,1226,'Aberdeen City','2016-09-09T00:00:00',NULL,0)
 ,(42,1226,'Aberdeenshire','2016-09-09T00:00:00',NULL,0)
 ,(44,1226,'Buckinghamshire','2016-09-09T00:00:00',NULL,0)
 ,(47,1226,'City of Bristol','2016-09-09T00:00:00',NULL,0)
 ,(48,1226,'Conwy','2016-09-09T00:00:00',NULL,0)
 ,(50,1226,'Dumfries and Galloway','2016-09-09T00:00:00',NULL,0)
 ,(52,1226,'East Ayrshire','2016-09-09T00:00:00',NULL,0)
 ,(53,1226,'East Riding Yorkshire','2016-09-09T00:00:00',NULL,0)
 ,(54,1226,'Flintshire','2016-09-09T00:00:00','2016-09-09T00:00:00',0)
 ,(55,1226,'Greater London','2016-09-09T00:00:00',NULL,0)
 ,(56,1226,'Greater Manchester','2016-09-09T00:00:00',NULL,0)
 ,(57,1226,'Gwent','2016-09-09T00:00:00',NULL,0)
 ,(59,1226,'Hampshire','2016-09-09T00:00:00',NULL,0)
 ,(60,1226,'Highlands','2016-09-09T00:00:00',NULL,0)
 ,(62,1226,'Isle of Man','2016-09-09T00:00:00',NULL,0)
 ,(63,1226,'Isle of Wight','2016-09-09T00:00:00',NULL,0)
 ,(64,1226,'Kent','2016-09-09T00:00:00',NULL,0)
 ,(65,1226,'Kincardinshire','2016-09-09T00:00:00',NULL,0)
 ,(67,1226,'Lanarkshire','2016-09-09T00:00:00',NULL,0)
 ,(68,1226,'Lancashire','2016-09-09T00:00:00',NULL,0)
 ,(69,1226,'Merseyside','2016-09-09T00:00:00',NULL,0)
 ,(70,1226,'Newport','2016-09-09T00:00:00',NULL,0)
 ,(71,1226,'Norfolk','2016-09-09T00:00:00',NULL,0)
 ,(72,1226,'Northumberland','2016-09-09T00:00:00',NULL,0)
 ,(73,1226,'Nottinghamshire','2016-09-09T00:00:00',NULL,0)
 ,(74,1226,'Oxfordshire','2016-09-09T00:00:00',NULL,0)
 ,(75,1226,'Pembrokeshire','2016-09-09T00:00:00',NULL,0)
 ,(76,1226,'Rutland','2016-09-09T00:00:00',NULL,0)
 ,(77,1226,'Scottish Borders','2016-09-09T00:00:00',NULL,0)
 ,(79,1226,'Shetland','2016-09-09T00:00:00',NULL,0)
 ,(80,1226,'Tyrone','2016-09-09T00:00:00',NULL,0)
 ,(81,1226,'York','2016-09-09T00:00:00',NULL,0)
) AS Source ([ProvinceID],[CountryID],[Description],[DateCreated],[DateModified],[Deleted])
ON (Target.[ProvinceID] = Source.[ProvinceID])
WHEN MATCHED AND (
	NULLIF(Source.[CountryID], Target.[CountryID]) IS NOT NULL OR NULLIF(Target.[CountryID], Source.[CountryID]) IS NOT NULL OR 
	NULLIF(Source.[Description], Target.[Description]) IS NOT NULL OR NULLIF(Target.[Description], Source.[Description]) IS NOT NULL OR 
	NULLIF(Source.[DateCreated], Target.[DateCreated]) IS NOT NULL OR NULLIF(Target.[DateCreated], Source.[DateCreated]) IS NOT NULL OR 
	NULLIF(Source.[DateModified], Target.[DateModified]) IS NOT NULL OR NULLIF(Target.[DateModified], Source.[DateModified]) IS NOT NULL OR 
	NULLIF(Source.[Deleted], Target.[Deleted]) IS NOT NULL OR NULLIF(Target.[Deleted], Source.[Deleted]) IS NOT NULL) THEN
 UPDATE SET
  [CountryID] = Source.[CountryID], 
  [Description] = Source.[Description], 
  [DateCreated] = Source.[DateCreated], 
  [DateModified] = Source.[DateModified], 
  [Deleted] = Source.[Deleted]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([ProvinceID],[CountryID],[Description],[DateCreated],[DateModified],[Deleted])
 VALUES(Source.[ProvinceID],Source.[CountryID],Source.[Description],Source.[DateCreated],Source.[DateModified],Source.[Deleted])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [Province]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[Province] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET IDENTITY_INSERT [Province] OFF
GO
SET NOCOUNT OFF
GO

/*----------------------------------------- END PROVINCE -------------------------------------*/


/*-----------------------------------------  WORKFLOW commented when in use -------------------------------------*/
GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

MERGE INTO [Workflow] AS Target
USING (VALUES
  ('75C5303C-E2A1-40B6-A708-5EB6F804A6E2                                                                                                                                                                                                                           ',1000,'Deal')
 ,('2D2FA591-307E-4222-9DCD-F624CD09C5A8                                                                                                                                                                                                                           ',2000,'Process')
 ,('560F6294-E026-485A-B773-52187E9144EF                                                                                                                                                                                                                           ',3000,'Workflow')
 ,('18301700-A535-4DA2-8F97-79ABC8AFAFD5                                                                                                                                                                                                                           ',4000,'Alerts')
 ,('8CBBBA70-B4E2-4344-AF75-EF4357E68BB5                                                                                                                                                                                                                           ',5000,'Correspondence')
 ,('803C2CAE-9A3B-4DA1-8AE6-CE57CD9083C7                                                                                                                                                                                                                           ',6000,'Document')
 ,('18DF8A25-7DC6-4E31-8275-8B5B58F9EC38                                                                                                                                                                                                                           ',7000,'Fees')
 ,('9FC60FD1-9B92-4AEC-BB71-BE380F1877E8                                                                                                                                                                                                                           ',2000121,'ProcessBuyerWorkflow')
 ,('0120A8C6-9553-49C2-9A50-4895E0873FAF                                                                                                                                                                                                                           ',2000120,'ProcessSellerWorkflow')
) AS Source ([WorkflowGUID],[WorkflowID],[WorkflowName])
ON (Target.[WorkflowID] = Source.[WorkflowID])
WHEN MATCHED AND (
	NULLIF(Source.[WorkflowGUID], Target.[WorkflowGUID]) IS NOT NULL OR NULLIF(Target.[WorkflowGUID], Source.[WorkflowGUID]) IS NOT NULL OR 
	NULLIF(Source.[WorkflowName], Target.[WorkflowName]) IS NOT NULL OR NULLIF(Target.[WorkflowName], Source.[WorkflowName]) IS NOT NULL) THEN
 UPDATE SET
  [WorkflowGUID] = Source.[WorkflowGUID], 
  [WorkflowName] = Source.[WorkflowName]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([WorkflowGUID],[WorkflowID],[WorkflowName])
 VALUES(Source.[WorkflowGUID],Source.[WorkflowID],Source.[WorkflowName])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [Workflow]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[Workflow] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET NOCOUNT OFF
GO
/*----------------------------------------- END WORKFLOW -------------------------------------*/


/*----------------------------------------- TASK -------------------------------------*/
GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

MERGE INTO [Task] AS Target
USING (VALUES
  ('3F77543D-B5AE-488B-8146-9F82DDE15B4A                                                                                                                                                                                                                           ',100,'Deal',NULL,NULL,NULL,0,0)
 ,('CD4E51D9-3504-440A-AB99-8802BC19A3B5                                                                                                                                                                                                                           ',101,'Participant',NULL,NULL,NULL,0,0)
 ,('0E35D437-DB93-44AE-B689-C44178DDC2FD                                                                                                                                                                                                                           ',102,'Property',NULL,NULL,NULL,0,0)
 ,('DC47F5D9-CCDC-4054-AB64-B81582D22AD1                                                                                                                                                                                                                           ',103,'Mortgage',NULL,NULL,NULL,0,0)
 ,('B78BF144-49AE-4C35-B687-5C7E93F67797                                                                                                                                                                                                                           ',104,'New Deal','stars',NULL,NULL,0,1)
 ,('91EADB6A-A46E-4CD5-9A46-9F17B54CDC88                                                                                                                                                                                                                           ',105,'Payment Detail ','search',NULL,NULL,0,1)
 ,('0DE9EB04-2827-4C2C-A15A-467E307D9A8B                                                                                                                                                                                                                           ',106,'Deeds Progress','home',NULL,NULL,0,1)
 ,('51E066C4-DA3C-4CDC-8F6D-4A612E54C7E0                                                                                                                                                                                                                           ',107,'Payment','vpn_key',NULL,NULL,0,1)
 ,('DC610837-5444-4E32-AA4E-495E857C2866                                                                                                                                                                                                                           ',108,'Archive','insert_drive_file',NULL,NULL,0,1)
 ,('3BACB5A0-ED6D-4574-A477-9562344EAFC9                                                                                                                                                                                                                           ',109,'Cancelled','transform',NULL,NULL,0,1)
 ,('C9D29299-CC15-422F-8C85-19BC80F18815                                                                                                                                                                                                                           ',110,'Registration','mode_edit',NULL,NULL,0,1)
 ,('90CE736C-DA90-4ED9-B7FA-56F3DC160705                                                                                                                                                                                                                           ',111,'Archived','done',NULL,NULL,0,1)
 ,('184A853B-995A-4CEC-890F-C3884643024E                                                                                                                                                                                                                           ',112,'Alerts',NULL,NULL,NULL,0,0)
 ,('D758757C-2F30-4B9B-AEBE-3D536AC5D91A                                                                                                                                                                                                                           ',113,'Email',NULL,NULL,NULL,0,0)
 ,('0958D1D9-6DF0-4CED-8F6E-95C051FE6500                                                                                                                                                                                                                           ',114,'SMS',NULL,NULL,NULL,0,0)
 ,('053252C3-64D3-44AA-8196-8530B54D0D8C                                                                                                                                                                                                                           ',115,'Letter',NULL,NULL,NULL,0,0)
 ,('EFE23E9D-E7C4-4F87-8B21-4170F2F5D94C                                                                                                                                                                                                                           ',116,'Generate Document',NULL,NULL,NULL,0,0)
 ,('A7CF9951-3004-4666-BE98-7E70E32FC848                                                                                                                                                                                                                           ',117,'Upload Document',NULL,NULL,NULL,0,0)
 ,('391E456E-5C1D-4431-B3DA-E3CFE147BF3A                                                                                                                                                                                                                           ',118,'Download Document',NULL,NULL,NULL,0,0)
 ,('443C3166-6715-49CB-BFA7-6A65272682DB                                                                                                                                                                                                                           ',119,'Payment',NULL,NULL,NULL,0,0)
 ,('8FE51E9E-2809-483A-9CEA-CBEF8E0564B8                                                                                                                                                                                                                           ',120,'ABSA Bonds',NULL,NULL,2000120,0,0)
 ,('EEFC65E9-8F44-4E78-8A39-A0E3BC0F660B                                                                                                                                                                                                                           ',121,'Seller Workflow',NULL,NULL,2000121,0,0)
) AS Source ([TaskGUID],[TaskID],[TaskName],[TaskDisplayIcon],[TaskControl],[TaskWorkflowID],[IsDeleted],[IsWorkflowTask])
ON (Target.[TaskID] = Source.[TaskID])
WHEN MATCHED AND (
	NULLIF(Source.[TaskGUID], Target.[TaskGUID]) IS NOT NULL OR NULLIF(Target.[TaskGUID], Source.[TaskGUID]) IS NOT NULL OR 
	NULLIF(Source.[TaskName], Target.[TaskName]) IS NOT NULL OR NULLIF(Target.[TaskName], Source.[TaskName]) IS NOT NULL OR 
	NULLIF(Source.[TaskDisplayIcon], Target.[TaskDisplayIcon]) IS NOT NULL OR NULLIF(Target.[TaskDisplayIcon], Source.[TaskDisplayIcon]) IS NOT NULL OR 
	NULLIF(Source.[TaskControl], Target.[TaskControl]) IS NOT NULL OR NULLIF(Target.[TaskControl], Source.[TaskControl]) IS NOT NULL OR 
	NULLIF(Source.[TaskWorkflowID], Target.[TaskWorkflowID]) IS NOT NULL OR NULLIF(Target.[TaskWorkflowID], Source.[TaskWorkflowID]) IS NOT NULL OR 
	NULLIF(Source.[IsWorkflowTask], Target.[IsWorkflowTask]) IS NOT NULL OR NULLIF(Target.[IsWorkflowTask], Source.[IsWorkflowTask]) IS NOT NULL OR 
	NULLIF(Source.[IsDeleted], Target.[IsDeleted]) IS NOT NULL OR NULLIF(Target.[IsDeleted], Source.[IsDeleted]) IS NOT NULL) THEN
 UPDATE SET
  [TaskGUID] = Source.[TaskGUID], 
  [TaskName] = Source.[TaskName], 
  [TaskDisplayIcon] = Source.[TaskDisplayIcon], 
  [TaskControl] = Source.[TaskControl], 
  [TaskWorkflowID] = Source.[TaskWorkflowID], 
  [IsDeleted] = Source.[IsDeleted],
  [IsWorkflowTask] = Source.[IsWorkflowTask]

WHEN NOT MATCHED BY TARGET THEN
 INSERT([TaskGUID],[TaskID],[TaskName],[TaskDisplayIcon],[TaskControl],[TaskWorkflowID],[IsDeleted],[IsWorkflowTask])
 VALUES(Source.[TaskGUID],Source.[TaskID],Source.[TaskName],Source.[TaskDisplayIcon],Source.[TaskControl],Source.[TaskWorkflowID],Source.[IsDeleted],Source.[IsWorkflowTask])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [Task]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[Task] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET NOCOUNT OFF
GO
/*----------------------------------------- END TASK -------------------------------------*/

/*----------------------------------------- WORKFLOWTASK ----------------------------------------*/
GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

MERGE INTO [WorkflowTask] AS Target
USING (VALUES
  ('1AC18EB6-C35E-4ED8-80F0-6BA730008B7B                                                                                                                                                                                                                           ',1100,1000,100,1,0)
 ,('DC3A04AC-A97E-44AC-9271-7AB34634AC64                                                                                                                                                                                                                           ',1101,1000,101,2,0)
 ,('473C2284-AFC7-458D-8BEA-70045E5359AC                                                                                                                                                                                                                           ',1102,1000,102,3,0)
 ,('A0E8F215-97B6-4C01-93BA-634210DEF7D8                                                                                                                                                                                                                           ',1103,1000,103,4,0)
 ,('1A38A663-D3E9-416D-A213-03BB16BDA23A                                                                                                                                                                                                                           ',2120,2000,120,1,0)
 ,('08E58660-754F-4914-9A40-14579EEF58D8                                                                                                                                                                                                                           ',2121,2000,121,2,0)
 ,('EE00B1BD-5613-4C47-9660-270ECA11858D                                                                                                                                                                                                                           ',4112,4000,112,1,0)
 ,('1E231008-1E29-43C6-92A9-3F9BEFAB1309                                                                                                                                                                                                                           ',5113,5000,113,1,0)
 ,('346610FE-6EDE-42E5-8E8B-E436B54D01E7                                                                                                                                                                                                                           ',5114,5000,114,2,0)
 ,('2A3FB5F6-EB68-4F08-99F4-9C9BC1001F10                                                                                                                                                                                                                           ',5115,5000,115,3,0)
 ,('0C91755F-B1C1-40CE-B768-C79F3A7FCD2D                                                                                                                                                                                                                           ',6116,6000,116,1,0)
 ,('9D43BC56-BFE3-4AFC-8DEE-C19D2670A049                                                                                                                                                                                                                           ',6117,6000,117,2,0)
 ,('B6B86D3C-F3F4-4A3F-B3CB-0894D804E27C                                                                                                                                                                                                                           ',6118,6000,118,3,0)
 ,('06DBD00B-CB3E-4FBC-B821-D5FD0B13A348                                                                                                                                                                                                                           ',7119,7000,119,1,0)
 ,('72065299-ACB2-45FF-A847-09B0FF252B60                                                                                                                                                                                                                           ',2000120104,2000120,104,1,0)
 ,('3299EAD7-01BD-41E6-BC88-8E4C92DD0CC6                                                                                                                                                                                                                           ',2000120105,2000120,105,2,0)
 ,('7F153A07-2DDE-4691-BB34-9ED0B9AC4185                                                                                                                                                                                                                           ',2000120106,2000120,106,3,0)
 ,('77BB2844-B49B-41FD-A8FF-7AB743FBAD65                                                                                                                                                                                                                           ',2000120107,2000120,107,4,0)
 ,('866A7D66-AF50-40BB-979B-36D548AA35D4                                                                                                                                                                                                                           ',2000120108,2000120,108,5,0)
 ,('991E91AD-D8E9-4A50-825D-AEACBD55166A                                                                                                                                                                                                                           ',2000120109,2000120,109,6,0)
) AS Source ([WorkflowTaskGUID],[WorkflowTaskID],[WorkflowID],[TaskID],[WorkflowTaskOrder],[IsDeleted])
ON (Target.[WorkflowTaskID] = Source.[WorkflowTaskID])
WHEN MATCHED AND (
	NULLIF(Source.[WorkflowTaskGUID], Target.[WorkflowTaskGUID]) IS NOT NULL OR NULLIF(Target.[WorkflowTaskGUID], Source.[WorkflowTaskGUID]) IS NOT NULL OR 
	NULLIF(Source.[WorkflowID], Target.[WorkflowID]) IS NOT NULL OR NULLIF(Target.[WorkflowID], Source.[WorkflowID]) IS NOT NULL OR 
	NULLIF(Source.[TaskID], Target.[TaskID]) IS NOT NULL OR NULLIF(Target.[TaskID], Source.[TaskID]) IS NOT NULL OR 
	NULLIF(Source.[WorkflowTaskOrder], Target.[WorkflowTaskOrder]) IS NOT NULL OR NULLIF(Target.[WorkflowTaskOrder], Source.[WorkflowTaskOrder]) IS NOT NULL OR 
	NULLIF(Source.[IsDeleted], Target.[IsDeleted]) IS NOT NULL OR NULLIF(Target.[IsDeleted], Source.[IsDeleted]) IS NOT NULL) THEN
 UPDATE SET
  [WorkflowTaskGUID] = Source.[WorkflowTaskGUID], 
  [WorkflowID] = Source.[WorkflowID], 
  [TaskID] = Source.[TaskID], 
  [WorkflowTaskOrder] = Source.[WorkflowTaskOrder], 
  [IsDeleted] = Source.[IsDeleted]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([WorkflowTaskGUID],[WorkflowTaskID],[WorkflowID],[TaskID],[WorkflowTaskOrder],[IsDeleted])
 VALUES(Source.[WorkflowTaskGUID],Source.[WorkflowTaskID],Source.[WorkflowID],Source.[TaskID],Source.[WorkflowTaskOrder],Source.[IsDeleted])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [WorkflowTask]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[WorkflowTask] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET NOCOUNT OFF
GO
/*----------------------------------------- END WORKFLOWTASK -------------------------------------*/


/*----------------------------------------- WORKFLOWACTION ---------------------------------------*/

GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

SET IDENTITY_INSERT [WorkflowAction] ON

MERGE INTO [WorkflowAction] AS Target
USING (VALUES
  (1,'Amend Deal',1,0)
 ,(2,'Verify Payee',1,0)
 ,(3,'Lodgement',1,0)
 ,(4,'Verify',1,0)
 ,(5,'Archive Deal',1,0)
 ,(6,'Cancel Deal (NTU)',1,0)
 ,(7,'Registration',1,0)
 ,(8,'Release',1,0)
 ,(9,'Perfected',1,0)
 ,(45,'Register Deal',1,0)
 ,(46,'Swift',1,0)
 ,(150,'Add Fee',1,0)
) AS Source ([ID],[DisplayName],[IsActive],[IsDeleted])
ON (Target.[ID] = Source.[ID])
WHEN MATCHED AND (
	NULLIF(Source.[DisplayName], Target.[DisplayName]) IS NOT NULL OR NULLIF(Target.[DisplayName], Source.[DisplayName]) IS NOT NULL OR 
	NULLIF(Source.[IsActive], Target.[IsActive]) IS NOT NULL OR NULLIF(Target.[IsActive], Source.[IsActive]) IS NOT NULL OR 
	NULLIF(Source.[IsDeleted], Target.[IsDeleted]) IS NOT NULL OR NULLIF(Target.[IsDeleted], Source.[IsDeleted]) IS NOT NULL) THEN
 UPDATE SET
  [DisplayName] = Source.[DisplayName], 
  [IsActive] = Source.[IsActive], 
  [IsDeleted] = Source.[IsDeleted]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([ID],[DisplayName],[IsActive],[IsDeleted])
 VALUES(Source.[ID],Source.[DisplayName],Source.[IsActive],Source.[IsDeleted])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [WorkflowAction]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[WorkflowAction] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET IDENTITY_INSERT [WorkflowAction] OFF
GO
SET NOCOUNT OFF
GO


/*-------------------------------------- END WORKFLOWACTION ---------------------------------------*/


/*----------------------------------------- WORKFLOWACTIONMAP ----------------------------------*/


GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

SET IDENTITY_INSERT [WorkflowActionMap] ON

MERGE INTO [WorkflowActionMap] AS Target
USING (VALUES
  (1,1,2000120104,1,NULL,'2016-08-17T10:31:22.067',NULL,0,1)
 ,(2,2,2000120105,1,NULL,'2016-10-25T16:15:01.263',NULL,0,1)
 ,(3,3,2000120106,1,NULL,'2016-10-25T16:15:01.263',NULL,0,1)
 ,(4,7,2000120106,1,NULL,'2016-10-25T16:15:01.263',NULL,0,1)
 ,(5,4,2000120107,1,NULL,'2016-10-25T16:15:01.263',NULL,0,1)
 ,(6,8,2000120107,1,NULL,'2016-10-25T16:15:01.263',NULL,0,1)
 ,(7,9,2000120107,1,NULL,'2016-10-25T16:15:01.263',NULL,0,1)
 ,(8,5,2000120108,1,NULL,'2016-10-25T16:15:01.263',NULL,0,1)
 ,(9,6,2000120109,1,NULL,'2016-10-25T16:15:01.263',NULL,0,1)
 ,(500,150,7119,1,NULL,'2016-10-25T16:15:01.263',NULL,0,1)

) AS Source ([ID],[WorkflowActionID],[WorkflowTaskID],[AllowAttachments],[ParticipantTypeID],[DateCreated],[CreatedByUserID],[IsDeleted],[IsMandatory])
ON (Target.[ID] = Source.[ID])
WHEN MATCHED AND (
	NULLIF(Source.[WorkflowActionID], Target.[WorkflowActionID]) IS NOT NULL OR NULLIF(Target.[WorkflowActionID], Source.[WorkflowActionID]) IS NOT NULL OR 
	NULLIF(Source.[WorkflowTaskID], Target.[WorkflowTaskID]) IS NOT NULL OR NULLIF(Target.[WorkflowTaskID], Source.[WorkflowTaskID]) IS NOT NULL OR 
	NULLIF(Source.[AllowAttachments], Target.[AllowAttachments]) IS NOT NULL OR NULLIF(Target.[AllowAttachments], Source.[AllowAttachments]) IS NOT NULL OR 
	NULLIF(Source.[ParticipantTypeID], Target.[ParticipantTypeID]) IS NOT NULL OR NULLIF(Target.[ParticipantTypeID], Source.[ParticipantTypeID]) IS NOT NULL OR 
	NULLIF(Source.[DateCreated], Target.[DateCreated]) IS NOT NULL OR NULLIF(Target.[DateCreated], Source.[DateCreated]) IS NOT NULL OR 
	NULLIF(Source.[CreatedByUserID], Target.[CreatedByUserID]) IS NOT NULL OR NULLIF(Target.[CreatedByUserID], Source.[CreatedByUserID]) IS NOT NULL OR 
	NULLIF(Source.[IsDeleted], Target.[IsDeleted]) IS NOT NULL OR NULLIF(Target.[IsDeleted], Source.[IsDeleted]) IS NOT NULL OR 
	NULLIF(Source.[IsMandatory], Target.[IsMandatory]) IS NOT NULL OR NULLIF(Target.[IsMandatory], Source.[IsMandatory]) IS NOT NULL) THEN
 UPDATE SET
  [WorkflowActionID] = Source.[WorkflowActionID], 
  [WorkflowTaskID] = Source.[WorkflowTaskID], 
  [AllowAttachments] = Source.[AllowAttachments], 
  [ParticipantTypeID] = Source.[ParticipantTypeID], 
  [DateCreated] = Source.[DateCreated], 
  [CreatedByUserID] = Source.[CreatedByUserID], 
  [IsDeleted] = Source.[IsDeleted], 
  [IsMandatory] = Source.[IsMandatory]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([ID],[WorkflowActionID],[WorkflowTaskID],[AllowAttachments],[ParticipantTypeID],[DateCreated],[CreatedByUserID],[IsDeleted],[IsMandatory])
 VALUES(Source.[ID],Source.[WorkflowActionID],Source.[WorkflowTaskID],Source.[AllowAttachments],Source.[ParticipantTypeID],Source.[DateCreated],Source.[CreatedByUserID],Source.[IsDeleted],Source.[IsMandatory])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [WorkflowActionMap]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[WorkflowActionMap] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET IDENTITY_INSERT [WorkflowActionMap] OFF
GO
SET NOCOUNT OFF
GO

/*----------------------------------------- WORKFLOWACTIONMAP ----------------------------------*/


/*------------------------------------------ WORKFLOWACTIONVARIABLE ----------------------------*/

GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

SET IDENTITY_INSERT [WorkflowActionVariable] ON

MERGE INTO [WorkflowActionVariable] AS Target
USING (VALUES
  (1,1,1,0,0)
 ,(2,1,3,0,0)
 ,(3,1,5,0,0)

 ,(4,2,1,0,0)
 ,(5,2,3,0,0)
 ,(6,2,5,0,0)
 ,(7,2,2,0,0)

 ,(8,3,1,0,0)
 ,(9,3,3,0,0)
 ,(10,3,5,0,0)

 ,(11,7,1,0,0)
 ,(12,7,3,0,0)
 ,(13,7,5,0,0)

 ,(14,4,1,0,0)
 ,(15,4,3,0,0)
 ,(16,4,5,0,0)
 ,(17,4,2,0,0)
 
 ,(18,8,1,0,0)
 ,(19,8,3,0,0)
 ,(20,8,5,0,0)
 ,(21,8,2,0,0)

 ,(22,9,1,0,0)
 ,(23,9,3,0,0)
 ,(24,9,5,0,0)
 ,(25,9,2,0,0)

 ,(26,5,1,0,0)
 ,(27,5,3,0,0)
 ,(28,5,5,0,0)

 ,(29,6,1,0,0)
 ,(30,6,3,0,0)
 ,(31,6,5,0,0)

 ,(100,150,4,1,0)
 ,(101,150,1,1,0)
 ,(102,150,2,1,0)
 ,(103,150,3,1,0)

) AS Source ([ID],[WorkflowActionID],[WorkflowVariableID],[IsRequired],[IsDeleted])
ON (Target.[ID] = Source.[ID])
WHEN MATCHED AND (
	NULLIF(Source.[WorkflowActionID], Target.[WorkflowActionID]) IS NOT NULL OR NULLIF(Target.[WorkflowActionID], Source.[WorkflowActionID]) IS NOT NULL OR 
	NULLIF(Source.[WorkflowVariableID], Target.[WorkflowVariableID]) IS NOT NULL OR NULLIF(Target.[WorkflowVariableID], Source.[WorkflowVariableID]) IS NOT NULL OR 
	NULLIF(Source.[IsRequired], Target.[IsRequired]) IS NOT NULL OR NULLIF(Target.[IsRequired], Source.[IsRequired]) IS NOT NULL OR 
	NULLIF(Source.[IsDeleted], Target.[IsDeleted]) IS NOT NULL OR NULLIF(Target.[IsDeleted], Source.[IsDeleted]) IS NOT NULL) THEN
 UPDATE SET
  [WorkflowActionID] = Source.[WorkflowActionID], 
  [WorkflowVariableID] = Source.[WorkflowVariableID], 
  [IsRequired] = Source.[IsRequired], 
  [IsDeleted] = Source.[IsDeleted]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([ID],[WorkflowActionID],[WorkflowVariableID],[IsRequired],[IsDeleted])
 VALUES(Source.[ID],Source.[WorkflowActionID],Source.[WorkflowVariableID],Source.[IsRequired],Source.[IsDeleted])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [WorkflowActionVariable]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[WorkflowActionVariable] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET IDENTITY_INSERT [WorkflowActionVariable] OFF
GO
SET NOCOUNT OFF
GO

/*------------------------------------------ END WORKFLOWACTIONVARIABLE ----------------------------*/


/*----------------------------------------- WORKFLOWVARIABLE -----------------------------------*/
GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

SET IDENTITY_INSERT [WorkflowVariable] ON

MERGE INTO [WorkflowVariable] AS Target
USING (VALUES
  (1,1,'Date of event',0)
 ,(2,2,'Value',0)
 ,(3,3,'Comment',0)
 ,(4,4,'Type',0)
 ,(5,5,'File',0)
) AS Source ([ID],[VariableTypeID],[DisplayName],[IsDeleted])
ON (Target.[ID] = Source.[ID])
WHEN MATCHED AND (
	NULLIF(Source.[VariableTypeID], Target.[VariableTypeID]) IS NOT NULL OR NULLIF(Target.[VariableTypeID], Source.[VariableTypeID]) IS NOT NULL OR 
	NULLIF(Source.[DisplayName], Target.[DisplayName]) IS NOT NULL OR NULLIF(Target.[DisplayName], Source.[DisplayName]) IS NOT NULL OR 
	NULLIF(Source.[IsDeleted], Target.[IsDeleted]) IS NOT NULL OR NULLIF(Target.[IsDeleted], Source.[IsDeleted]) IS NOT NULL) THEN
 UPDATE SET
  [VariableTypeID] = Source.[VariableTypeID], 
  [DisplayName] = Source.[DisplayName], 
  [IsDeleted] = Source.[IsDeleted]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([ID],[VariableTypeID],[DisplayName],[IsDeleted])
 VALUES(Source.[ID],Source.[VariableTypeID],Source.[DisplayName],Source.[IsDeleted])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [WorkflowVariable]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[WorkflowVariable] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET IDENTITY_INSERT [WorkflowVariable] OFF
GO
SET NOCOUNT OFF
GO
/*----------------------------------------- END WORKFLOWVARIABLE -----------------------------------*/


/*----------------------------------------- VARIABLE TYPE -----------------------------------*/
GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

SET IDENTITY_INSERT [VariableType] ON

MERGE INTO [VariableType] AS Target
USING (VALUES
  (1,'Date','Date Time Control',1)
 ,(2,'Numeric','A Numeric entry ',2)
 ,(3,'Text','A Free text entry',NULL)
 ,(4,'Type','Type',NULL)
 ,(5,'File','File Upload',3)
) AS Source ([ID],[Type],[Description],[DefaultSortOrder])
ON (Target.[ID] = Source.[ID])
WHEN MATCHED AND (
	NULLIF(Source.[Type], Target.[Type]) IS NOT NULL OR NULLIF(Target.[Type], Source.[Type]) IS NOT NULL OR 
	NULLIF(Source.[Description], Target.[Description]) IS NOT NULL OR NULLIF(Target.[Description], Source.[Description]) IS NOT NULL OR 
	NULLIF(Source.[DefaultSortOrder], Target.[DefaultSortOrder]) IS NOT NULL OR NULLIF(Target.[DefaultSortOrder], Source.[DefaultSortOrder]) IS NOT NULL) THEN
 UPDATE SET
  [Type] = Source.[Type], 
  [Description] = Source.[Description], 
  [DefaultSortOrder] = Source.[DefaultSortOrder]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([ID],[Type],[Description],[DefaultSortOrder])
 VALUES(Source.[ID],Source.[Type],Source.[Description],Source.[DefaultSortOrder])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [VariableType]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[VariableType] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET IDENTITY_INSERT [VariableType] OFF
GO
SET NOCOUNT OFF
GO


/*----------------------------------------- END VARIABLE TYPE -----------------------------------*/

/*----------------------------------------- AccountType -----------------------------------*/
GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

MERGE INTO [AccountType] AS Target
USING (VALUES
  (10,'Savings Accounts','2015-05-13T00:00:00',NULL,0)
 ,(20,'Basic Checking Accounts','2015-05-13T00:00:00',NULL,0)
 ,(30,'Interest-Bearing Checking Accounts','2015-05-13T00:00:00',NULL,0)
 ,(40,'Money Market Deposit Accounts','2015-05-13T00:00:00',NULL,0)
 ,(50,'Certificates of Deposit ','2015-05-13T00:00:00',NULL,0)
) AS Source ([AccountTypeID],[Description],[DateCreated],[DateModified],[Deleted])
ON (Target.[AccountTypeID] = Source.[AccountTypeID])
WHEN MATCHED AND (
	NULLIF(Source.[Description], Target.[Description]) IS NOT NULL OR NULLIF(Target.[Description], Source.[Description]) IS NOT NULL OR 
	NULLIF(Source.[DateCreated], Target.[DateCreated]) IS NOT NULL OR NULLIF(Target.[DateCreated], Source.[DateCreated]) IS NOT NULL OR 
	NULLIF(Source.[DateModified], Target.[DateModified]) IS NOT NULL OR NULLIF(Target.[DateModified], Source.[DateModified]) IS NOT NULL OR 
	NULLIF(Source.[Deleted], Target.[Deleted]) IS NOT NULL OR NULLIF(Target.[Deleted], Source.[Deleted]) IS NOT NULL) THEN
 UPDATE SET
  [Description] = Source.[Description], 
  [DateCreated] = Source.[DateCreated], 
  [DateModified] = Source.[DateModified], 
  [Deleted] = Source.[Deleted]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([AccountTypeID],[Description],[DateCreated],[DateModified],[Deleted])
 VALUES(Source.[AccountTypeID],Source.[Description],Source.[DateCreated],Source.[DateModified],Source.[Deleted])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [AccountType]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[AccountType] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET NOCOUNT OFF
GO

/*----------------------------------------- END AccountType -----------------------------------*/


/*----------------------------------------- Province -----------------------------------*/
GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

SET IDENTITY_INSERT [Province] ON

MERGE INTO [Province] AS Target
USING (VALUES
  (1,4,'Badakhshan','2015-05-12T00:00:00',NULL,0)
 ,(3,4,'Badghis','2015-05-12T00:00:00',NULL,0)
 ,(7,1197,'Eastern Cape','2015-08-08T00:00:00',NULL,0)
 ,(9,1197,'Free State','2015-08-08T00:00:00',NULL,0)
 ,(10,1197,'Gauteng','2015-08-08T00:00:00',NULL,0)
 ,(11,1197,'North West','2015-08-08T00:00:00',NULL,0)
 ,(14,1197,'Northern Cape','2015-08-08T00:00:00',NULL,0)
 ,(15,1197,'Mpumalanga','2015-08-08T00:00:00',NULL,0)
 ,(16,1197,'KwaZulu-Natal','2015-08-08T00:00:00',NULL,0)
 ,(17,1197,'Limpopo','2015-08-08T00:00:00',NULL,0)
 ,(18,1197,'Republic of South Africa','2015-08-08T00:00:00',NULL,0)
 ,(33,1226,'Aberconwy and Colwyn','2016-09-09T00:00:00',NULL,0)
 ,(38,1226,'Aberdeen City','2016-09-09T00:00:00',NULL,0)
 ,(42,1226,'Aberdeenshire','2016-09-09T00:00:00',NULL,0)
 ,(44,1226,'Buckinghamshire','2016-09-09T00:00:00',NULL,0)
 ,(47,1226,'City of Bristol','2016-09-09T00:00:00',NULL,0)
 ,(48,1226,'Conwy','2016-09-09T00:00:00',NULL,0)
 ,(50,1226,'Dumfries and Galloway','2016-09-09T00:00:00',NULL,0)
 ,(52,1226,'East Ayrshire','2016-09-09T00:00:00',NULL,0)
 ,(53,1226,'East Riding Yorkshire','2016-09-09T00:00:00',NULL,0)
 ,(54,1226,'Flintshire','2016-09-09T00:00:00','2016-09-09T00:00:00',0)
 ,(55,1226,'Greater London','2016-09-09T00:00:00',NULL,0)
 ,(56,1226,'Greater Manchester','2016-09-09T00:00:00',NULL,0)
 ,(57,1226,'Gwent','2016-09-09T00:00:00',NULL,0)
 ,(59,1226,'Hampshire','2016-09-09T00:00:00',NULL,0)
 ,(60,1226,'Highlands','2016-09-09T00:00:00',NULL,0)
 ,(62,1226,'Isle of Man','2016-09-09T00:00:00',NULL,0)
 ,(63,1226,'Isle of Wight','2016-09-09T00:00:00',NULL,0)
 ,(64,1226,'Kent','2016-09-09T00:00:00',NULL,0)
 ,(65,1226,'Kincardinshire','2016-09-09T00:00:00',NULL,0)
 ,(67,1226,'Lanarkshire','2016-09-09T00:00:00',NULL,0)
 ,(68,1226,'Lancashire','2016-09-09T00:00:00',NULL,0)
 ,(69,1226,'Merseyside','2016-09-09T00:00:00',NULL,0)
 ,(70,1226,'Newport','2016-09-09T00:00:00',NULL,0)
 ,(71,1226,'Norfolk','2016-09-09T00:00:00',NULL,0)
 ,(72,1226,'Northumberland','2016-09-09T00:00:00',NULL,0)
 ,(73,1226,'Nottinghamshire','2016-09-09T00:00:00',NULL,0)
 ,(74,1226,'Oxfordshire','2016-09-09T00:00:00',NULL,0)
 ,(75,1226,'Pembrokeshire','2016-09-09T00:00:00',NULL,0)
 ,(76,1226,'Rutland','2016-09-09T00:00:00',NULL,0)
 ,(77,1226,'Scottish Borders','2016-09-09T00:00:00',NULL,0)
 ,(79,1226,'Shetland','2016-09-09T00:00:00',NULL,0)
 ,(80,1226,'Tyrone','2016-09-09T00:00:00',NULL,0)
 ,(81,1226,'York','2016-09-09T00:00:00',NULL,0)
) AS Source ([ProvinceID],[CountryID],[Description],[DateCreated],[DateModified],[Deleted])
ON (Target.[ProvinceID] = Source.[ProvinceID])
WHEN MATCHED AND (
	NULLIF(Source.[CountryID], Target.[CountryID]) IS NOT NULL OR NULLIF(Target.[CountryID], Source.[CountryID]) IS NOT NULL OR 
	NULLIF(Source.[Description], Target.[Description]) IS NOT NULL OR NULLIF(Target.[Description], Source.[Description]) IS NOT NULL OR 
	NULLIF(Source.[DateCreated], Target.[DateCreated]) IS NOT NULL OR NULLIF(Target.[DateCreated], Source.[DateCreated]) IS NOT NULL OR 
	NULLIF(Source.[DateModified], Target.[DateModified]) IS NOT NULL OR NULLIF(Target.[DateModified], Source.[DateModified]) IS NOT NULL OR 
	NULLIF(Source.[Deleted], Target.[Deleted]) IS NOT NULL OR NULLIF(Target.[Deleted], Source.[Deleted]) IS NOT NULL) THEN
 UPDATE SET
  [CountryID] = Source.[CountryID], 
  [Description] = Source.[Description], 
  [DateCreated] = Source.[DateCreated], 
  [DateModified] = Source.[DateModified], 
  [Deleted] = Source.[Deleted]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([ProvinceID],[CountryID],[Description],[DateCreated],[DateModified],[Deleted])
 VALUES(Source.[ProvinceID],Source.[CountryID],Source.[Description],Source.[DateCreated],Source.[DateModified],Source.[Deleted])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [Province]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[Province] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET IDENTITY_INSERT [Province] OFF
GO
SET NOCOUNT OFF
GO

/*----------------------------------------- END Province -----------------------------------*/

/*----------------------------------------- SizeType -----------------------------------*/
GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

SET IDENTITY_INSERT [SizeType] ON

MERGE INTO [SizeType] AS Target
USING (VALUES
  (2,'Meter','2015-05-28T00:00:00',NULL,0)
 ,(5,'Hectare','2015-05-28T00:00:00',NULL,0)
) AS Source ([SizeTypeID],[Description],[DateCreated],[DateModified],[Deleted])
ON (Target.[SizeTypeID] = Source.[SizeTypeID])
WHEN MATCHED AND (
	NULLIF(Source.[Description], Target.[Description]) IS NOT NULL OR NULLIF(Target.[Description], Source.[Description]) IS NOT NULL OR 
	NULLIF(Source.[DateCreated], Target.[DateCreated]) IS NOT NULL OR NULLIF(Target.[DateCreated], Source.[DateCreated]) IS NOT NULL OR 
	NULLIF(Source.[DateModified], Target.[DateModified]) IS NOT NULL OR NULLIF(Target.[DateModified], Source.[DateModified]) IS NOT NULL OR 
	NULLIF(Source.[Deleted], Target.[Deleted]) IS NOT NULL OR NULLIF(Target.[Deleted], Source.[Deleted]) IS NOT NULL) THEN
 UPDATE SET
  [Description] = Source.[Description], 
  [DateCreated] = Source.[DateCreated], 
  [DateModified] = Source.[DateModified], 
  [Deleted] = Source.[Deleted]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([SizeTypeID],[Description],[DateCreated],[DateModified],[Deleted])
 VALUES(Source.[SizeTypeID],Source.[Description],Source.[DateCreated],Source.[DateModified],Source.[Deleted])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [SizeType]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[SizeType] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET IDENTITY_INSERT [SizeType] OFF
GO
SET NOCOUNT OFF
GO

/*----------------------------------------- END SizeType -----------------------------------*/


/*----------------------------------------- DocumentVersion -----------------------------------*/
GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

SET IDENTITY_INSERT [DocumentVersion] ON

MERGE INTO [DocumentVersion] AS Target
USING (VALUES
  (1,1,'1.0','Client Care Letter - Welcome Pack.docx','','.docx','REPS_DocXML_ClientCareLetter','2016-06-09T00:00:00',4070,1,0,0)
 ,(2,1,'1.0','Mortgage Letter.docx',NULL,'.docx','REPS_DocXML_MortgageLetter','2016-06-09T00:00:00',4070,0,0,0)
 ,(3,1,'1.0',NULL,NULL,'',NULL,'2016-06-09T00:00:00',4070,1,0,0)
 ,(4,1,'1.0',NULL,NULL,'',NULL,'2016-06-09T00:00:00',4070,0,0,0)
 ,(5,1,'1.0',NULL,NULL,'',NULL,'2016-06-09T00:00:00',4070,0,0,0)
 ,(6,1,'1.0',NULL,NULL,'.docx',NULL,'2016-06-09T00:00:00',4070,1,0,0)
 ,(7,2,'1.0',NULL,NULL,'.docx',NULL,'2016-06-09T00:00:00',4070,1,0,0)
 ,(8,2,'1.0',NULL,NULL,NULL,NULL,'2016-07-02T00:00:00',4070,1,0,0)
 ,(9,2,'1.0','Fee Schedule.docx',NULL,'.docx',NULL,'2016-07-02T00:00:00',4070,1,1,0)
 ,(10,2,'1.0','Stamp Duty Letter.docx',NULL,'.docx',NULL,'2016-07-02T00:00:00',4070,1,1,0)
 ,(11,2,'1.0',NULL,NULL,NULL,NULL,'2016-07-02T00:00:00',4070,1,0,0)
 ,(12,3,'1.0',NULL,NULL,NULL,NULL,'2016-07-02T00:00:00',4070,1,0,0)
 ,(13,3,'1.0',NULL,NULL,NULL,NULL,'2016-07-02T00:00:00',4070,1,0,0)
 ,(14,3,'1.0',NULL,NULL,NULL,NULL,'2016-07-02T00:00:00',4070,1,0,0)
 ,(15,4,'1.0','Search Report Letter.docx',NULL,'.docx','REPS_DocXML_SearchReportLetter','2016-07-02T00:00:00',4070,1,0,0)
) AS Source ([ID],[DocumentTypeID],[VersionName],[TemplateFileName],[Comments],[MimeTypeID],[XMLStoredProc],[DateCreated],[CreatedByUserID],[eSignable],[IsStaticDoc],[IsDeleted])
ON (Target.[ID] = Source.[ID])
WHEN MATCHED AND (
	NULLIF(Source.[DocumentTypeID], Target.[DocumentTypeID]) IS NOT NULL OR NULLIF(Target.[DocumentTypeID], Source.[DocumentTypeID]) IS NOT NULL OR 
	NULLIF(Source.[VersionName], Target.[VersionName]) IS NOT NULL OR NULLIF(Target.[VersionName], Source.[VersionName]) IS NOT NULL OR 
	NULLIF(Source.[TemplateFileName], Target.[TemplateFileName]) IS NOT NULL OR NULLIF(Target.[TemplateFileName], Source.[TemplateFileName]) IS NOT NULL OR 
	NULLIF(Source.[Comments], Target.[Comments]) IS NOT NULL OR NULLIF(Target.[Comments], Source.[Comments]) IS NOT NULL OR 
	NULLIF(Source.[MimeTypeID], Target.[MimeTypeID]) IS NOT NULL OR NULLIF(Target.[MimeTypeID], Source.[MimeTypeID]) IS NOT NULL OR 
	NULLIF(Source.[XMLStoredProc], Target.[XMLStoredProc]) IS NOT NULL OR NULLIF(Target.[XMLStoredProc], Source.[XMLStoredProc]) IS NOT NULL OR 
	NULLIF(Source.[DateCreated], Target.[DateCreated]) IS NOT NULL OR NULLIF(Target.[DateCreated], Source.[DateCreated]) IS NOT NULL OR 
	NULLIF(Source.[CreatedByUserID], Target.[CreatedByUserID]) IS NOT NULL OR NULLIF(Target.[CreatedByUserID], Source.[CreatedByUserID]) IS NOT NULL OR 
	NULLIF(Source.[eSignable], Target.[eSignable]) IS NOT NULL OR NULLIF(Target.[eSignable], Source.[eSignable]) IS NOT NULL OR 
	NULLIF(Source.[IsStaticDoc], Target.[IsStaticDoc]) IS NOT NULL OR NULLIF(Target.[IsStaticDoc], Source.[IsStaticDoc]) IS NOT NULL OR 
	NULLIF(Source.[IsDeleted], Target.[IsDeleted]) IS NOT NULL OR NULLIF(Target.[IsDeleted], Source.[IsDeleted]) IS NOT NULL) THEN
 UPDATE SET
  [DocumentTypeID] = Source.[DocumentTypeID], 
  [VersionName] = Source.[VersionName], 
  [TemplateFileName] = Source.[TemplateFileName], 
  [Comments] = Source.[Comments], 
  [MimeTypeID] = Source.[MimeTypeID], 
  [XMLStoredProc] = Source.[XMLStoredProc], 
  [DateCreated] = Source.[DateCreated], 
  [CreatedByUserID] = Source.[CreatedByUserID], 
  [eSignable] = Source.[eSignable], 
  [IsStaticDoc] = Source.[IsStaticDoc], 
  [IsDeleted] = Source.[IsDeleted]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([ID],[DocumentTypeID],[VersionName],[TemplateFileName],[Comments],[MimeTypeID],[XMLStoredProc],[DateCreated],[CreatedByUserID],[eSignable],[IsStaticDoc],[IsDeleted])
 VALUES(Source.[ID],Source.[DocumentTypeID],Source.[VersionName],Source.[TemplateFileName],Source.[Comments],Source.[MimeTypeID],Source.[XMLStoredProc],Source.[DateCreated],Source.[CreatedByUserID],Source.[eSignable],Source.[IsStaticDoc],Source.[IsDeleted])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [DocumentVersion]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[DocumentVersion] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET IDENTITY_INSERT [DocumentVersion] OFF
GO
SET NOCOUNT OFF
GO
/*----------------------------------------- END DocumentVersion -----------------------------------*/

/*----------------------------------------- DocumentTemplate -----------------------------------*/
GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

SET IDENTITY_INSERT [DocumentTemplate] ON

MERGE INTO [DocumentTemplate] AS Target
USING (VALUES
  (1,'Client Care Letter','1',NULL,1,0,1)
 ,(2,'Mortgage Letter','2',NULL,1,0,1)
 ,(3,'Confirmation of Registration','3',NULL,1,0,0)
 ,(4,'ID Document','4',NULL,1,0,0)
 ,(5,'Proof of Address','5',NULL,1,0,0)
 ,(6,'Statement of Account','6',NULL,1,0,1)
 ,(7,'Title Letter','7',NULL,1,0,1)
 ,(8,'Memorandum of Sale','8',NULL,1,0,0)
 ,(9,'Schedule of Fees','9',NULL,1,0,0)
 ,(10,'Schedule of Stamp Duty','10',NULL,1,0,0)
 ,(11,'Transfer Document','11',NULL,1,0,0)
 ,(12,'Contract','12',NULL,1,0,0)
 ,(13,'Proof of Insurance','13',NULL,1,0,0)
 ,(14,'Confirmation of Registration','14',NULL,1,0,0)
 ,(15,'Search Report','15',NULL,1,0,1)
) AS Source ([ID],[TemplateDisplayName],[DocumentVersionID],[AttributeName],[IsActive],[IsDeleted],[IsDocfusionTemplate])
ON (Target.[ID] = Source.[ID])
WHEN MATCHED AND (
	NULLIF(Source.[TemplateDisplayName], Target.[TemplateDisplayName]) IS NOT NULL OR NULLIF(Target.[TemplateDisplayName], Source.[TemplateDisplayName]) IS NOT NULL OR 
	NULLIF(Source.[DocumentVersionID], Target.[DocumentVersionID]) IS NOT NULL OR NULLIF(Target.[DocumentVersionID], Source.[DocumentVersionID]) IS NOT NULL OR 
	NULLIF(Source.[AttributeName], Target.[AttributeName]) IS NOT NULL OR NULLIF(Target.[AttributeName], Source.[AttributeName]) IS NOT NULL OR 
	NULLIF(Source.[IsActive], Target.[IsActive]) IS NOT NULL OR NULLIF(Target.[IsActive], Source.[IsActive]) IS NOT NULL OR 
	NULLIF(Source.[IsDeleted], Target.[IsDeleted]) IS NOT NULL OR NULLIF(Target.[IsDeleted], Source.[IsDeleted]) IS NOT NULL OR 
	NULLIF(Source.[IsDocfusionTemplate], Target.[IsDocfusionTemplate]) IS NOT NULL OR NULLIF(Target.[IsDocfusionTemplate], Source.[IsDocfusionTemplate]) IS NOT NULL) THEN
 UPDATE SET
  [TemplateDisplayName] = Source.[TemplateDisplayName], 
  [DocumentVersionID] = Source.[DocumentVersionID], 
  [AttributeName] = Source.[AttributeName], 
  [IsActive] = Source.[IsActive], 
  [IsDeleted] = Source.[IsDeleted], 
  [IsDocfusionTemplate] = Source.[IsDocfusionTemplate]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([ID],[TemplateDisplayName],[DocumentVersionID],[AttributeName],[IsActive],[IsDeleted],[IsDocfusionTemplate])
 VALUES(Source.[ID],Source.[TemplateDisplayName],Source.[DocumentVersionID],Source.[AttributeName],Source.[IsActive],Source.[IsDeleted],Source.[IsDocfusionTemplate])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [DocumentTemplate]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[DocumentTemplate] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET IDENTITY_INSERT [DocumentTemplate] OFF
GO
SET NOCOUNT OFF
GO
/*----------------------------------------- END DocumentTemplate -----------------------------------*/

/*----------------------------------------- DocumentType -----------------------------------*/
GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

SET IDENTITY_INSERT [DocumentType] ON

MERGE INTO [DocumentType] AS Target
USING (VALUES
  (1,'Buyer Documents',1,'2016-06-09T00:00:00')
 ,(2,'Deal Documents',2,'2016-06-09T00:00:00')
 ,(3,'Mortgage Documents',3,'2016-06-09T00:00:00')
 ,(4,'Search Documents',4,'2016-07-02T00:00:00')
) AS Source ([ID],[Description],[OrderBy],[DateCreated])
ON (Target.[ID] = Source.[ID])
WHEN MATCHED AND (
	NULLIF(Source.[Description], Target.[Description]) IS NOT NULL OR NULLIF(Target.[Description], Source.[Description]) IS NOT NULL OR 
	NULLIF(Source.[OrderBy], Target.[OrderBy]) IS NOT NULL OR NULLIF(Target.[OrderBy], Source.[OrderBy]) IS NOT NULL OR 
	NULLIF(Source.[DateCreated], Target.[DateCreated]) IS NOT NULL OR NULLIF(Target.[DateCreated], Source.[DateCreated]) IS NOT NULL) THEN
 UPDATE SET
  [Description] = Source.[Description], 
  [OrderBy] = Source.[OrderBy], 
  [DateCreated] = Source.[DateCreated]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([ID],[Description],[OrderBy],[DateCreated])
 VALUES(Source.[ID],Source.[Description],Source.[OrderBy],Source.[DateCreated])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [DocumentType]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[DocumentType] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET IDENTITY_INSERT [DocumentType] OFF
GO
SET NOCOUNT OFF
GO
/*----------------------------------------- END DocumentType -----------------------------------*/

/*----------------------------------------- DocumentWorkflow -----------------------------------*/
GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

SET IDENTITY_INSERT [DocumentWorkflow] ON

MERGE INTO [DocumentWorkflow] AS Target
USING (VALUES
  (1,1,1,'2016-06-09T00:00:00',4020,0)
 ,(2,2,1,'2016-06-09T00:00:00',4020,0)
 ,(3,3,1,'2016-06-09T00:00:00',4020,0)
 ,(4,4,1,'2016-06-09T00:00:00',4020,0)
 ,(5,5,1,'2016-06-09T00:00:00',4020,0)
 ,(6,6,1,'2016-06-09T00:00:00',4020,0)
 ,(7,7,1,'2016-06-09T00:00:00',4020,0)
 ,(8,8,1,'2016-06-09T00:00:00',4020,0)
 ,(9,9,1,'2016-06-09T00:00:00',4020,0)
 ,(10,10,1,'2016-06-09T00:00:00',4020,0)
 ,(11,11,1,'2016-06-09T00:00:00',4020,0)
 ,(12,12,1,'2016-06-09T00:00:00',4020,0)
 ,(13,13,1,'2016-06-09T00:00:00',4020,0)
 ,(14,14,1,'2016-06-09T00:00:00',4020,0)
 ,(15,15,1,'2016-06-09T00:00:00',4020,0)
 ,(16,18,2,'2017-06-29T13:51:16.143',4076,0)
 ,(17,20,2,'2017-06-29T13:54:12.120',4076,1)
 ,(18,18,3,'2017-06-30T07:59:02.590',4076,0)
 ,(19,18,6,'2017-06-30T08:00:00.703',4076,0)
 ,(20,21,3,'2017-06-30T08:28:16.593',4076,0)
 ,(21,21,5,'2017-06-30T08:28:16.593',4076,0)
 ,(22,23,7,'2017-06-30T08:29:26.513',4076,0)
) AS Source ([ID],[DocumentVersionID],[WorkflowStepID],[DateCreated],[CreatedByUserID],[IsDeleted])
ON (Target.[ID] = Source.[ID])
WHEN MATCHED AND (
	NULLIF(Source.[DocumentVersionID], Target.[DocumentVersionID]) IS NOT NULL OR NULLIF(Target.[DocumentVersionID], Source.[DocumentVersionID]) IS NOT NULL OR 
	NULLIF(Source.[WorkflowStepID], Target.[WorkflowStepID]) IS NOT NULL OR NULLIF(Target.[WorkflowStepID], Source.[WorkflowStepID]) IS NOT NULL OR 
	NULLIF(Source.[DateCreated], Target.[DateCreated]) IS NOT NULL OR NULLIF(Target.[DateCreated], Source.[DateCreated]) IS NOT NULL OR 
	NULLIF(Source.[CreatedByUserID], Target.[CreatedByUserID]) IS NOT NULL OR NULLIF(Target.[CreatedByUserID], Source.[CreatedByUserID]) IS NOT NULL OR 
	NULLIF(Source.[IsDeleted], Target.[IsDeleted]) IS NOT NULL OR NULLIF(Target.[IsDeleted], Source.[IsDeleted]) IS NOT NULL) THEN
 UPDATE SET
  [DocumentVersionID] = Source.[DocumentVersionID], 
  [WorkflowStepID] = Source.[WorkflowStepID], 
  [DateCreated] = Source.[DateCreated], 
  [CreatedByUserID] = Source.[CreatedByUserID], 
  [IsDeleted] = Source.[IsDeleted]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([ID],[DocumentVersionID],[WorkflowStepID],[DateCreated],[CreatedByUserID],[IsDeleted])
 VALUES(Source.[ID],Source.[DocumentVersionID],Source.[WorkflowStepID],Source.[DateCreated],Source.[CreatedByUserID],Source.[IsDeleted])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [DocumentWorkflow]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[DocumentWorkflow] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET IDENTITY_INSERT [DocumentWorkflow] OFF
GO
SET NOCOUNT OFF
GO
/*----------------------------------------- END DocumentWorkflow -----------------------------------*/

/*----------------------------------------- Entity -----------------------------------*/

GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

SET IDENTITY_INSERT [Entity] ON

MERGE INTO [Entity] AS Target
USING (VALUES
  (-1,0,'NullEntity','0','0','0','0',0,63254,'NullEntity@NullEntity.com',0,0,'0','0','0',0,0,'0',0,0,0,'3E3E950D-F7CC-455A-A73E-4EE2AABD3FB6                                                                                                                                                                                                                           ')
 ,(1,0,'e4','RegistrationNumber1','LegalName1','AlternateName','VatID',0,63254,'hramdhanee@e4international.com',0,0,'AddressLine1','AddressLine2','City',0,0,'00230',0,0,0,'1E5565F3-6381-402E-A11A-DDBA11016139                                                                                                                                                                                                                           ')
 ,(2,4,'BBC','RegistrationNumber1','LegalName1','AlternateName1',NULL,2125896,63254,'Email@.com',1,1,'AddressLine11','AddressLine21','City1',1,2,'00230',1,1,NULL,'531EABAC-FDFE-4C9F-8B0F-D8433875093D                                                                                                                                                                                                                           ')
 ,(3,4,'BANKER','RegistrationNumber1','LegalName1','AlternateName1','23424',2125896,63254,'Email@.com',1,20,'AddressLine11','AddressLine21','City1',1,4,'00230',1,1,NULL,'10DA4A5F-CDA9-4902-ABDE-5818A33BAF99                                                                                                                                                                                                                           ')
 ,(2013,5,'NedBank','1951/000009/06','Bramer corp','BBLC','123',860555111,860555112,'hramdhanee@e4international.com',1,20,'135 Rivonia Road','Nedbank Sandton','Sandown',1,4,'123',1,1,NULL,'E5C31E17-B597-4C72-96B6-AD346AF4AB43                                                                                                                                                                                                                           ')
 ,(3013,4,'COUZYNS INCORPORATED','3214234234','COUZYNS INCORPORATED','COUZYNS','12345',117880188,866452407,'Adriaan.Badenhors@couzyns.co.za',1,20,'191 Jan Smuts Avenue','Rosebank','Johannesburg',10,1197,'2196',1,1,NULL,'CCC4DC6E-5B7E-4467-8600-E08D3CCC2C1C                                                                                                                                                                                                                           ')
 ,(3014,4,'Linkin Park','1234567',NULL,NULL,NULL,12345678,NULL,NULL,1,10,'Somewhere I Belong',NULL,'Meteora',NULL,4,NULL,-1,0,0,'D72C04F1-3E07-4A67-8860-A10AC14D0BC5                                                                                                                                                                                                                           ')
 ,(3015,4,'To Delete','2345678',NULL,NULL,NULL,234567,NULL,NULL,1,20,'dfghjk',NULL,'asdfgh',NULL,4,NULL,-1,1,0,'673A2D7C-DC22-48B9-8F3A-14FA0ADC36C9                                                                                                                                                                                                                           ')
 ,(3016,5,'Delete','12345678',NULL,NULL,NULL,1234567,NULL,NULL,1,20,'Sdfgh',NULL,'asdfgh',NULL,4,NULL,-1,1,0,'B743C4C0-81BE-4E85-9D6E-9B62865561E1                                                                                                                                                                                                                           ')
 ,(3017,5,'Milford Academy Ltd Or Whatever That Was','6161',NULL,NULL,NULL,123456789,NULL,'averylongassemailaddress@justforyou.ohwell',1,20,'Asdf',NULL,'Asdf',NULL,4,NULL,1,1,0,'5F4ACA62-20F1-4E91-BDD3-79656F35E72D                                                                                                                                                                                                                           ')
 ,(3018,4,'test','789789','test',NULL,NULL,564896,NULL,NULL,1,10,'dfgfg',NULL,'dfgdfg',NULL,4,NULL,3014,1,0,'1CA735B5-D2F3-4BAA-9C26-410249327AC2                                                                                                                                                                                                                           ')
) AS Source ([EntityID],[OrganizationTypeID],[Name],[RegistrationNumber],[LegalName],[AlternateName],[VatID],[Telephone],[FaxNumber],[Email],[Verified],[AddressTypeID],[AddressLine1],[AddressLine2],[City],[ProvinceID],[CountryID],[PostalCode],[ParentEntityID],[Deleted],[DataVerification],[EntityGUID])
ON (Target.[EntityID] = Source.[EntityID])
WHEN MATCHED AND (
	NULLIF(Source.[OrganizationTypeID], Target.[OrganizationTypeID]) IS NOT NULL OR NULLIF(Target.[OrganizationTypeID], Source.[OrganizationTypeID]) IS NOT NULL OR 
	NULLIF(Source.[Name], Target.[Name]) IS NOT NULL OR NULLIF(Target.[Name], Source.[Name]) IS NOT NULL OR 
	NULLIF(Source.[RegistrationNumber], Target.[RegistrationNumber]) IS NOT NULL OR NULLIF(Target.[RegistrationNumber], Source.[RegistrationNumber]) IS NOT NULL OR 
	NULLIF(Source.[LegalName], Target.[LegalName]) IS NOT NULL OR NULLIF(Target.[LegalName], Source.[LegalName]) IS NOT NULL OR 
	NULLIF(Source.[AlternateName], Target.[AlternateName]) IS NOT NULL OR NULLIF(Target.[AlternateName], Source.[AlternateName]) IS NOT NULL OR 
	NULLIF(Source.[VatID], Target.[VatID]) IS NOT NULL OR NULLIF(Target.[VatID], Source.[VatID]) IS NOT NULL OR 
	NULLIF(Source.[Telephone], Target.[Telephone]) IS NOT NULL OR NULLIF(Target.[Telephone], Source.[Telephone]) IS NOT NULL OR 
	NULLIF(Source.[FaxNumber], Target.[FaxNumber]) IS NOT NULL OR NULLIF(Target.[FaxNumber], Source.[FaxNumber]) IS NOT NULL OR 
	NULLIF(Source.[Email], Target.[Email]) IS NOT NULL OR NULLIF(Target.[Email], Source.[Email]) IS NOT NULL OR 
	NULLIF(Source.[Verified], Target.[Verified]) IS NOT NULL OR NULLIF(Target.[Verified], Source.[Verified]) IS NOT NULL OR 
	NULLIF(Source.[AddressTypeID], Target.[AddressTypeID]) IS NOT NULL OR NULLIF(Target.[AddressTypeID], Source.[AddressTypeID]) IS NOT NULL OR 
	NULLIF(Source.[AddressLine1], Target.[AddressLine1]) IS NOT NULL OR NULLIF(Target.[AddressLine1], Source.[AddressLine1]) IS NOT NULL OR 
	NULLIF(Source.[AddressLine2], Target.[AddressLine2]) IS NOT NULL OR NULLIF(Target.[AddressLine2], Source.[AddressLine2]) IS NOT NULL OR 
	NULLIF(Source.[City], Target.[City]) IS NOT NULL OR NULLIF(Target.[City], Source.[City]) IS NOT NULL OR 
	NULLIF(Source.[ProvinceID], Target.[ProvinceID]) IS NOT NULL OR NULLIF(Target.[ProvinceID], Source.[ProvinceID]) IS NOT NULL OR 
	NULLIF(Source.[CountryID], Target.[CountryID]) IS NOT NULL OR NULLIF(Target.[CountryID], Source.[CountryID]) IS NOT NULL OR 
	NULLIF(Source.[PostalCode], Target.[PostalCode]) IS NOT NULL OR NULLIF(Target.[PostalCode], Source.[PostalCode]) IS NOT NULL OR 
	NULLIF(Source.[ParentEntityID], Target.[ParentEntityID]) IS NOT NULL OR NULLIF(Target.[ParentEntityID], Source.[ParentEntityID]) IS NOT NULL OR 
	NULLIF(Source.[Deleted], Target.[Deleted]) IS NOT NULL OR NULLIF(Target.[Deleted], Source.[Deleted]) IS NOT NULL OR 
	NULLIF(Source.[DataVerification], Target.[DataVerification]) IS NOT NULL OR NULLIF(Target.[DataVerification], Source.[DataVerification]) IS NOT NULL OR 
	NULLIF(Source.[EntityGUID], Target.[EntityGUID]) IS NOT NULL OR NULLIF(Target.[EntityGUID], Source.[EntityGUID]) IS NOT NULL) THEN
 UPDATE SET
  [OrganizationTypeID] = Source.[OrganizationTypeID], 
  [Name] = Source.[Name], 
  [RegistrationNumber] = Source.[RegistrationNumber], 
  [LegalName] = Source.[LegalName], 
  [AlternateName] = Source.[AlternateName], 
  [VatID] = Source.[VatID], 
  [Telephone] = Source.[Telephone], 
  [FaxNumber] = Source.[FaxNumber], 
  [Email] = Source.[Email], 
  [Verified] = Source.[Verified], 
  [AddressTypeID] = Source.[AddressTypeID], 
  [AddressLine1] = Source.[AddressLine1], 
  [AddressLine2] = Source.[AddressLine2], 
  [City] = Source.[City], 
  [ProvinceID] = Source.[ProvinceID], 
  [CountryID] = Source.[CountryID], 
  [PostalCode] = Source.[PostalCode], 
  [ParentEntityID] = Source.[ParentEntityID], 
  [Deleted] = Source.[Deleted], 
  [DataVerification] = Source.[DataVerification], 
  [EntityGUID] = Source.[EntityGUID]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([EntityID],[OrganizationTypeID],[Name],[RegistrationNumber],[LegalName],[AlternateName],[VatID],[Telephone],[FaxNumber],[Email],[Verified],[AddressTypeID],[AddressLine1],[AddressLine2],[City],[ProvinceID],[CountryID],[PostalCode],[ParentEntityID],[Deleted],[DataVerification],[EntityGUID])
 VALUES(Source.[EntityID],Source.[OrganizationTypeID],Source.[Name],Source.[RegistrationNumber],Source.[LegalName],Source.[AlternateName],Source.[VatID],Source.[Telephone],Source.[FaxNumber],Source.[Email],Source.[Verified],Source.[AddressTypeID],Source.[AddressLine1],Source.[AddressLine2],Source.[City],Source.[ProvinceID],Source.[CountryID],Source.[PostalCode],Source.[ParentEntityID],Source.[Deleted],Source.[DataVerification],Source.[EntityGUID])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [Entity]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[Entity] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET IDENTITY_INSERT [Entity] OFF
GO
SET NOCOUNT OFF
GO











--GO

----MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
----Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
----Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

--SET NOCOUNT ON

--SET IDENTITY_INSERT [Entity] ON

--MERGE INTO [Entity] AS Target
--USING (VALUES
--  (-1,0,'NullEntity','0','0','0','0',0,63254,'NullEntity@NullEntity.com',0,0,'0','0','0',0,0,'0',0,0,0,'3E3E950D-F7CC-455A-A73E-4EE2AABD3FB6                                                                                                                                                                                                                           ')
-- ,(1,0,'e4','RegistrationNumber1','LegalName1','AlternateName','VatID',0,63254,'hramdhanee@e4international.com',0,0,'AddressLine1','AddressLine2','City',0,0,'00230',0,0,0,'1E5565F3-6381-402E-A11A-DDBA11016139                                                                                                                                                                                                                           ')
-- ,(2,4,'BBC','RegistrationNumber1','LegalName1','AlternateName1',NULL,2125896,63254,'Email@.com',1,1,'AddressLine11','AddressLine21','City1',1,2,'00230',1,1,NULL,'531EABAC-FDFE-4C9F-8B0F-D8433875093D                                                                                                                                                                                                                           ')
-- ,(3,4,'BANKER','RegistrationNumber1','LegalName1','AlternateName1','23424',2125896,63254,'Email@.com',1,20,'AddressLine11','AddressLine21','City1',1,4,'00230',1,0,NULL,'10DA4A5F-CDA9-4902-ABDE-5818A33BAF99                                                                                                                                                                                                                           ')
-- ,(2013,5,'NedBank','1951/000009/06','Bramer corp','BBLC','123',860555111,860555112,'hramdhanee@e4international.com',1,20,'135 Rivonia Road','Nedbank Sandton','Sandown',1,4,'123',1,0,NULL,'E5C31E17-B597-4C72-96B6-AD346AF4AB43                                                                                                                                                                                                                           ')
-- ,(3013,4,'COUZYNS INCORPORATED','3214234234','COUZYNS INCORPORATED','COUZYNS','12345',117880188,866452407,'Adriaan.Badenhors@couzyns.co.za',1,20,'191 Jan Smuts Avenue','Rosebank','Johannesburg',10,1197,'2196',1,0,NULL,'CCC4DC6E-5B7E-4467-8600-E08D3CCC2C1C                                                                                                                                                                                                                           ')
--) AS Source ([EntityID],[OrganizationTypeID],[Name],[RegistrationNumber],[LegalName],[AlternateName],[VatID],[Telephone],[FaxNumber],[Email],[Verified],[AddressTypeID],[AddressLine1],[AddressLine2],[City],[ProvinceID],[CountryID],[PostalCode],[ParentEntityID],[Deleted],[DataVerification],[EntityGUID])
--ON (Target.[EntityID] = Source.[EntityID])
--WHEN MATCHED AND (
--	NULLIF(Source.[OrganizationTypeID], Target.[OrganizationTypeID]) IS NOT NULL OR NULLIF(Target.[OrganizationTypeID], Source.[OrganizationTypeID]) IS NOT NULL OR 
--	NULLIF(Source.[Name], Target.[Name]) IS NOT NULL OR NULLIF(Target.[Name], Source.[Name]) IS NOT NULL OR 
--	NULLIF(Source.[RegistrationNumber], Target.[RegistrationNumber]) IS NOT NULL OR NULLIF(Target.[RegistrationNumber], Source.[RegistrationNumber]) IS NOT NULL OR 
--	NULLIF(Source.[LegalName], Target.[LegalName]) IS NOT NULL OR NULLIF(Target.[LegalName], Source.[LegalName]) IS NOT NULL OR 
--	NULLIF(Source.[AlternateName], Target.[AlternateName]) IS NOT NULL OR NULLIF(Target.[AlternateName], Source.[AlternateName]) IS NOT NULL OR 
--	NULLIF(Source.[VatID], Target.[VatID]) IS NOT NULL OR NULLIF(Target.[VatID], Source.[VatID]) IS NOT NULL OR 
--	NULLIF(Source.[Telephone], Target.[Telephone]) IS NOT NULL OR NULLIF(Target.[Telephone], Source.[Telephone]) IS NOT NULL OR 
--	NULLIF(Source.[FaxNumber], Target.[FaxNumber]) IS NOT NULL OR NULLIF(Target.[FaxNumber], Source.[FaxNumber]) IS NOT NULL OR 
--	NULLIF(Source.[Email], Target.[Email]) IS NOT NULL OR NULLIF(Target.[Email], Source.[Email]) IS NOT NULL OR 
--	NULLIF(Source.[Verified], Target.[Verified]) IS NOT NULL OR NULLIF(Target.[Verified], Source.[Verified]) IS NOT NULL OR 
--	NULLIF(Source.[AddressTypeID], Target.[AddressTypeID]) IS NOT NULL OR NULLIF(Target.[AddressTypeID], Source.[AddressTypeID]) IS NOT NULL OR 
--	NULLIF(Source.[AddressLine1], Target.[AddressLine1]) IS NOT NULL OR NULLIF(Target.[AddressLine1], Source.[AddressLine1]) IS NOT NULL OR 
--	NULLIF(Source.[AddressLine2], Target.[AddressLine2]) IS NOT NULL OR NULLIF(Target.[AddressLine2], Source.[AddressLine2]) IS NOT NULL OR 
--	NULLIF(Source.[City], Target.[City]) IS NOT NULL OR NULLIF(Target.[City], Source.[City]) IS NOT NULL OR 
--	NULLIF(Source.[ProvinceID], Target.[ProvinceID]) IS NOT NULL OR NULLIF(Target.[ProvinceID], Source.[ProvinceID]) IS NOT NULL OR 
--	NULLIF(Source.[CountryID], Target.[CountryID]) IS NOT NULL OR NULLIF(Target.[CountryID], Source.[CountryID]) IS NOT NULL OR 
--	NULLIF(Source.[PostalCode], Target.[PostalCode]) IS NOT NULL OR NULLIF(Target.[PostalCode], Source.[PostalCode]) IS NOT NULL OR 
--	NULLIF(Source.[ParentEntityID], Target.[ParentEntityID]) IS NOT NULL OR NULLIF(Target.[ParentEntityID], Source.[ParentEntityID]) IS NOT NULL OR 
--	NULLIF(Source.[Deleted], Target.[Deleted]) IS NOT NULL OR NULLIF(Target.[Deleted], Source.[Deleted]) IS NOT NULL OR 
--	NULLIF(Source.[DataVerification], Target.[DataVerification]) IS NOT NULL OR NULLIF(Target.[DataVerification], Source.[DataVerification]) IS NOT NULL OR 
--	NULLIF(Source.[EntityGUID], Target.[EntityGUID]) IS NOT NULL OR NULLIF(Target.[EntityGUID], Source.[EntityGUID]) IS NOT NULL) THEN
-- UPDATE SET
--  [OrganizationTypeID] = Source.[OrganizationTypeID], 
--  [Name] = Source.[Name], 
--  [RegistrationNumber] = Source.[RegistrationNumber], 
--  [LegalName] = Source.[LegalName], 
--  [AlternateName] = Source.[AlternateName], 
--  [VatID] = Source.[VatID], 
--  [Telephone] = Source.[Telephone], 
--  [FaxNumber] = Source.[FaxNumber], 
--  [Email] = Source.[Email], 
--  [Verified] = Source.[Verified], 
--  [AddressTypeID] = Source.[AddressTypeID], 
--  [AddressLine1] = Source.[AddressLine1], 
--  [AddressLine2] = Source.[AddressLine2], 
--  [City] = Source.[City], 
--  [ProvinceID] = Source.[ProvinceID], 
--  [CountryID] = Source.[CountryID], 
--  [PostalCode] = Source.[PostalCode], 
--  [ParentEntityID] = Source.[ParentEntityID], 
--  [Deleted] = Source.[Deleted], 
--  [DataVerification] = Source.[DataVerification], 
--  [EntityGUID] = Source.[EntityGUID]
--WHEN NOT MATCHED BY TARGET THEN
-- INSERT([EntityID],[OrganizationTypeID],[Name],[RegistrationNumber],[LegalName],[AlternateName],[VatID],[Telephone],[FaxNumber],[Email],[Verified],[AddressTypeID],[AddressLine1],[AddressLine2],[City],[ProvinceID],[CountryID],[PostalCode],[ParentEntityID],[Deleted],[DataVerification],[EntityGUID])
-- VALUES(Source.[EntityID],Source.[OrganizationTypeID],Source.[Name],Source.[RegistrationNumber],Source.[LegalName],Source.[AlternateName],Source.[VatID],Source.[Telephone],Source.[FaxNumber],Source.[Email],Source.[Verified],Source.[AddressTypeID],Source.[AddressLine1],Source.[AddressLine2],Source.[City],Source.[ProvinceID],Source.[CountryID],Source.[PostalCode],Source.[ParentEntityID],Source.[Deleted],Source.[DataVerification],Source.[EntityGUID])
--WHEN NOT MATCHED BY SOURCE THEN 
-- DELETE;

--GO
--DECLARE @mergeError int
-- , @mergeCount int
--SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
--IF @mergeError != 0
-- BEGIN
-- PRINT 'ERROR OCCURRED IN MERGE FOR [Entity]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
-- END
--ELSE
-- BEGIN
-- PRINT '[Entity] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
-- END
--GO

--SET IDENTITY_INSERT [Entity] OFF
--GO
--SET NOCOUNT OFF
--GO

/*-----------------------------------------END  Entity -----------------------------------*/


/*----------------------------------------- BankorCreditUnion -----------------------------------*/
GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

SET IDENTITY_INSERT [BankorCreditUnion] ON

MERGE INTO [BankorCreditUnion] AS Target
USING (VALUES
  (3,1,'NEDBANK LIMITED','198765','NEDSZAJJ','2015-05-13T00:00:00','2015-10-07T08:58:43.980',0)
 ,(7,2,'ABVEST ASSOCIATES LTD','2','ABVSZAJJXXX','2015-05-13T00:00:00',NULL,0)
 ,(8,2,'Swiss','SWI9328473','SW3','2015-05-28T13:59:19.037',NULL,0)
 ,(9,1,'Mauritius commercial bank LTD','12389','MCBLMUMUXXX','2015-08-06T15:30:13.197','2015-12-17T11:23:06.637',0)
 ,(1009,1,'Absa','12345','SWJ123123','2016-02-16T17:32:06.377',NULL,0)
) AS Source ([BankID],[EntityID],[BankName],[UniversalSortCode],[SwiftCode],[DateCreated],[DateModified],[Deleted])
ON (Target.[BankID] = Source.[BankID])
WHEN MATCHED AND (
	NULLIF(Source.[EntityID], Target.[EntityID]) IS NOT NULL OR NULLIF(Target.[EntityID], Source.[EntityID]) IS NOT NULL OR 
	NULLIF(Source.[BankName], Target.[BankName]) IS NOT NULL OR NULLIF(Target.[BankName], Source.[BankName]) IS NOT NULL OR 
	NULLIF(Source.[UniversalSortCode], Target.[UniversalSortCode]) IS NOT NULL OR NULLIF(Target.[UniversalSortCode], Source.[UniversalSortCode]) IS NOT NULL OR 
	NULLIF(Source.[SwiftCode], Target.[SwiftCode]) IS NOT NULL OR NULLIF(Target.[SwiftCode], Source.[SwiftCode]) IS NOT NULL OR 
	NULLIF(Source.[DateCreated], Target.[DateCreated]) IS NOT NULL OR NULLIF(Target.[DateCreated], Source.[DateCreated]) IS NOT NULL OR 
	NULLIF(Source.[DateModified], Target.[DateModified]) IS NOT NULL OR NULLIF(Target.[DateModified], Source.[DateModified]) IS NOT NULL OR 
	NULLIF(Source.[Deleted], Target.[Deleted]) IS NOT NULL OR NULLIF(Target.[Deleted], Source.[Deleted]) IS NOT NULL) THEN
 UPDATE SET
  [EntityID] = Source.[EntityID], 
  [BankName] = Source.[BankName], 
  [UniversalSortCode] = Source.[UniversalSortCode], 
  [SwiftCode] = Source.[SwiftCode], 
  [DateCreated] = Source.[DateCreated], 
  [DateModified] = Source.[DateModified], 
  [Deleted] = Source.[Deleted]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([BankID],[EntityID],[BankName],[UniversalSortCode],[SwiftCode],[DateCreated],[DateModified],[Deleted])
 VALUES(Source.[BankID],Source.[EntityID],Source.[BankName],Source.[UniversalSortCode],Source.[SwiftCode],Source.[DateCreated],Source.[DateModified],Source.[Deleted])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [BankorCreditUnion]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[BankorCreditUnion] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET IDENTITY_INSERT [BankorCreditUnion] OFF
GO
SET NOCOUNT OFF
GO
/*----------------------------------------- END BankorCreditUnion -----------------------------------*/


/*----------------------------------------- TransactionStatus -----------------------------------*/

GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

SET IDENTITY_INSERT [TransactionStatus] ON

MERGE INTO [TransactionStatus] AS Target
USING (VALUES
  (1,'Email Sent','2016-06-27T15:27:50.133','2016-06-27T15:27:50.133',0)
 ,(4,'New','2016-01-01T00:00:00',NULL,0)
 ,(5,'Completed','2016-01-01T00:00:00',NULL,0)
 ,(6,'Remove','2016-01-01T00:00:00',NULL,0)
 ,(7,'Edit','2016-01-01T00:00:00',NULL,0)
) AS Source ([TransactionStatusID],[Description],[DateCreated],[DateModified],[Deleted])
ON (Target.[TransactionStatusID] = Source.[TransactionStatusID])
WHEN MATCHED AND (
	NULLIF(Source.[Description], Target.[Description]) IS NOT NULL OR NULLIF(Target.[Description], Source.[Description]) IS NOT NULL OR 
	NULLIF(Source.[DateCreated], Target.[DateCreated]) IS NOT NULL OR NULLIF(Target.[DateCreated], Source.[DateCreated]) IS NOT NULL OR 
	NULLIF(Source.[DateModified], Target.[DateModified]) IS NOT NULL OR NULLIF(Target.[DateModified], Source.[DateModified]) IS NOT NULL OR 
	NULLIF(Source.[Deleted], Target.[Deleted]) IS NOT NULL OR NULLIF(Target.[Deleted], Source.[Deleted]) IS NOT NULL) THEN
 UPDATE SET
  [Description] = Source.[Description], 
  [DateCreated] = Source.[DateCreated], 
  [DateModified] = Source.[DateModified], 
  [Deleted] = Source.[Deleted]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([TransactionStatusID],[Description],[DateCreated],[DateModified],[Deleted])
 VALUES(Source.[TransactionStatusID],Source.[Description],Source.[DateCreated],Source.[DateModified],Source.[Deleted])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [TransactionStatus]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[TransactionStatus] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET IDENTITY_INSERT [TransactionStatus] OFF
GO
SET NOCOUNT OFF
GO

/*----------------------------------------- END TransactionStatus -----------------------------------*/


/*----------------------------------------- TransactionType -----------------------------------*/

GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

MERGE INTO [TransactionType] AS Target
USING (VALUES
  (1,'Email','2016-06-27T10:08:31.577','2016-06-27T10:08:31.577',0)
 ,(3,'Workflow','2016-01-01T00:00:00',NULL,0)
 ,(10,'New','2016-01-01T00:00:00',NULL,0)
 ,(12,'Fee','2016-01-01T00:00:00',NULL,0)
 ,(20,'Edit','2016-01-01T00:00:00',NULL,0)
 ,(30,'Remove','2016-01-01T00:00:00',NULL,0)
 ,(40,'Completed','2016-01-01T00:00:00',NULL,0)
 ,(50,'Archived','2016-01-01T00:00:00',NULL,0)
) AS Source ([TransactionTypeID],[Description],[DateCreated],[DateModified],[Deleted])
ON (Target.[TransactionTypeID] = Source.[TransactionTypeID])
WHEN MATCHED AND (
	NULLIF(Source.[Description], Target.[Description]) IS NOT NULL OR NULLIF(Target.[Description], Source.[Description]) IS NOT NULL OR 
	NULLIF(Source.[DateCreated], Target.[DateCreated]) IS NOT NULL OR NULLIF(Target.[DateCreated], Source.[DateCreated]) IS NOT NULL OR 
	NULLIF(Source.[DateModified], Target.[DateModified]) IS NOT NULL OR NULLIF(Target.[DateModified], Source.[DateModified]) IS NOT NULL OR 
	NULLIF(Source.[Deleted], Target.[Deleted]) IS NOT NULL OR NULLIF(Target.[Deleted], Source.[Deleted]) IS NOT NULL) THEN
 UPDATE SET
  [Description] = Source.[Description], 
  [DateCreated] = Source.[DateCreated], 
  [DateModified] = Source.[DateModified], 
  [Deleted] = Source.[Deleted]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([TransactionTypeID],[Description],[DateCreated],[DateModified],[Deleted])
 VALUES(Source.[TransactionTypeID],Source.[Description],Source.[DateCreated],Source.[DateModified],Source.[Deleted])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [TransactionType]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[TransactionType] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET NOCOUNT OFF
GO

/*----------------------------------------- TransactionType -----------------------------------*/

/*----------------------------------------- COUNTRY -----------------------------------*/
GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

SET IDENTITY_INSERT [Country] ON

MERGE INTO [Country] AS Target
USING (VALUES
  (4,'ZA','South Africa','2015-05-21T13:15:32.490',NULL,0,'')
 --,(1000,'AG','----------------------------','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1001,'AI','Anguilla','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1002,'AG','Antigua & Barbuda','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1003,'AR','Argentina','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1004,'AA','Armenia','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1005,'AW','Aruba','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1006,'AU','Australia ','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1007,'AT','Austria','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1008,'AZ','Azerbaijan','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1009,'BS','Bahamas','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1010,'BH','Bahrain','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1011,'BD','Bangladesh','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1012,'BB','Barbados','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1013,'BY','Belarus','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1014,'BE','Belgium','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1015,'BZ','Belize','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1016,'BJ','Benin','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1017,'BM','Bermuda','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1018,'BT','Bhutan','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1019,'BO','Bolivia','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1020,'BA','Bosnia and Herzegovina','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1021,'BW','Botswana','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1022,'BV','Bouvet Island','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1023,'BR','Brazil','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1024,'IO','British lndian Ocean Territory','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1025,'BN','Brunei Darussalam','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1026,'BG','Bulgaria','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1027,'BF','Burkina Faso','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1028,'BI','Burundi','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1029,'KH','Cambodia','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1030,'CM','Cameroon','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1031,'CV','Cape Verde','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1032,'KY','Cayman Islands','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1033,'CF','Central African Republic','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1034,'TD','Chad','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1035,'CL','Chile','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1036,'CN','China','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1037,'CX','Christmas Island','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1038,'CC','Cocos (Keeling) Islands','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1039,'CO','Colombia','2015-05-21T13:15:32.467',NULL,0,NULL)
 ,(1040,'KM','Comoros','2015-05-21T13:15:32.467',NULL,0,NULL)
 ,(1041,'CG','Congo','2015-05-21T13:15:32.467',NULL,0,NULL)
 ,(1042,'CK','Cook Islands','2015-05-21T13:15:32.467',NULL,0,NULL)
 ,(1043,'CR','Costa Rica','2015-05-21T13:15:32.467',NULL,0,NULL)
 ,(1044,'HR','Croatia (Hrvatska)','2015-05-21T13:15:32.467',NULL,0,NULL)
 ,(1045,'CU','Cuba','2015-05-21T13:15:32.467',NULL,0,NULL)
 ,(1046,'CY','Cyprus','2015-05-21T13:15:32.467',NULL,0,NULL)
 ,(1047,'CZ','Czech Republic','2015-05-21T13:15:32.467',NULL,0,NULL)
 ,(1048,'DK','Denmark','2015-05-21T13:15:32.470',NULL,0,NULL)
 ,(1049,'DJ','Djibouti','2015-05-21T13:15:32.470',NULL,0,NULL)
 ,(1050,'DM','Dominica','2015-05-21T13:15:32.470',NULL,0,NULL)
 ,(1051,'DO','Dominican Republic','2015-05-21T13:15:32.470',NULL,0,NULL)
 ,(1052,'TP','East Timor','2015-05-21T13:15:32.470',NULL,0,NULL)
 ,(1053,'EC','Ecuador','2015-05-21T13:15:32.470',NULL,0,NULL)
 ,(1054,'EG','Egypt','2015-05-21T13:15:32.470',NULL,0,NULL)
 ,(1055,'SV','El Salvador','2015-05-21T13:15:32.470',NULL,0,NULL)
 ,(1056,'EN','England','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1057,'WA','Wales','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1058,'SC','Scotland','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1059,'IR','Ireland','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1060,'NI','Northern Ireland','2015-09-16T21:36:00.180',NULL,0,NULL)
 ,(1061,'GQ','Equatorial Guinea','2015-05-21T13:15:32.470',NULL,0,NULL)
 ,(1062,'ER','Eritrea','2015-05-21T13:15:32.470',NULL,0,NULL)
 ,(1063,'EE','Estonia','2015-05-21T13:15:32.470',NULL,0,NULL)
 ,(1064,'ET','Ethiopia','2015-05-21T13:15:32.470',NULL,0,NULL)
 ,(1065,'FK','Falkland Islands (Malvinas)','2015-05-21T13:15:32.470',NULL,0,NULL)
 ,(1066,'FO','Faroe Islands','2015-05-21T13:15:32.470',NULL,0,NULL)
 ,(1067,'FJ','Fiji','2015-05-21T13:15:32.470',NULL,0,NULL)
 ,(1068,'FI','Finland','2015-05-21T13:15:32.470',NULL,0,NULL)
 ,(1069,'FR','France','2015-05-21T13:15:32.470',NULL,0,NULL)
 ,(1070,'FX','France, Metropolitan','2015-05-21T13:15:32.470',NULL,0,NULL)
 ,(1071,'GF','French Guiana','2015-05-21T13:15:32.470',NULL,0,NULL)
 ,(1072,'PF','French Polynesia','2015-05-21T13:15:32.470',NULL,0,NULL)
 ,(1073,'TF','French Southern Territories','2015-05-21T13:15:32.470',NULL,0,NULL)
 ,(1074,'GA','Gabon','2015-05-21T13:15:32.470',NULL,0,NULL)
 ,(1075,'GM','Gambia','2015-05-21T13:15:32.470',NULL,0,NULL)
 ,(1076,'GE','Georgia','2015-05-21T13:15:32.470',NULL,0,NULL)
 ,(1077,'DE','Germany','2015-05-21T13:15:32.470',NULL,0,NULL)
 ,(1078,'GH','Ghana','2015-05-21T13:15:32.470',NULL,0,NULL)
 ,(1079,'GI','Gibraltar','2015-05-21T13:15:32.470',NULL,0,NULL)
 ,(1080,'GR','Greece','2015-05-21T13:15:32.470',NULL,0,NULL)
 ,(1081,'GL','Greenland','2015-05-21T13:15:32.470',NULL,0,NULL)
 ,(1082,'GD','Grenada','2015-05-21T13:15:32.470',NULL,0,NULL)
 ,(1083,'GP','Guadeloupe','2015-05-21T13:15:32.473',NULL,0,NULL)
 ,(1084,'GU','Guam','2015-05-21T13:15:32.473',NULL,0,NULL)
 ,(1085,'GT','Guatemala','2015-05-21T13:15:32.473',NULL,0,NULL)
 ,(1086,'GN','Guinea','2015-05-21T13:15:32.473',NULL,0,NULL)
 ,(1087,'GW','Guinea-Bissau','2015-05-21T13:15:32.473',NULL,0,NULL)
 ,(1088,'GY','Guyana','2015-05-21T13:15:32.473',NULL,0,NULL)
 ,(1089,'HT','Haiti','2015-05-21T13:15:32.473',NULL,0,NULL)
 ,(1090,'HM','Heard and Mc Donald Islands','2015-05-21T13:15:32.473',NULL,0,NULL)
 ,(1091,'HN','Honduras','2015-05-21T13:15:32.473',NULL,0,NULL)
 ,(1092,'HK','Hong Kong','2015-05-21T13:15:32.473',NULL,0,NULL)
 ,(1093,'HU','Hungary','2015-05-21T13:15:32.473',NULL,0,NULL)
 ,(1094,'IS','Iceland','2015-05-21T13:15:32.473',NULL,0,NULL)
 ,(1095,'IN','India','2015-05-21T13:15:32.473',NULL,0,NULL)
 ,(1096,'ID','Indonesia','2015-05-21T13:15:32.473',NULL,0,NULL)
 ,(1097,'IR','Iran (Islamic Republic of)','2015-05-21T13:15:32.473',NULL,0,NULL)
 ,(1098,'IQ','Iraq','2015-05-21T13:15:32.473',NULL,0,NULL)
 ,(1099,'IE','Ireland','2015-05-21T13:15:32.473',NULL,0,NULL)
 ,(1100,'IL','Israel','2015-05-21T13:15:32.473',NULL,0,NULL)
 ,(1101,'IT','Italy','2015-05-21T13:15:32.473',NULL,0,NULL)
 ,(1102,'CI','Ivory Coast','2015-05-21T13:15:32.473',NULL,0,NULL)
 ,(1103,'JM','Jamaica','2015-05-21T13:15:32.473',NULL,0,NULL)
 ,(1104,'JP','Japan','2015-05-21T13:15:32.473',NULL,0,NULL)
 ,(1105,'JO','Jordan','2015-05-21T13:15:32.477',NULL,0,NULL)
 ,(1106,'KZ','Kazakhstan','2015-05-21T13:15:32.477',NULL,0,NULL)
 ,(1107,'KE','Kenya','2015-05-21T13:15:32.477',NULL,0,NULL)
 ,(1108,'KI','Kiribati','2015-05-21T13:15:32.477',NULL,0,NULL)
 ,(1109,'KP','Korea, Democratic People''s Republic of','2015-05-21T13:15:32.477',NULL,0,NULL)
 ,(1110,'KR','Korea, Republic of','2015-05-21T13:15:32.477',NULL,0,NULL)
 ,(1111,'XK','Kosovo','2015-05-21T13:15:32.477',NULL,0,NULL)
 ,(1112,'KW','Kuwait','2015-05-21T13:15:32.477',NULL,0,NULL)
 ,(1113,'KG','Kyrgyzstan','2015-05-21T13:15:32.477',NULL,0,NULL)
 ,(1114,'LA','Lao People''s Democratic Republic','2015-05-21T13:15:32.477',NULL,0,NULL)
 ,(1115,'LV','Latvia','2015-05-21T13:15:32.477',NULL,0,NULL)
 ,(1116,'LB','Lebanon','2015-05-21T13:15:32.477',NULL,0,NULL)
 ,(1117,'LS','Lesotho','2015-05-21T13:15:32.477',NULL,0,NULL)
 ,(1118,'LR','Liberia','2015-05-21T13:15:32.477',NULL,0,NULL)
 ,(1119,'LY','Libyan Arab Jamahiriya','2015-05-21T13:15:32.477',NULL,0,NULL)
 ,(1120,'LI','Liechtenstein','2015-05-21T13:15:32.477',NULL,0,NULL)
 ,(1121,'LT','Lithuania','2015-05-21T13:15:32.477',NULL,0,NULL)
 ,(1122,'LU','Luxembourg','2015-05-21T13:15:32.477',NULL,0,NULL)
 ,(1123,'MO','Macau','2015-05-21T13:15:32.480',NULL,0,NULL)
 ,(1124,'MK','Macedonia','2015-05-21T13:15:32.480',NULL,0,NULL)
 ,(1125,'MG','Madagascar','2015-05-21T13:15:32.480',NULL,0,NULL)
 ,(1126,'MW','Malawi','2015-05-21T13:15:32.480',NULL,0,NULL)
 ,(1127,'MY','Malaysia','2015-05-21T13:15:32.480',NULL,0,NULL)
 ,(1128,'MV','Maldives','2015-05-21T13:15:32.480',NULL,0,NULL)
 ,(1129,'ML','Mali','2015-05-21T13:15:32.480',NULL,0,NULL)
 ,(1130,'MT','Malta','2015-05-21T13:15:32.480',NULL,0,NULL)
 ,(1131,'MH','Marshall Islands','2015-05-21T13:15:32.480',NULL,0,NULL)
 ,(1132,'MQ','Martinique','2015-05-21T13:15:32.480',NULL,0,NULL)
 ,(1133,'MR','Mauritania','2015-05-21T13:15:32.480',NULL,0,NULL)
 ,(1134,'1MU','Mauritius','2015-05-21T13:15:32.480',NULL,0,NULL)
 ,(1135,'TY','Mayotte','2015-05-21T13:15:32.480',NULL,0,NULL)
 ,(1136,'MX','Mexico','2015-05-21T13:15:32.480',NULL,0,NULL)
 ,(1137,'FM','Micronesia, Federated States of','2015-05-21T13:15:32.480',NULL,0,NULL)
 ,(1138,'MD','Moldova, Republic of','2015-05-21T13:15:32.480',NULL,0,NULL)
 ,(1139,'MC','Monaco','2015-05-21T13:15:32.480',NULL,0,NULL)
 ,(1140,'MN','Mongolia','2015-05-21T13:15:32.480',NULL,0,NULL)
 ,(1141,'ME','Montenegro','2015-05-21T13:15:32.480',NULL,0,NULL)
 ,(1142,'MS','Montserrat','2015-05-21T13:15:32.480',NULL,0,NULL)
 ,(1143,'MA','Morocco','2015-05-21T13:15:32.480',NULL,0,NULL)
 ,(1144,'MZ','Mozambique','2015-05-21T13:15:32.480',NULL,0,NULL)
 ,(1145,'MM','Myanmar','2015-05-21T13:15:32.480',NULL,0,NULL)
 ,(1146,'NA','Namibia','2015-05-21T13:15:32.480',NULL,0,NULL)
 ,(1147,'NR','Nauru','2015-05-21T13:15:32.480',NULL,0,NULL)
 ,(1148,'NP','Nepal','2015-05-21T13:15:32.480',NULL,0,NULL)
 ,(1149,'NL','Netherlands','2015-05-21T13:15:32.483',NULL,0,NULL)
 ,(1150,'AN','Netherlands Antilles','2015-05-21T13:15:32.483',NULL,0,NULL)
 ,(1151,'NC','New Caledonia','2015-05-21T13:15:32.483',NULL,0,NULL)
 ,(1152,'NZ','New Zealand','2015-05-21T13:15:32.483',NULL,0,NULL)
 ,(1153,'NI','Nicaragua','2015-05-21T13:15:32.483',NULL,0,NULL)
 ,(1154,'NE','Niger','2015-05-21T13:15:32.483',NULL,0,NULL)
 ,(1155,'NG','Nigeria','2015-05-21T13:15:32.483',NULL,0,NULL)
 ,(1156,'NU','Niue','2015-05-21T13:15:32.483',NULL,0,NULL)
 ,(1157,'NF','Norfork Island','2015-05-21T13:15:32.483',NULL,0,NULL)
 ,(1158,'MP','Northern Mariana Islands','2015-05-21T13:15:32.483',NULL,0,NULL)
 ,(1159,'NO','Norway','2015-05-21T13:15:32.483',NULL,0,NULL)
 ,(1160,'OM','Oman','2015-05-21T13:15:32.483',NULL,0,NULL)
 ,(1161,'PK','Pakistan','2015-05-21T13:15:32.483',NULL,0,NULL)
 ,(1162,'PW','Palau','2015-05-21T13:15:32.483',NULL,0,NULL)
 ,(1163,'PA','Panama','2015-05-21T13:15:32.483',NULL,0,NULL)
 ,(1164,'PG','Papua New Guinea','2015-05-21T13:15:32.483',NULL,0,NULL)
 ,(1165,'PY','Paraguay','2015-05-21T13:15:32.483',NULL,0,NULL)
 ,(1166,'PE','Peru','2015-05-21T13:15:32.483',NULL,0,NULL)
 ,(1167,'PH','Philippines','2015-05-21T13:15:32.483',NULL,0,NULL)
 ,(1168,'PN','Pitcairn','2015-05-21T13:15:32.483',NULL,0,NULL)
 ,(1169,'PL','Poland','2015-05-21T13:15:32.487',NULL,0,NULL)
 ,(1170,'PT','Portugal','2015-05-21T13:15:32.487',NULL,0,NULL)
 ,(1171,'PR','Puerto Rico','2015-05-21T13:15:32.487',NULL,0,NULL)
 ,(1172,'QA','Qatar','2015-05-21T13:15:32.487',NULL,0,NULL)
 ,(1173,'RE','Reunion','2015-05-21T13:15:32.487',NULL,0,NULL)
 ,(1174,'RO','Romania','2015-05-21T13:15:32.487',NULL,0,NULL)
 ,(1175,'RU','Russian Federation','2015-05-21T13:15:32.487',NULL,0,NULL)
 ,(1176,'RW','Rwanda','2015-05-21T13:15:32.487',NULL,0,NULL)
 ,(1177,'KN','Saint Kitts and Nevis','2015-05-21T13:15:32.487',NULL,0,NULL)
 ,(1178,'LC','Saint Lucia','2015-05-21T13:15:32.487',NULL,0,NULL)
 ,(1179,'VC','Saint Vincent and the Grenadines','2015-05-21T13:15:32.487',NULL,0,NULL)
 ,(1180,'WS','Samoa','2015-05-21T13:15:32.487',NULL,0,NULL)
 ,(1181,'SM','San Marino','2015-05-21T13:15:32.487',NULL,0,NULL)
 ,(1182,'ST','Sao Tome and Principe','2015-05-21T13:15:32.487',NULL,0,NULL)
 ,(1183,'SA','Saudi Arabia','2015-05-21T13:15:32.487',NULL,0,NULL)
 ,(1184,'SN','Senegal','2015-05-21T13:15:32.487',NULL,0,NULL)
 ,(1185,'RS','Serbia','2015-05-21T13:15:32.487',NULL,0,NULL)
 ,(1186,'SC','Seychelles','2015-05-21T13:15:32.487',NULL,0,NULL)
 ,(1187,'SL','Sierra Leone','2015-05-21T13:15:32.487',NULL,0,NULL)
 ,(1188,'SG','Singapore','2015-05-21T13:15:32.487',NULL,0,NULL)
 ,(1189,'SK','Slovakia','2015-05-21T13:15:32.487',NULL,0,NULL)
 ,(1190,'SI','Slovenia','2015-05-21T13:15:32.487',NULL,0,NULL)
 ,(1191,'SB','Solomon Islands','2015-05-21T13:15:32.487',NULL,0,NULL)
 ,(1192,'SO','Somalia','2015-05-21T13:15:32.490',NULL,0,NULL)
 ,(1193,'ZA','South Africa','2015-05-21T13:15:32.490',NULL,0,'')
 ,(1194,'GS','South Georgia South Sandwich Islands','2015-05-21T13:15:32.490',NULL,0,NULL)
 ,(1195,'ES','Spain','2015-05-21T13:15:32.490',NULL,0,NULL)
 ,(1196,'LK','Sri Lanka','2015-05-21T13:15:32.490',NULL,0,NULL)
 ,(1197,'SH','St. Helena','2015-05-21T13:15:32.490',NULL,0,NULL)
 ,(1198,'PM','St. Pierre and Miquelon','2015-05-21T13:15:32.490',NULL,0,NULL)
 ,(1199,'SD','Sudan','2015-05-21T13:15:32.490',NULL,0,NULL)
 ,(1200,'SR','Suriname','2015-05-21T13:15:32.490',NULL,0,NULL)
 ,(1201,'SJ','Svalbarn and Jan Mayen Islands','2015-05-21T13:15:32.490',NULL,0,NULL)
 ,(1202,'SZ','Swaziland','2015-05-21T13:15:32.490',NULL,0,NULL)
 ,(1203,'SE','Sweden','2015-05-21T13:15:32.490',NULL,0,NULL)
 ,(1204,'CH','Switzerland','2015-05-21T13:15:32.490',NULL,0,NULL)
 ,(1205,'SY','Syrian Arab Republic','2015-05-21T13:15:32.490',NULL,0,NULL)
 ,(1206,'TW','Taiwan','2015-05-21T13:15:32.490',NULL,0,NULL)
 ,(1207,'TJ','Tajikistan','2015-05-21T13:15:32.490',NULL,0,NULL)
 ,(1208,'TZ','Tanzania, United Republic of','2015-05-21T13:15:32.490',NULL,0,NULL)
 ,(1209,'TH','Thailand','2015-05-21T13:15:32.490',NULL,0,NULL)
 ,(1210,'TG','Togo','2015-05-21T13:15:32.490',NULL,0,NULL)
 ,(1211,'TK','Tokelau','2015-05-21T13:15:32.490',NULL,0,NULL)
 ,(1212,'TO','Tonga','2015-05-21T13:15:32.490',NULL,0,NULL)
 ,(1213,'TT','Trinidad and Tobago','2015-05-21T13:15:32.490',NULL,0,NULL)
 ,(1214,'TN','Tunisia','2015-05-21T13:15:32.490',NULL,0,NULL)
 ,(1215,'TR','Turkey','2015-05-21T13:15:32.490',NULL,0,NULL)
 ,(1216,'TM','Turkmenistan','2015-05-21T13:15:32.490',NULL,0,NULL)
 ,(1217,'TC','Turks and Caicos Islands','2015-05-21T13:15:32.490',NULL,0,NULL)
 ,(1218,'TV','Tuvalu','2015-05-21T13:15:32.490',NULL,0,NULL)
 ,(1219,'UG','Uganda','2015-05-21T13:15:32.490',NULL,0,NULL)
 ,(1220,'UA','Ukraine','2015-05-21T13:15:32.490',NULL,0,NULL)
 ,(1221,'AE','United Arab Emirates','2015-05-21T13:15:32.493',NULL,0,NULL)
 ,(1222,'GB','United Kingdom','2015-05-21T13:15:32.493',NULL,0,NULL)
 ,(1223,'UM','United States minor outlying islands','2015-05-21T13:15:32.493',NULL,0,NULL)
 ,(1224,'UY','Uruguay','2015-05-21T13:15:32.493',NULL,0,NULL)
 ,(1225,'UZ','Uzbekistan','2015-05-21T13:15:32.493',NULL,0,NULL)
 ,(1226,'VU','Vanuatu','2015-05-21T13:15:32.493',NULL,0,NULL)
 ,(1227,'VA','Vatican City State','2015-05-21T13:15:32.493',NULL,0,NULL)
 ,(1228,'VE','Venezuela','2015-05-21T13:15:32.493',NULL,0,NULL)
 ,(1229,'VN','Vietnam','2015-05-21T13:15:32.493',NULL,0,NULL)
 ,(1230,'VG','Virgin Islands (British)','2015-05-21T13:15:32.493',NULL,0,NULL)
 ,(1231,'VI','Virgin Islands (U.S.)','2015-05-21T13:15:32.493',NULL,0,NULL)
 ,(1232,'WF','Wallis and Futuna Islands','2015-05-21T13:15:32.493',NULL,0,NULL)
 ,(1233,'EH','Western Sahara','2015-05-21T13:15:32.493',NULL,0,NULL)
 ,(1234,'YE','Yemen','2015-05-21T13:15:32.493',NULL,0,NULL)
 ,(1235,'YU','Yugoslavia','2015-05-21T13:15:32.493',NULL,0,NULL)
 ,(1236,'ZR','Zaire','2015-05-21T13:15:32.493',NULL,0,NULL)
 ,(1237,'ZM','Zambia','2015-05-21T13:15:32.493',NULL,0,NULL)
 ,(1238,'ZW','Zimbabwe','2015-05-21T13:15:32.493',NULL,0,NULL)
) AS Source ([CountryID],[ISOCode],[Description],[DateCreated],[DateModified],[Deleted],[RegistrarApi])
ON (Target.[CountryID] = Source.[CountryID])
WHEN MATCHED AND (
	NULLIF(Source.[ISOCode], Target.[ISOCode]) IS NOT NULL OR NULLIF(Target.[ISOCode], Source.[ISOCode]) IS NOT NULL OR 
	NULLIF(Source.[Description], Target.[Description]) IS NOT NULL OR NULLIF(Target.[Description], Source.[Description]) IS NOT NULL OR 
	NULLIF(Source.[DateCreated], Target.[DateCreated]) IS NOT NULL OR NULLIF(Target.[DateCreated], Source.[DateCreated]) IS NOT NULL OR 
	NULLIF(Source.[DateModified], Target.[DateModified]) IS NOT NULL OR NULLIF(Target.[DateModified], Source.[DateModified]) IS NOT NULL OR 
	NULLIF(Source.[Deleted], Target.[Deleted]) IS NOT NULL OR NULLIF(Target.[Deleted], Source.[Deleted]) IS NOT NULL OR 
	NULLIF(Source.[RegistrarApi], Target.[RegistrarApi]) IS NOT NULL OR NULLIF(Target.[RegistrarApi], Source.[RegistrarApi]) IS NOT NULL) THEN
 UPDATE SET
  [ISOCode] = Source.[ISOCode], 
  [Description] = Source.[Description], 
  [DateCreated] = Source.[DateCreated], 
  [DateModified] = Source.[DateModified], 
  [Deleted] = Source.[Deleted], 
  [RegistrarApi] = Source.[RegistrarApi]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([CountryID],[ISOCode],[Description],[DateCreated],[DateModified],[Deleted],[RegistrarApi])
 VALUES(Source.[CountryID],Source.[ISOCode],Source.[Description],Source.[DateCreated],Source.[DateModified],Source.[Deleted],Source.[RegistrarApi])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [Country]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[Country] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET IDENTITY_INSERT [Country] OFF
GO
SET NOCOUNT OFF
GO

/*----------------------------------------- END COUNTRY -----------------------------------*/

/*----------------------------------------- User  -----------------------------------*/

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

--SET NOCOUNT ON

--SET IDENTITY_INSERT [User] ON

--MERGE INTO [User] AS Target
--USING (VALUES
--  (4072,1,1,N'Jako',N'Jako',N'57668796',N'32546376',1197,N'5768767866','1980-12-13',NULL,5463546,234234,5466546,N'Jvanrensburg@e4international.com',1,0,'2015-10-08T00:00:00','2015-10-23T13:40:19.650',1,1,NULL,NULL,N'1dbb3683-91f5-4e29-9001-23daa46005fe',NULL,120)
-- ,(4076,1,1,N'Hemant',N'Ramdhanee',N'44554545454',N'45454545454',4,N'45544554','2017-05-03',NULL,NULL,NULL,NULL,N'hramdhanee@e4international.com',NULL,0,'2015-10-09T00:00:00','2017-05-10T14:17:45.263',0,1,NULL,N'08cmR5a1DisoViHjxYuQO5HFt0Hrmplwqb4qu6H50ZSgQg2iocFlnsdXlLFb+ZZpPzRNMPUrbD0xO5sdLHPFQmzkOJita2ONoPnxwLlbBoMZQLX1PJsBWhoorPOdXngQa5Jtm+6mI+7XLQiJoidtlJ+VU7SjiYE9/+Ki+XHlU6n3NAXoo2AADD8zCBscJhj7VqvRDr+JinDJcUNY76mrpVTIOGKrtwZ0USxx+NhPtuHjS5y+VnnI4gEM5HjKVMU/mvvCN0Ozz2VcZ+meDW4L9Krr0FWt5Td1T6Xq45Ui5vqrfg3iiwuJOTzFHtttGmVFDzCuLdeJNTbqkKqyWTBWEA==',N'6e4d4157-883e-4a23-ac3f-8e3ed8c8ca2a',NULL,120)
-- ,(5077,1,1,N'Pierre',N'Aurel',N'12154',N'1226',1197,N'234324','1981-12-29',N'south',27828811730,234234234,27828811730,N'pierre@e4.co.za',1,0,'2016-07-02T00:00:00','2017-04-11T09:22:41.397',0,1,NULL,N'uP50eURBKWVaGcYcB6fOFlNtWz4/ylSO+G1+ZgrQmmgqCHUt99fDatXYBQCKWEIJ9jWnliG8t818zUa4x607QzUO5/qXO0V4u12ri9Hw6oPZ1AM3XiDm6zgY673aOWjmE328QFG8eS0jJ4/qHH1FKX5IM6KnbpLFnQKZFSBjTaf2ysubTDuRD3lRkIx+HGboGL2In+COLJUvLOLEVTaBacrawYafL2sr/Skq4mERp01Dq9HMWkFxWfttyl1s/G8bkZQVCmrLbmGfNq44RaLjEXQmTB7aZB9UhVGwHlMxaE/hUuFeYzYtb+t/9Og/vU9lQKAnLFCDiMFrmJDFB0VEFA==',N'7dce6436-038e-4b15-a6ca-55381a254222',N'5077-564328402.',120)
-- ,(5078,1,1,N'Nik',N'Steffny',N'654564',N'5156',1197,N'56165','1982-01-01',N'UK',27832989646,234234,27832989646,N'nik@e4.co.za',1,0,'2016-07-02T00:00:00','2017-04-11T09:22:37.150',0,1,NULL,NULL,N'30067ed8-cd08-4c8b-ab45-25e64d0def92',NULL,120)
-- ,(5079,1,1,N'Jan',N'Scholtz',N'351351',N'3131',1197,N'54','1982-01-01',N'Uk',27823224052,2342234233,27823224052,N'jan@globalbpo.co.uk',1,0,'2016-07-02T00:00:00',NULL,1,1,NULL,NULL,N'584ce453-ac78-4be4-ad9d-970dd8027e0e',NULL,120)
-- ,(5081,1,0,N'The Chainsmokers',N'Memories',N'656563289',N'312387979',1134,N'13649798','2017-04-04',N'Ebene',54545645,12345678,NULL,N'dereklcs@e4international.com',1,0,'2015-12-23T00:00:00','2017-04-17T13:27:42.990',0,1,NULL,N'qeHfVEEuTBWaV7Eq2ogFqTObyOSAccdaw9SQLATYxux9t+6R7pPO4y09Hkvq3Kicl4wh9MZRc3UJz3bHDBxM1HyHA+2Bbi4n2VVIJ7HP0XYv5BtKSaggexd+7qTO84Az2Pfglq/le6TwURgMMjW/iW2W4FW8yMCRPoTDmmay1xcKz/asVfrpvAbpFSZ1NofoVTdGLKZdPQLgA7lg2EkMB+kiOQRROlqxR2ayJzboGFu6GkbS4Y2MWHvsmQbtoVZ3m07xLRD7lgLzStwGnhe2hE/NdMrRP7kbKOR9ZjqwXVQYZXQTB8PjnHaBO6kcPTLEckLrNC0pVA2xqnpKs0GwtA==',N'736d8ef6-d195-44a7-8e4c-d85609f90e94',N'5081-20161028073814.png',120)
-- ,(5087,1,1,N'Kenny',N'Elaheebacus',N'1234',N'1234',1197,N'1234','1989-09-08',N'Ebene',1234,NULL,NULL,N'kelaheebacus@e4international.com',1,0,'1989-09-08T00:00:00','2017-04-11T09:22:29.093',0,1,NULL,N'xOycaH20fdK0C4bjb/cAbyQ/YY8QP/EjRkj9VQQd3hPE917gsi8pfpbz9yZ/YXUMsI3fAyD70QuBdblAuZPLgE4rT24qN+9qS00Duw6mD558ULYb0wZpJ051Tcw1SHvrLbSHHkQgMh6zayQrob4W+NMcUpuTvtw3l36SH1vd3FDEwGHqJZNof3e5CP9w2tiPsVsDcqzeW5dtuABGYTnSS4HpgPUOIAvFI6aHy1nD8RqiU/9cqwAD8GqVH+tAIdqgxDmwHN4PbN0ztwlUoWlJ0IxKTt64HLTOq7Wzueb/BCyzR6JRgR5/2Cuo0E33miqwXPqF6s7n9PzdLr65YCtjqA==',N'9f345929-0145-4c0f-ac7d-3e7132e5c877',NULL,120)
-- ,(5096,3,1,N'ovais',N'ahmed',N'32324',N'23432',4,N'23432','2017-05-01',NULL,NULL,NULL,NULL,N'oahmed@e4international.com',NULL,0,'1982-01-01T00:00:00','2017-05-11T09:55:36.920',0,1,NULL,N'2+OMHqyIXZI7716pjA93kvQJOcJc9Xq5L+Zeq94q6YpxgxiTvm0fJk9FLwRZkPyTQE0zrPzWuHwnRT8wQL0tSJEmkTjfCZJsbASbDtsWDverYFSUaC6GIgtQkegFysBA8d/c5XDxFEfdpgCXgBJTFUobcEvdIMWxT6C17OUkMDmaPKqsug2QtV0xq4KPZzSfKYRd1HkbxIFcp01ytcf24OR3V7N9my7Bwrclm+OLbrbC+JymfSLgE7fu9bLzvQ36/54b/0MmNQrJ7kw4D2Gei9iUt1ozX++0SHhNSJwstVjlSm9++Jpo/Wus1e9fIds6JMqmKb9u7TgiqPgM+vdgGg==',N'6dfc7bd4-73ca-43b6-96aa-fd6c66f0ab16',NULL,120)
-- ,(5097,1,1,N'Pravina',N'Barosah',N'B05118819875',N'124587',4,N'8663656','1998-04-05',NULL,4157963,NULL,NULL,N'pbarosah@e4international.com',NULL,0,'2017-04-11T00:00:00','2017-05-10T14:32:48.153',0,1,NULL,N'fTM1PfOD+mDpb1A6djaoxJarplRUsmm1YfN4U6qxWlXLEoKs5U0OaoWG7VtjuIAyz6UnMkBH13bs3kgXiUJFUEHsHnSyyHMHUYjdEROTB7fRgkDeOeeHEyRhB8T9XzHg7a/3SgPI2LHkKNqoDdHGr7y4yrmwn00f7rcm6B2DUMAFiR/HcIFwFYAVRAZWqCgY9DV4MSAqgqedZyJJSCGf1E+2slMC2WurLfDGZBDSZ1y4KIV3PWGLxuz+YTQfK7qGkpBRjZJpJEgLuzW9eMoGZOdMXleZbT8TgceMoPUZkqqFNZEtPTsHTMwLMZRvGktip2UrxxLO2+OJa+rA31MQjQ==',N'449b1b92-2bd6-4832-ad19-5c3c94e4bd80',NULL,120)
--) AS Source ([UserID],[EntityID],[TitleID],[GivenName],[FamilyName],[IdentityNumber],[PassportNumber],[PassportCountryID],[TaxID],[BirthDate],[BirthPlace],[Telephone],[MobileNumber],[FaxNumber],[Email],[JobTitleID],[Verified],[DateCreated],[DateModified],[Deleted],[HeaderTabToggle],[pwd],[TokenId],[AspNetUsersId],[ProfilePicture],[WorkflowID])
--ON (Target.[UserID] = Source.[UserID])
--WHEN MATCHED AND (
--	NULLIF(Source.[EntityID], Target.[EntityID]) IS NOT NULL OR NULLIF(Target.[EntityID], Source.[EntityID]) IS NOT NULL OR 
--	NULLIF(Source.[TitleID], Target.[TitleID]) IS NOT NULL OR NULLIF(Target.[TitleID], Source.[TitleID]) IS NOT NULL OR 
--	NULLIF(Source.[GivenName], Target.[GivenName]) IS NOT NULL OR NULLIF(Target.[GivenName], Source.[GivenName]) IS NOT NULL OR 
--	NULLIF(Source.[FamilyName], Target.[FamilyName]) IS NOT NULL OR NULLIF(Target.[FamilyName], Source.[FamilyName]) IS NOT NULL OR 
--	NULLIF(Source.[IdentityNumber], Target.[IdentityNumber]) IS NOT NULL OR NULLIF(Target.[IdentityNumber], Source.[IdentityNumber]) IS NOT NULL OR 
--	NULLIF(Source.[PassportNumber], Target.[PassportNumber]) IS NOT NULL OR NULLIF(Target.[PassportNumber], Source.[PassportNumber]) IS NOT NULL OR 
--	NULLIF(Source.[PassportCountryID], Target.[PassportCountryID]) IS NOT NULL OR NULLIF(Target.[PassportCountryID], Source.[PassportCountryID]) IS NOT NULL OR 
--	NULLIF(Source.[TaxID], Target.[TaxID]) IS NOT NULL OR NULLIF(Target.[TaxID], Source.[TaxID]) IS NOT NULL OR 
--	NULLIF(Source.[BirthDate], Target.[BirthDate]) IS NOT NULL OR NULLIF(Target.[BirthDate], Source.[BirthDate]) IS NOT NULL OR 
--	NULLIF(Source.[BirthPlace], Target.[BirthPlace]) IS NOT NULL OR NULLIF(Target.[BirthPlace], Source.[BirthPlace]) IS NOT NULL OR 
--	NULLIF(Source.[Telephone], Target.[Telephone]) IS NOT NULL OR NULLIF(Target.[Telephone], Source.[Telephone]) IS NOT NULL OR 
--	NULLIF(Source.[MobileNumber], Target.[MobileNumber]) IS NOT NULL OR NULLIF(Target.[MobileNumber], Source.[MobileNumber]) IS NOT NULL OR 
--	NULLIF(Source.[FaxNumber], Target.[FaxNumber]) IS NOT NULL OR NULLIF(Target.[FaxNumber], Source.[FaxNumber]) IS NOT NULL OR 
--	NULLIF(Source.[Email], Target.[Email]) IS NOT NULL OR NULLIF(Target.[Email], Source.[Email]) IS NOT NULL OR 
--	NULLIF(Source.[JobTitleID], Target.[JobTitleID]) IS NOT NULL OR NULLIF(Target.[JobTitleID], Source.[JobTitleID]) IS NOT NULL OR 
--	NULLIF(Source.[Verified], Target.[Verified]) IS NOT NULL OR NULLIF(Target.[Verified], Source.[Verified]) IS NOT NULL OR 
--	NULLIF(Source.[DateCreated], Target.[DateCreated]) IS NOT NULL OR NULLIF(Target.[DateCreated], Source.[DateCreated]) IS NOT NULL OR 
--	NULLIF(Source.[DateModified], Target.[DateModified]) IS NOT NULL OR NULLIF(Target.[DateModified], Source.[DateModified]) IS NOT NULL OR 
--	NULLIF(Source.[Deleted], Target.[Deleted]) IS NOT NULL OR NULLIF(Target.[Deleted], Source.[Deleted]) IS NOT NULL OR 
--	NULLIF(Source.[HeaderTabToggle], Target.[HeaderTabToggle]) IS NOT NULL OR NULLIF(Target.[HeaderTabToggle], Source.[HeaderTabToggle]) IS NOT NULL OR 
--	NULLIF(Source.[pwd], Target.[pwd]) IS NOT NULL OR NULLIF(Target.[pwd], Source.[pwd]) IS NOT NULL OR 
--	NULLIF(Source.[TokenId], Target.[TokenId]) IS NOT NULL OR NULLIF(Target.[TokenId], Source.[TokenId]) IS NOT NULL OR 
--	NULLIF(Source.[AspNetUsersId], Target.[AspNetUsersId]) IS NOT NULL OR NULLIF(Target.[AspNetUsersId], Source.[AspNetUsersId]) IS NOT NULL OR 
--	NULLIF(Source.[ProfilePicture], Target.[ProfilePicture]) IS NOT NULL OR NULLIF(Target.[ProfilePicture], Source.[ProfilePicture]) IS NOT NULL OR 
--	NULLIF(Source.[WorkflowID], Target.[WorkflowID]) IS NOT NULL OR NULLIF(Target.[WorkflowID], Source.[WorkflowID]) IS NOT NULL) THEN
-- UPDATE SET
--  [EntityID] = Source.[EntityID], 
--  [TitleID] = Source.[TitleID], 
--  [GivenName] = Source.[GivenName], 
--  [FamilyName] = Source.[FamilyName], 
--  [IdentityNumber] = Source.[IdentityNumber], 
--  [PassportNumber] = Source.[PassportNumber], 
--  [PassportCountryID] = Source.[PassportCountryID], 
--  [TaxID] = Source.[TaxID], 
--  [BirthDate] = Source.[BirthDate], 
--  [BirthPlace] = Source.[BirthPlace], 
--  [Telephone] = Source.[Telephone], 
--  [MobileNumber] = Source.[MobileNumber], 
--  [FaxNumber] = Source.[FaxNumber], 
--  [Email] = Source.[Email], 
--  [JobTitleID] = Source.[JobTitleID], 
--  [Verified] = Source.[Verified], 
--  [DateCreated] = Source.[DateCreated], 
--  [DateModified] = Source.[DateModified], 
--  [Deleted] = Source.[Deleted], 
--  [HeaderTabToggle] = Source.[HeaderTabToggle], 
--  [pwd] = Source.[pwd], 
--  [TokenId] = Source.[TokenId], 
--  [AspNetUsersId] = Source.[AspNetUsersId], 
--  [ProfilePicture] = Source.[ProfilePicture], 
--  [WorkflowID] = Source.[WorkflowID]
--WHEN NOT MATCHED BY TARGET THEN
-- INSERT([UserID],[EntityID],[TitleID],[GivenName],[FamilyName],[IdentityNumber],[PassportNumber],[PassportCountryID],[TaxID],[BirthDate],[BirthPlace],[Telephone],[MobileNumber],[FaxNumber],[Email],[JobTitleID],[Verified],[DateCreated],[DateModified],[Deleted],[HeaderTabToggle],[pwd],[TokenId],[AspNetUsersId],[ProfilePicture],[WorkflowID])
-- VALUES(Source.[UserID],Source.[EntityID],Source.[TitleID],Source.[GivenName],Source.[FamilyName],Source.[IdentityNumber],Source.[PassportNumber],Source.[PassportCountryID],Source.[TaxID],Source.[BirthDate],Source.[BirthPlace],Source.[Telephone],Source.[MobileNumber],Source.[FaxNumber],Source.[Email],Source.[JobTitleID],Source.[Verified],Source.[DateCreated],Source.[DateModified],Source.[Deleted],Source.[HeaderTabToggle],Source.[pwd],Source.[TokenId],Source.[AspNetUsersId],Source.[ProfilePicture],Source.[WorkflowID])
--WHEN NOT MATCHED BY SOURCE THEN 
-- DELETE
--;
--GO
--DECLARE @mergeError int
-- , @mergeCount int
--SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
--IF @mergeError != 0
-- BEGIN
-- PRINT 'ERROR OCCURRED IN MERGE FOR [User]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
-- END
--ELSE
-- BEGIN
-- PRINT '[User] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
-- END
--GO

--SET IDENTITY_INSERT [User] OFF
--GO
--SET NOCOUNT OFF
--GO

---------------------------------------------------------------New Version User ------------------------------------------------
--SET IDENTITY_INSERT [dbo].[User] ON 

--GO
--INSERT [dbo].[User] ([UserID], [EntityID], [TitleID], [GivenName], [FamilyName], [IdentityNumber], [PassportNumber], [PassportCountryID], [TaxID], [BirthDate], [BirthPlace], [Telephone], [MobileNumber], [FaxNumber], [Email], [JobTitleID], [Verified], [DateCreated], [DateModified], [Deleted], [HeaderTabToggle], [pwd], [TokenId], [AspNetUsersId], [ProfilePicture], [WorkflowID]) VALUES (4072, 1, 1, N'Jako', N'Jako', N'57668796', N'32546376', 1197, N'5768767866', CAST(N'1980-12-13' AS Date), NULL, CAST(5463546 AS Numeric(18, 0)), CAST(234234 AS Numeric(18, 0)), CAST(5466546 AS Numeric(18, 0)), N'Jvanrensburg@e4international.com', 1, 0, CAST(N'2015-10-08 00:00:00.000' AS DateTime), CAST(N'2015-10-23 13:40:19.650' AS DateTime), 1, 1, NULL, NULL, N'1dbb3683-91f5-4e29-9001-23daa46005fe', NULL, 120)
--GO
--INSERT [dbo].[User] ([UserID], [EntityID], [TitleID], [GivenName], [FamilyName], [IdentityNumber], [PassportNumber], [PassportCountryID], [TaxID], [BirthDate], [BirthPlace], [Telephone], [MobileNumber], [FaxNumber], [Email], [JobTitleID], [Verified], [DateCreated], [DateModified], [Deleted], [HeaderTabToggle], [pwd], [TokenId], [AspNetUsersId], [ProfilePicture], [WorkflowID]) VALUES (4076, 1, 1, N'Hemant', N'Ramdhanee', N'44554545454', N'45454545454', 4, N'45544554', CAST(N'2017-05-03' AS Date), NULL, NULL, NULL, NULL, N'hramdhanee@e4international.com', NULL, 0, CAST(N'2015-10-09 00:00:00.000' AS DateTime), CAST(N'2017-08-01 08:50:45.613' AS DateTime), 0, 1, NULL, N'ku4aF7PpYDH2RvWKOW5T+8zUYIb1ChwKxdw5b84br02JqLEVJ0UMtQxUlRMrTje3/5QrfeLxO07yOkmKswfZtA3q0o/TA8d0GdxNQ3uU/QUZDSLzqen5XkGgtWQr6R0doQkLJvIz4Qzxtn3HxgWAhThGNYQuYiVkVBYhhf81Kv2HDzoC9U36PNOp0UX6j1IeGt6qn9VJDuCjt8Sdlh9cmm8uswY9M2t4JwNW1VDuO7aYRdezutYHNCRJxHzJI++Vh4eYsEvX0FBzYiTMGVKQDljdxdVqbFECuoZh3QapLWBUa37FnwmZzhcBQeh+dDfbleA6ov27f58Ik/cQbv/98g==', N'6e4d4157-883e-4a23-ac3f-8e3ed8c8ca2a', NULL, 137)
--GO
--INSERT [dbo].[User] ([UserID], [EntityID], [TitleID], [GivenName], [FamilyName], [IdentityNumber], [PassportNumber], [PassportCountryID], [TaxID], [BirthDate], [BirthPlace], [Telephone], [MobileNumber], [FaxNumber], [Email], [JobTitleID], [Verified], [DateCreated], [DateModified], [Deleted], [HeaderTabToggle], [pwd], [TokenId], [AspNetUsersId], [ProfilePicture], [WorkflowID]) VALUES (5077, 1, 1, N'Pierre', N'Aurel', N'12154', N'1226', 1197, N'234324', CAST(N'1981-12-29' AS Date), N'south', CAST(27828811730 AS Numeric(18, 0)), CAST(234234234 AS Numeric(18, 0)), CAST(27828811730 AS Numeric(18, 0)), N'pierre@e4.co.za', 1, 0, CAST(N'2016-07-02 00:00:00.000' AS DateTime), CAST(N'2017-04-11 09:22:41.397' AS DateTime), 0, 1, NULL, N'uP50eURBKWVaGcYcB6fOFlNtWz4/ylSO+G1+ZgrQmmgqCHUt99fDatXYBQCKWEIJ9jWnliG8t818zUa4x607QzUO5/qXO0V4u12ri9Hw6oPZ1AM3XiDm6zgY673aOWjmE328QFG8eS0jJ4/qHH1FKX5IM6KnbpLFnQKZFSBjTaf2ysubTDuRD3lRkIx+HGboGL2In+COLJUvLOLEVTaBacrawYafL2sr/Skq4mERp01Dq9HMWkFxWfttyl1s/G8bkZQVCmrLbmGfNq44RaLjEXQmTB7aZB9UhVGwHlMxaE/hUuFeYzYtb+t/9Og/vU9lQKAnLFCDiMFrmJDFB0VEFA==', N'7dce6436-038e-4b15-a6ca-55381a254222', N'5077-564328402.', 120)
--GO
--INSERT [dbo].[User] ([UserID], [EntityID], [TitleID], [GivenName], [FamilyName], [IdentityNumber], [PassportNumber], [PassportCountryID], [TaxID], [BirthDate], [BirthPlace], [Telephone], [MobileNumber], [FaxNumber], [Email], [JobTitleID], [Verified], [DateCreated], [DateModified], [Deleted], [HeaderTabToggle], [pwd], [TokenId], [AspNetUsersId], [ProfilePicture], [WorkflowID]) VALUES (5078, 1, 1, N'Nik', N'Steffny', N'654564', N'5156', 1197, N'56165', CAST(N'1982-01-01' AS Date), N'UK', CAST(27832989646 AS Numeric(18, 0)), CAST(234234 AS Numeric(18, 0)), CAST(27832989646 AS Numeric(18, 0)), N'nik@e4.co.za', 1, 0, CAST(N'2016-07-02 00:00:00.000' AS DateTime), CAST(N'2017-04-11 09:22:37.150' AS DateTime), 0, 1, NULL, NULL, N'30067ed8-cd08-4c8b-ab45-25e64d0def92', NULL, 120)
--GO
--INSERT [dbo].[User] ([UserID], [EntityID], [TitleID], [GivenName], [FamilyName], [IdentityNumber], [PassportNumber], [PassportCountryID], [TaxID], [BirthDate], [BirthPlace], [Telephone], [MobileNumber], [FaxNumber], [Email], [JobTitleID], [Verified], [DateCreated], [DateModified], [Deleted], [HeaderTabToggle], [pwd], [TokenId], [AspNetUsersId], [ProfilePicture], [WorkflowID]) VALUES (5079, 1, 1, N'Jan', N'Scholtz', N'351351', N'3131', 1197, N'54', CAST(N'1982-01-01' AS Date), N'Uk', CAST(27823224052 AS Numeric(18, 0)), CAST(2342234233 AS Numeric(18, 0)), CAST(27823224052 AS Numeric(18, 0)), N'jan@globalbpo.co.uk', 1, 0, CAST(N'2016-07-02 00:00:00.000' AS DateTime), NULL, 1, 1, NULL, NULL, N'584ce453-ac78-4be4-ad9d-970dd8027e0e', NULL, 120)
--GO
--INSERT [dbo].[User] ([UserID], [EntityID], [TitleID], [GivenName], [FamilyName], [IdentityNumber], [PassportNumber], [PassportCountryID], [TaxID], [BirthDate], [BirthPlace], [Telephone], [MobileNumber], [FaxNumber], [Email], [JobTitleID], [Verified], [DateCreated], [DateModified], [Deleted], [HeaderTabToggle], [pwd], [TokenId], [AspNetUsersId], [ProfilePicture], [WorkflowID]) VALUES (5081, 1, 1, N'Derek', N'Lee', N'1234567890las-', N'312387979', 1134, N'13649798', CAST(N'2017-04-04' AS Date), N'Ebene', CAST(123456789 AS Numeric(18, 0)), NULL, NULL, N'dereklcs@e4international.com', 1, 0, CAST(N'2015-12-23 00:00:00.000' AS DateTime), CAST(N'2017-08-04 10:02:35.967' AS DateTime), 0, 1, NULL, N'tH/Yb92/g1zWa2GLf4EdOBLT0dXp1E6dkuk8JURJipK26Y/5qXoHvmy7jrNj2Yl4oKag9LI2QPjMpztxk7x+ZfyhrEk0pNb6xOeEqV8iQKGxj+FQb5+DY2Fw5E6JiuKkWzH/AUSbdNGsxdT4nFQjK/uAKtXMzYhyDHoRLTJeq40aKlsnU3udl67ydGkvIpKhHpmD9TiGYttPNaJiVYwE0OKXa3vwJOtmYlOIr9/B531d5ww8bNufNRMX2EatPJPirlWOkTDKqdH3J8E+TWKHjjX0bLKLHVF3JEuS8UdAaswtvBGo4fO9I7caZtCYtIiqIc3kDlycXahvRiuNcFyPCw==', N'736d8ef6-d195-44a7-8e4c-d85609f90e94', N'5081-20161028073814.png', 122)
--GO
--INSERT [dbo].[User] ([UserID], [EntityID], [TitleID], [GivenName], [FamilyName], [IdentityNumber], [PassportNumber], [PassportCountryID], [TaxID], [BirthDate], [BirthPlace], [Telephone], [MobileNumber], [FaxNumber], [Email], [JobTitleID], [Verified], [DateCreated], [DateModified], [Deleted], [HeaderTabToggle], [pwd], [TokenId], [AspNetUsersId], [ProfilePicture], [WorkflowID]) VALUES (5087, 1, 1, N'Kenny', N'Elaheebacus', N'1234', N'1234', 1197, N'1234', CAST(N'1989-09-08' AS Date), N'Ebene', CAST(1234 AS Numeric(18, 0)), NULL, NULL, N'kelaheebacus@e4international.com', 1, 0, CAST(N'1989-09-08 00:00:00.000' AS DateTime), CAST(N'2017-08-02 12:37:10.960' AS DateTime), 0, 1, NULL, N'zz2lnPNhKl9PAaU7P0QCgdyL0EF9U40IZ92o4i8bfpTAIT1gfFbHIvNM3i6pfiOJ0Wb3regTWaxJjhNfmsEaQkmC7MvsjCjzGSLCj76LMzfdO73pgqVkzlghkzQm6ZYHcqaRTL1T19/7Q/vvNaEFTF3jdbzJeqOLWZ2aK9TvBOeRCuR2GngJ9OsLr5N/Ro9To7Xqgx/ieSlTHp4e25a1USDKMOGU+b88Lc4YGapDA8KFh6DF9njcB/E7zSYnRgK0ik/KlXuEWTScG5RsCRNHHtQc7RkeyL6weMl8j6DY9qafOzr1DbxtqoFeKVAaickoJ2Oj4OJ1Ho2c+G3lZaQgSQ==', N'9f345929-0145-4c0f-ac7d-3e7132e5c877', NULL, 122)
--GO
--INSERT [dbo].[User] ([UserID], [EntityID], [TitleID], [GivenName], [FamilyName], [IdentityNumber], [PassportNumber], [PassportCountryID], [TaxID], [BirthDate], [BirthPlace], [Telephone], [MobileNumber], [FaxNumber], [Email], [JobTitleID], [Verified], [DateCreated], [DateModified], [Deleted], [HeaderTabToggle], [pwd], [TokenId], [AspNetUsersId], [ProfilePicture], [WorkflowID]) VALUES (5096, -1, 1, N'ovais', N'ahmed', N'32324', N'23432', 4, N'23432', CAST(N'2017-05-01' AS Date), NULL, NULL, NULL, NULL, N'oahmed@e4international.com', NULL, 0, CAST(N'1982-01-01 00:00:00.000' AS DateTime), CAST(N'2017-05-11 09:55:36.920' AS DateTime), 1, 1, NULL, N'2+OMHqyIXZI7716pjA93kvQJOcJc9Xq5L+Zeq94q6YpxgxiTvm0fJk9FLwRZkPyTQE0zrPzWuHwnRT8wQL0tSJEmkTjfCZJsbASbDtsWDverYFSUaC6GIgtQkegFysBA8d/c5XDxFEfdpgCXgBJTFUobcEvdIMWxT6C17OUkMDmaPKqsug2QtV0xq4KPZzSfKYRd1HkbxIFcp01ytcf24OR3V7N9my7Bwrclm+OLbrbC+JymfSLgE7fu9bLzvQ36/54b/0MmNQrJ7kw4D2Gei9iUt1ozX++0SHhNSJwstVjlSm9++Jpo/Wus1e9fIds6JMqmKb9u7TgiqPgM+vdgGg==', N'6dfc7bd4-73ca-43b6-96aa-fd6c66f0ab16', NULL, 120)
--GO
--INSERT [dbo].[User] ([UserID], [EntityID], [TitleID], [GivenName], [FamilyName], [IdentityNumber], [PassportNumber], [PassportCountryID], [TaxID], [BirthDate], [BirthPlace], [Telephone], [MobileNumber], [FaxNumber], [Email], [JobTitleID], [Verified], [DateCreated], [DateModified], [Deleted], [HeaderTabToggle], [pwd], [TokenId], [AspNetUsersId], [ProfilePicture], [WorkflowID]) VALUES (5097, 1, 1, N'Pravina', N'Barosah', N'B05118819875', N'124587', 4, N'8663656', CAST(N'1998-04-05' AS Date), NULL, CAST(4157963 AS Numeric(18, 0)), NULL, NULL, N'pbarosah@e4international.com', NULL, 0, CAST(N'2017-04-11 00:00:00.000' AS DateTime), CAST(N'2017-08-01 08:16:08.887' AS DateTime), 0, 1, NULL, N'v5uhxQC/IWyKWZa0Z6ycWvmHdGG+08a/Ff0dRgiIPK3DGqDmZ0G1Q+zlxk4KUmchEFr12un1H0hAihvHSYMIXIhDIsbO4vpBgaAAJvo2CGtmd0TfHNBnL/avgCT8pkgUM3/VuDRTVfRPr8G6DLkYyzhW6s/r7GzGQ7AyH3UUrHE963R9rsP5E5aUcWb4TL9pE0yxXwvkurmErgGjCK6T/Wn/xSBPIkmkl/nHoP9nZwmIkDRiHMGTW9AmEU8LeWAh3d/bqhDaYiWoDnpDAHSITEbMX66EQB8byAKoZUaHBCqKQPjNYGrObfMlNk1bCuql2ZWBBmvXSPXUrVo9CA1KCg==', N'449b1b92-2bd6-4832-ad19-5c3c94e4bd80', NULL, 122)
--GO
--INSERT [dbo].[User] ([UserID], [EntityID], [TitleID], [GivenName], [FamilyName], [IdentityNumber], [PassportNumber], [PassportCountryID], [TaxID], [BirthDate], [BirthPlace], [Telephone], [MobileNumber], [FaxNumber], [Email], [JobTitleID], [Verified], [DateCreated], [DateModified], [Deleted], [HeaderTabToggle], [pwd], [TokenId], [AspNetUsersId], [ProfilePicture], [WorkflowID]) VALUES (5098, 1, 1, N'Crash', N'Bandicoot', N'12345678', N'12345678', 4, N'12345678', CAST(N'2017-07-02' AS Date), NULL, CAST(123456789 AS Numeric(18, 0)), NULL, NULL, N'j768198@mvrht.net', NULL, 0, CAST(N'2017-07-24 00:00:00.000' AS DateTime), CAST(N'2017-08-04 13:52:05.827' AS DateTime), 0, 1, NULL, N'JnOzpYxCHUEut5uxl25XqBhqG+/1/Il1Y/TAejPTisiHb7sm+cj0WGEv+Ga0shQ2WJ85tQVvLMjNjt/udt2268mRJGtZndvn9H4OnhUoaXEkahiRrIGCBbr4wSRkmNij+Ru7VQ+lZRXl2/Q/xNOpzUCQgtst3E6HiPMAkeo9woF2j2UR7wXSB8nnd8huwnoLgUCqRMTWCfpmRsHrN6c1QmSXlJhaUAlamrb+Uu49epXltPG01Fpl62kodFxKxujNHtMItXdlhs9tnzowdr+z1o2roZ1BpNAUdbYN4JkJtYIiE6on2aOy7aU7I+FcKmUO2a0O71JMoqwq5VJjxz4qTg==', N'00d74d8f-44c1-4377-86bc-026cb7f3a3f9', NULL, 122)
--GO
--INSERT [dbo].[User] ([UserID], [EntityID], [TitleID], [GivenName], [FamilyName], [IdentityNumber], [PassportNumber], [PassportCountryID], [TaxID], [BirthDate], [BirthPlace], [Telephone], [MobileNumber], [FaxNumber], [Email], [JobTitleID], [Verified], [DateCreated], [DateModified], [Deleted], [HeaderTabToggle], [pwd], [TokenId], [AspNetUsersId], [ProfilePicture], [WorkflowID]) VALUES (5099, -1, 1, N'Gorillaz', N'Feel Good Inc', N'12345678', N'12345678', 4, N'12345678', CAST(N'2017-07-05' AS Date), NULL, NULL, NULL, NULL, N'j768198@mvrht.net', NULL, 0, CAST(N'2017-07-24 00:00:00.000' AS DateTime), NULL, 1, 1, NULL, N'CkGCvr1cW8nyj9fJtlPgBdD6vZilpiI1SsrUhuyzoIBu3lQoB7AMffHEmLCbmK3fGyFhy/6wjkjT5BNigGEjF2RUqgYHavRK8PgWInDPtlKTby3AYyLO3sm2NuhRghrOOk2Cn+UVYcw+YNn8/GD/XZdRQEPFxWg102dUB7DQymh6Kq5KjxLSaAyCNr0KSj0vc1hUChEghiTByVFsaBWZyNkoQuJrGMao+FKlKfe2zz4lTniniYG2eajckewtGw6vvUh9zblJxrnLIHjCK9jYEwANG+uO/OAjs48LjViFV+3RBlfvB7PRRyf7taNqqw3fEGcEMgpC2Cw0cv0Mu1k43Q==', N'00d74d8f-44c1-4377-86bc-026cb7f3a3f9', NULL, 120)
--GO
--INSERT [dbo].[User] ([UserID], [EntityID], [TitleID], [GivenName], [FamilyName], [IdentityNumber], [PassportNumber], [PassportCountryID], [TaxID], [BirthDate], [BirthPlace], [Telephone], [MobileNumber], [FaxNumber], [Email], [JobTitleID], [Verified], [DateCreated], [DateModified], [Deleted], [HeaderTabToggle], [pwd], [TokenId], [AspNetUsersId], [ProfilePicture], [WorkflowID]) VALUES (5100, 3014, 1, N'Derek', N'Lee', N'1234567890las-', N'312387979', 1134, N'13649798', CAST(N'2017-04-04' AS Date), NULL, CAST(123456789 AS Numeric(18, 0)), NULL, NULL, N'dereklcs@e4international.com', NULL, 0, CAST(N'2017-07-24 00:00:00.000' AS DateTime), CAST(N'2017-08-04 10:02:07.360' AS DateTime), 1, 1, NULL, N'psNJKaB81tcsB5/s1vAD8ILXSH7Ydy5poMCvjBpdkP/tbH8wbvB5cXPUPF8ul7u6kkw6PgNbbhKKGzFhNCkQY2HScFI5SZNz8HdBxmtvEoCcDKFkawO+1FqeGGFkys+cylDxbPQOn5UlPAn2tkyI3+v8OYUb5brCpQEaZmuVcs1dLLYlMRUU0Zz/+e4T64OUQpOxozoBS20YdUOgCA4vyuDaAlIoZd5/gUKTeGg+WvGJ9WIz1G349R4W5oaBeMYLxlLtUIedcqg3E8XuJTAVfsIx1LJX/mhkpGOWRCmSBZeA2j/G9FnZ3pJcmrdJnXDRc4IreE+rfXLXVIoT/JmrRA==', N'736d8ef6-d195-44a7-8e4c-d85609f90e94', NULL, 122)
--GO
--INSERT [dbo].[User] ([UserID], [EntityID], [TitleID], [GivenName], [FamilyName], [IdentityNumber], [PassportNumber], [PassportCountryID], [TaxID], [BirthDate], [BirthPlace], [Telephone], [MobileNumber], [FaxNumber], [Email], [JobTitleID], [Verified], [DateCreated], [DateModified], [Deleted], [HeaderTabToggle], [pwd], [TokenId], [AspNetUsersId], [ProfilePicture], [WorkflowID]) VALUES (5101, 3014, 1, N'Crash', N'Bandicoot', N'12345678', N'12345678', 4, N'12345678', CAST(N'2017-07-02' AS Date), NULL, CAST(123456789 AS Numeric(18, 0)), NULL, NULL, N'j768198@mvrht.net', NULL, 0, CAST(N'2017-07-24 00:00:00.000' AS DateTime), CAST(N'2017-08-04 13:51:14.457' AS DateTime), 1, 1, NULL, N'', N'00d74d8f-44c1-4377-86bc-026cb7f3a3f9', NULL, 122)
--GO
--INSERT [dbo].[User] ([UserID], [EntityID], [TitleID], [GivenName], [FamilyName], [IdentityNumber], [PassportNumber], [PassportCountryID], [TaxID], [BirthDate], [BirthPlace], [Telephone], [MobileNumber], [FaxNumber], [Email], [JobTitleID], [Verified], [DateCreated], [DateModified], [Deleted], [HeaderTabToggle], [pwd], [TokenId], [AspNetUsersId], [ProfilePicture], [WorkflowID]) VALUES (5102, -1, 1, N'Gorillaz', N'Feel Good Inc', N'12345678', N'12345678', 4, N'12345678', CAST(N'2017-07-05' AS Date), NULL, NULL, NULL, NULL, N'j768198@mvrht.net', NULL, 0, CAST(N'2017-07-24 00:00:00.000' AS DateTime), NULL, 1, 1, NULL, N'B7aMVB3tdLqNko57Ufw5kncZ0SIsaj07ELdVWEEGc977FgWbLfp+bKOb0dTS0+NpnN6NmTu/aH2tjb/Gl0r+mk1sHNPIcm3noTwYPP96luBZ+b6j3v233H5z0txYEecG/KDFHnWnM+xRMaAbXFioCCvbQijNv5YjZJ8CAnieSu6/h9R0WkmO6OmqGJdLDK/55LO5amL8z0MN8yuO1VpX8zeYwwDqyYB3ato4yP4RqNjSp3ElrOE92RclnkLsfwHo986AD6nnqF6CqLgmdHhVwc4mBNh4qzyyg3t7bLD4R8zEWiQtMIMyuq1mCDBTsNMzLxhLh91GbE53PgPHap4ftQ==', N'00d74d8f-44c1-4377-86bc-026cb7f3a3f9', NULL, 120)
--GO
--INSERT [dbo].[User] ([UserID], [EntityID], [TitleID], [GivenName], [FamilyName], [IdentityNumber], [PassportNumber], [PassportCountryID], [TaxID], [BirthDate], [BirthPlace], [Telephone], [MobileNumber], [FaxNumber], [Email], [JobTitleID], [Verified], [DateCreated], [DateModified], [Deleted], [HeaderTabToggle], [pwd], [TokenId], [AspNetUsersId], [ProfilePicture], [WorkflowID]) VALUES (5103, 3016, 1, N'Flume', N'Lol', N'12345678', N'12345678', 4, N'12345678', CAST(N'2017-07-02' AS Date), NULL, NULL, NULL, NULL, N'j768198@mvrht.net', NULL, 0, CAST(N'2017-07-24 00:00:00.000' AS DateTime), CAST(N'2017-07-31 07:58:51.583' AS DateTime), 1, 1, NULL, N'oL8JnRR6KcoHkzculOJgm+MZ3EbcHYLX39EMHsDx7l7d518+RDPzd0vCFMlpccUdRqWz7tKqDjAN4iMJV+PaLvsweJxS0z/ASgLtolja0todtlqqlfqhZwpx/NqsQ0GAEM2HGRfzfRMWWcVsVPxwQ6yhFD5uSdvPK+C+LlMnLMT0LhJhxr6pphzdZifqd2HSvX4CMiVXU8pBDxa7GqleNXt/8vYg3IowchBIdyj3OSNe1xCdWsZaKBXDQ8yTrkUkSfMi71+6mjHakLUF6KizArCaSNwbkP9QKmWLothmuPYRaZqXbsBYFPNAKq+4yv71qRtM8oPz0x9T0UkiNtPv+g==', N'00d74d8f-44c1-4377-86bc-026cb7f3a3f9', NULL, 122)
--GO
--INSERT [dbo].[User] ([UserID], [EntityID], [TitleID], [GivenName], [FamilyName], [IdentityNumber], [PassportNumber], [PassportCountryID], [TaxID], [BirthDate], [BirthPlace], [Telephone], [MobileNumber], [FaxNumber], [Email], [JobTitleID], [Verified], [DateCreated], [DateModified], [Deleted], [HeaderTabToggle], [pwd], [TokenId], [AspNetUsersId], [ProfilePicture], [WorkflowID]) VALUES (5104, 3016, 1, N'Mr', N'Faker', N'1234567', N'1234567', 4, N'12345678', CAST(N'2017-07-10' AS Date), NULL, NULL, NULL, NULL, N'zxo92612@oalsp.com', NULL, 0, CAST(N'2017-07-24 00:00:00.000' AS DateTime), CAST(N'2017-07-25 00:00:00.000' AS DateTime), 0, 1, NULL, N'WqmGSrqY95Ahg62r7M6J1lGtk/oC5yht8rTB3xgZDX5XG58RjBC7Lgt6Foe7E3UpyxRyD0QJCVWu8UBulBVFEu9ANbpwZVK8GCyKBHKpH7lSuSY5mVEtCkFy0n2EM2Cf+nS7KapBAyuTI8Hs0te/+oxXk0Ke9ORtjn+dpQPDmar6wODbajQMxa6HRqq2vISu6N0jDV8KG5qQ4NEUuAXcrMMXbHXsl+9pNWNlE4gU6lb8gFEiF1tY/raKJnP9xPwAz5XCfaM/8JdHX8TgTXz9CgKBd6zgLfKXn3Z6jUKFlOtOqxGnyt8zg4ig92o6Q2LBBt0iidLgGFgFcX3+9qxj1Q==', N'5dc5f49f-a71e-4a8a-a45d-e2f4c525c4f3', NULL, 122)
--GO
--INSERT [dbo].[User] ([UserID], [EntityID], [TitleID], [GivenName], [FamilyName], [IdentityNumber], [PassportNumber], [PassportCountryID], [TaxID], [BirthDate], [BirthPlace], [Telephone], [MobileNumber], [FaxNumber], [Email], [JobTitleID], [Verified], [DateCreated], [DateModified], [Deleted], [HeaderTabToggle], [pwd], [TokenId], [AspNetUsersId], [ProfilePicture], [WorkflowID]) VALUES (5105, -1, 1, N'Crash', N'Bandicoot', N'12345678', N'12345678', 4, N'12345678', CAST(N'2017-07-02' AS Date), NULL, CAST(123456789 AS Numeric(18, 0)), NULL, NULL, N'j768198@mvrht.net', NULL, 0, CAST(N'2017-07-25 00:00:00.000' AS DateTime), CAST(N'2017-08-02 13:31:50.713' AS DateTime), 1, 1, NULL, N'ngZvatoqZmVx8TSZ8ohF7VEl/Tl2G4nzPOdQk/2QaYCoFHl6ORLAmYXAJDEW/mqZzjQXpPOOPlC5icDK/Q61yhnnp4dOvO4SBf4QC/91Dz4CuttYg/Jl7Dqq4/5L3sDeeBvwKwXwGt/eeOJX8hkSOCxx8sSP9foG/sj9UeLJ7d+G1veJQR7Pwu8PqnGMT5cHVFIJjXL40XgHCp9/N8YbnY2AKH8NO4UOSR2CkVDkllqrz4gI8fC6W37oVUgDQKCaqHCX/LTRJUFq4LSqo7su7o66Zbe+npTvKkEzofWPxro/nwKwSX0vKoTpYalWoxCF4ZkFzj6yp4jHPcAOfQWwfg==', N'00d74d8f-44c1-4377-86bc-026cb7f3a3f9', NULL, 122)
--GO
--INSERT [dbo].[User] ([UserID], [EntityID], [TitleID], [GivenName], [FamilyName], [IdentityNumber], [PassportNumber], [PassportCountryID], [TaxID], [BirthDate], [BirthPlace], [Telephone], [MobileNumber], [FaxNumber], [Email], [JobTitleID], [Verified], [DateCreated], [DateModified], [Deleted], [HeaderTabToggle], [pwd], [TokenId], [AspNetUsersId], [ProfilePicture], [WorkflowID]) VALUES (5106, -1, 1, N'Derek', N'Lee', N'656563289', N'312387979', 1134, N'13649798', CAST(N'2017-04-04' AS Date), NULL, CAST(54545645 AS Numeric(18, 0)), NULL, NULL, N'dereklcs@e4international.com', NULL, 0, CAST(N'2017-07-25 00:00:00.000' AS DateTime), NULL, 1, 1, NULL, NULL, N'736d8ef6-d195-44a7-8e4c-d85609f90e94', NULL, 122)
--GO
--INSERT [dbo].[User] ([UserID], [EntityID], [TitleID], [GivenName], [FamilyName], [IdentityNumber], [PassportNumber], [PassportCountryID], [TaxID], [BirthDate], [BirthPlace], [Telephone], [MobileNumber], [FaxNumber], [Email], [JobTitleID], [Verified], [DateCreated], [DateModified], [Deleted], [HeaderTabToggle], [pwd], [TokenId], [AspNetUsersId], [ProfilePicture], [WorkflowID]) VALUES (5107, 3014, 1, N'Kenny', N'Elaheebacus', N'1234', N'1234', 1197, N'1234', CAST(N'1989-09-08' AS Date), NULL, CAST(1234 AS Numeric(18, 0)), NULL, NULL, N'kelaheebacus@e4international.com', NULL, 0, CAST(N'2017-07-26 00:00:00.000' AS DateTime), NULL, 1, 0, NULL, N'Fzg0zjUe6vpya+d5W1jJqm3iejR2661r/yAx5bH7VYiPTXLu384Z3bCc7kJmHB8UQBr9DjodrMBfYEGEt104nDT1UpzzgecrscpgIJl+ktcuECVX4Dlf5iQYwiaD0HI0jK9+Uc3cRD0anMJiPAc020GaKkftbcshfsCL1xTe+Qt6zxPhuMCXozsEJvsD+nZbfnQyRuV6/IthDc1Eg817HhaM8YOZW4O3oRm/2lx0oZA47WBKDyXtlD9CeZ+BmpAn9VmtKUkxg1yZzBdxkF+Wh3LROie+h4jNwM2toLhlXp00WrGxhuCdIQGb6EIsWTFPYlVusuRDk37mTYWKUwyb0Q==', N'9f345929-0145-4c0f-ac7d-3e7132e5c877', NULL, 122)
--GO
--INSERT [dbo].[User] ([UserID], [EntityID], [TitleID], [GivenName], [FamilyName], [IdentityNumber], [PassportNumber], [PassportCountryID], [TaxID], [BirthDate], [BirthPlace], [Telephone], [MobileNumber], [FaxNumber], [Email], [JobTitleID], [Verified], [DateCreated], [DateModified], [Deleted], [HeaderTabToggle], [pwd], [TokenId], [AspNetUsersId], [ProfilePicture], [WorkflowID]) VALUES (5108, -1, 2, N'dfg', N'fgh', N'5656', N'56', 4, N'56', CAST(N'2017-06-14' AS Date), NULL, NULL, NULL, NULL, N'dfg@live.com', NULL, 0, CAST(N'2017-08-01 00:00:00.000' AS DateTime), NULL, 1, 1, NULL, N'', N'2b82d38d-441e-4e0d-92f2-0660ff18afa6', NULL, 137)
--GO
--INSERT [dbo].[User] ([UserID], [EntityID], [TitleID], [GivenName], [FamilyName], [IdentityNumber], [PassportNumber], [PassportCountryID], [TaxID], [BirthDate], [BirthPlace], [Telephone], [MobileNumber], [FaxNumber], [Email], [JobTitleID], [Verified], [DateCreated], [DateModified], [Deleted], [HeaderTabToggle], [pwd], [TokenId], [AspNetUsersId], [ProfilePicture], [WorkflowID]) VALUES (5109, -1, 1, N'Hemant', N'Ramdhanee', N'44554545454', N'45454545454', 4, N'45544554', CAST(N'2017-05-03' AS Date), NULL, NULL, NULL, NULL, N'hramdhanee@e4international.com', NULL, 0, CAST(N'2017-08-01 00:00:00.000' AS DateTime), NULL, 1, 1, NULL, N'TWivNogIBHzX2IRCvt6oQqJgBF0dDwRiJpwHzqJvw1ltbo97yGH6MxGHkRe0kDXTY/2bDEal+jqJZuK0vy5GTOja3umSU0f+aANZuuYCVkxu1UovmV/+2quxvmQ/EIMepSif8yFmRK80K/L8BJgE0S+kstYjPjoB6zyHrDawpElDFrH5xKJiDQbiSntWhmj6HpTrRaSSoF7mt/65lufZlCiPQh/9h2VdXB+Vt+FywQr/zS29xjtKvyZsQrml4GX2pWDWqVtWI2F1vKzP4o58+w9TGrIyRSimALs1JRIa3C/3CpjcmNA2ZXxutW2a/cmr7g8uSXcEU9eF/Es0n+MbxQ==', N'6e4d4157-883e-4a23-ac3f-8e3ed8c8ca2a', NULL, 137)
--GO
--INSERT [dbo].[User] ([UserID], [EntityID], [TitleID], [GivenName], [FamilyName], [IdentityNumber], [PassportNumber], [PassportCountryID], [TaxID], [BirthDate], [BirthPlace], [Telephone], [MobileNumber], [FaxNumber], [Email], [JobTitleID], [Verified], [DateCreated], [DateModified], [Deleted], [HeaderTabToggle], [pwd], [TokenId], [AspNetUsersId], [ProfilePicture], [WorkflowID]) VALUES (5110, -1, 1, N'asdf', N'asdf', N'2345', N'2345', 1003, N'345', CAST(N'2016-08-17' AS Date), NULL, CAST(2345 AS Numeric(18, 0)), NULL, CAST(2435 AS Numeric(18, 0)), N'terer@sdf.com', NULL, 0, CAST(N'2017-08-01 00:00:00.000' AS DateTime), NULL, 1, 1, NULL, NULL, N'ca716b48-5fe0-49bf-a1ef-700de57c397f', NULL, 136)
--GO
--INSERT [dbo].[User] ([UserID], [EntityID], [TitleID], [GivenName], [FamilyName], [IdentityNumber], [PassportNumber], [PassportCountryID], [TaxID], [BirthDate], [BirthPlace], [Telephone], [MobileNumber], [FaxNumber], [Email], [JobTitleID], [Verified], [DateCreated], [DateModified], [Deleted], [HeaderTabToggle], [pwd], [TokenId], [AspNetUsersId], [ProfilePicture], [WorkflowID]) VALUES (5111, 3014, 1, N'asdf', N'adf', N'23452', N'345', 1002, N'345', CAST(N'2016-08-01' AS Date), NULL, NULL, NULL, NULL, N'ter1er@sdf.com', NULL, 0, CAST(N'2017-08-01 00:00:00.000' AS DateTime), NULL, 1, 1, NULL, N'', N'09731f81-37c8-400f-b24e-23510cd36f6b', NULL, 136)
--GO
--SET IDENTITY_INSERT [dbo].[User] OFF
--GO




/*----------------------------------------- END User  -----------------------------------*/



/*----------------------------------------- USER ROLE - RUN ONLY AFTER HAVING INSERTED THE USERS -------------------------------------*/





--------------------------------------------new version user role

--GO

----MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
----Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
----Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

--SET NOCOUNT ON

--SET IDENTITY_INSERT [UserRole] ON

--MERGE INTO [UserRole] AS Target
--USING (VALUES
--  (1,5097,1,1,'2017-07-04T10:13:11.040',NULL,0)
-- ,(2,5096,1,1,'2017-07-04T10:13:15.230',NULL,0)
-- ,(3,5087,1,1,'2017-07-04T10:13:20.403',NULL,0)
-- ,(4,5081,1,1,'2017-07-04T10:13:23.300',NULL,0)
-- ,(5,5078,1,1,'2017-07-04T10:13:26.293',NULL,0)
-- ,(6,5077,1,1,'2017-07-04T10:13:38.843',NULL,0)
-- ,(7,4076,1,1,'2017-07-04T10:13:44.043',NULL,0)
-- ,(8,5098,9,1,'2017-07-24T09:29:04.723',NULL,0)
-- ,(9,5099,1,1,'2017-07-24T09:32:55.333',NULL,0)
-- ,(10,5100,1,1,'2017-07-24T09:44:19.600',NULL,0)
-- ,(11,5101,9,1,'2017-07-24T10:21:25.437',NULL,0)
-- ,(12,5102,1,1,'2017-07-24T10:22:39.990',NULL,0)
-- ,(13,5103,9,1,'2017-07-24T10:36:38.167',NULL,0)
-- ,(14,5104,1,1,'2017-07-24T15:39:35.333',NULL,0)
-- ,(15,5105,1,1,'2017-07-25T10:49:27.857',NULL,0)
-- ,(16,5106,1,1,'2017-07-25T10:53:57.250',NULL,0)
-- ,(17,5107,1,1,'2017-07-26T12:41:15.003',NULL,0)
-- ,(18,5108,8,1,'2017-08-01T08:47:49.840',NULL,0)
-- ,(19,5109,1,1,'2017-08-01T08:48:36.883',NULL,0)
-- ,(20,5110,3,1,'2017-08-01T15:53:25.407',NULL,0)
-- ,(21,5111,2,1,'2017-08-01T15:54:06.110',NULL,0)
--) AS Source ([UserRoleID],[UserID],[RoleID],[IsActive],[DateCreated],[DateModified],[Deleted])
--ON (Target.[UserRoleID] = Source.[UserRoleID])
--WHEN MATCHED AND (
--	NULLIF(Source.[UserID], Target.[UserID]) IS NOT NULL OR NULLIF(Target.[UserID], Source.[UserID]) IS NOT NULL OR 
--	NULLIF(Source.[RoleID], Target.[RoleID]) IS NOT NULL OR NULLIF(Target.[RoleID], Source.[RoleID]) IS NOT NULL OR 
--	NULLIF(Source.[IsActive], Target.[IsActive]) IS NOT NULL OR NULLIF(Target.[IsActive], Source.[IsActive]) IS NOT NULL OR 
--	NULLIF(Source.[DateCreated], Target.[DateCreated]) IS NOT NULL OR NULLIF(Target.[DateCreated], Source.[DateCreated]) IS NOT NULL OR 
--	NULLIF(Source.[DateModified], Target.[DateModified]) IS NOT NULL OR NULLIF(Target.[DateModified], Source.[DateModified]) IS NOT NULL OR 
--	NULLIF(Source.[Deleted], Target.[Deleted]) IS NOT NULL OR NULLIF(Target.[Deleted], Source.[Deleted]) IS NOT NULL) THEN
-- UPDATE SET
--  [UserID] = Source.[UserID], 
--  [RoleID] = Source.[RoleID], 
--  [IsActive] = Source.[IsActive], 
--  [DateCreated] = Source.[DateCreated], 
--  [DateModified] = Source.[DateModified], 
--  [Deleted] = Source.[Deleted]
--WHEN NOT MATCHED BY TARGET THEN
-- INSERT([UserRoleID],[UserID],[RoleID],[IsActive],[DateCreated],[DateModified],[Deleted])
-- VALUES(Source.[UserRoleID],Source.[UserID],Source.[RoleID],Source.[IsActive],Source.[DateCreated],Source.[DateModified],Source.[Deleted])
--WHEN NOT MATCHED BY SOURCE THEN 
-- DELETE;

--GO
--DECLARE @mergeError int
-- , @mergeCount int
--SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
--IF @mergeError != 0
-- BEGIN
-- PRINT 'ERROR OCCURRED IN MERGE FOR [UserRole]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
-- END
--ELSE
-- BEGIN
-- PRINT '[UserRole] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
-- END
--GO

--SET IDENTITY_INSERT [UserRole] OFF
--GO
--SET NOCOUNT OFF
--GO




--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

--SET NOCOUNT ON

--SET IDENTITY_INSERT [UserRole] ON

--MERGE INTO [UserRole] AS Target
--USING (VALUES
--  (1,5097,1,1,'2017-07-04T10:13:11.040',NULL,0)
-- ,(2,5096,1,1,'2017-07-04T10:13:15.230',NULL,0)
-- ,(3,5087,1,1,'2017-07-04T10:13:20.403',NULL,0)
-- ,(4,5081,1,1,'2017-07-04T10:13:23.300',NULL,0)
-- ,(5,5078,1,1,'2017-07-04T10:13:26.293',NULL,0)
-- ,(6,5077,1,1,'2017-07-04T10:13:38.843',NULL,0)
-- ,(7,4076,1,1,'2017-07-04T10:13:44.043',NULL,0)
--) AS Source ([UserRoleID],[UserID],[RoleID],[IsActive],[DateCreated],[DateModified],[Deleted])
--ON (Target.[UserRoleID] = Source.[UserRoleID])
--WHEN MATCHED AND (
--	NULLIF(Source.[UserID], Target.[UserID]) IS NOT NULL OR NULLIF(Target.[UserID], Source.[UserID]) IS NOT NULL OR 
--	NULLIF(Source.[RoleID], Target.[RoleID]) IS NOT NULL OR NULLIF(Target.[RoleID], Source.[RoleID]) IS NOT NULL OR 
--	NULLIF(Source.[IsActive], Target.[IsActive]) IS NOT NULL OR NULLIF(Target.[IsActive], Source.[IsActive]) IS NOT NULL OR 
--	NULLIF(Source.[DateCreated], Target.[DateCreated]) IS NOT NULL OR NULLIF(Target.[DateCreated], Source.[DateCreated]) IS NOT NULL OR 
--	NULLIF(Source.[DateModified], Target.[DateModified]) IS NOT NULL OR NULLIF(Target.[DateModified], Source.[DateModified]) IS NOT NULL OR 
--	NULLIF(Source.[Deleted], Target.[Deleted]) IS NOT NULL OR NULLIF(Target.[Deleted], Source.[Deleted]) IS NOT NULL) THEN
-- UPDATE SET
--  [UserID] = Source.[UserID], 
--  [RoleID] = Source.[RoleID], 
--  [IsActive] = Source.[IsActive], 
--  [DateCreated] = Source.[DateCreated], 
--  [DateModified] = Source.[DateModified], 
--  [Deleted] = Source.[Deleted]
--WHEN NOT MATCHED BY TARGET THEN
-- INSERT([UserRoleID],[UserID],[RoleID],[IsActive],[DateCreated],[DateModified],[Deleted])
-- VALUES(Source.[UserRoleID],Source.[UserID],Source.[RoleID],Source.[IsActive],Source.[DateCreated],Source.[DateModified],Source.[Deleted])
--WHEN NOT MATCHED BY SOURCE THEN 
-- DELETE
--;
--GO
--DECLARE @mergeError int
-- , @mergeCount int
--SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
--IF @mergeError != 0
-- BEGIN
-- PRINT 'ERROR OCCURRED IN MERGE FOR [UserRole]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
-- END
--ELSE
-- BEGIN
-- PRINT '[UserRole] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
-- END
--GO

--SET IDENTITY_INSERT [UserRole] OFF
--GO
--SET NOCOUNT OFF
--GO


/*----------------------------------------- END USER ROLE -------------------------------------*/

/********To Be Remove After One Week (reason : fix for data and address)********/
UPDATE [dbo].[Address]
   SET [AddressLine2] = NULL
      ,[City] = NULL
      ,[ProvinceID] = NULL
      ,[PostalCode] = NULL


 WHERE ([AddressLine2] = '' )
		OR 
		([City] = '')
		OR 
		([ProvinceID] = '' )
		OR 
		([PostalCode] = '')
GO

--UPDATE [dbo].[WorkflowActionVariable]
--   SET [IsRequired] = 1
--GO

UPDATE [dbo].[TransactionDetail]
SET 
       [Value] =0 

 WHERE [VariableTypeID] = 2 AND [Value] = ''
 GO
/********END OF To Be Remove After One Week********/

/********************* Update Task Name **************************/
	UPDATE
		[dbo].[Task]
	SET
		[TaskName] = 'Generate Document'
	WHERE
		[TaskID] = 116;

	UPDATE
			[dbo].[Task]
	SET
			[TaskName] = 'Upload Document'
	WHERE
			[TaskID] = 117;

	UPDATE
			[dbo].[Task]
	SET
			[TaskName] = 'Download Document'
	WHERE
			[TaskID] = 118;


GO

/********************* END Update Task Name **************************/


/************************ UPDATE WORKFLOWID IN USER PROFILE ****************************/

UPDATE [User] SET [WorkflowID] = 120

/************************ END UPDATE WORKFLOWID IN USER PROFILE ****************************/


/************************ ADD USERACTION TO THE DATABASE ****************************/

GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

SET IDENTITY_INSERT [UserAction] ON

MERGE INTO [UserAction] AS Target
USING (VALUES
  (1,'GE_LI','View Deal',NULL,0,NULL)
 ,(2,'PA_LI','Participant List',NULL,0,NULL)
 ,(3,'PA_AD','Add Participant',NULL,0,NULL)
 ,(4,'PA_ED','Edit Participant',NULL,0,NULL)
 ,(5,'PA_DE','Delete Participant',NULL,0,NULL)
 ,(6,'BA_LI','Bank List',NULL,0,NULL)
 ,(7,'BA_AD','Add Bank',NULL,0,NULL)
 ,(8,'BA_ED','Edit Bank',NULL,0,NULL)
 ,(9,'BA_DE','Delete Bank',NULL,0,NULL)
 ,(10,'ADR_LI','Address List',NULL,0,NULL)
 ,(11,'AD_AD','Add Address',NULL,0,NULL)
 ,(12,'AD_ED','Edit Address',NULL,0,NULL)
 ,(13,'AD_DE','Delete Address',NULL,0,NULL)
 ,(14,'PR_LI','Property List',NULL,0,NULL)
 ,(15,'PR_AD','Add Property',NULL,0,NULL)
 ,(16,'PR_ED','Edit Property',NULL,0,NULL)
 ,(17,'PR_DE','Delete Property',NULL,0,NULL)
 ,(18,'MO_LI','Mortgage List',NULL,0,NULL)
 ,(19,'MO_AD','Add Mortgage',NULL,0,NULL)
 ,(20,'MO_ED','Edit Mortgage',NULL,0,NULL)
 ,(21,'MO_DE','Delete Mortgage',NULL,0,NULL)
 ,(22,'CM_EDIT','Edit Completion Date',NULL,0,NULL)
 ,(23,'DE_ED','Edit Deal',NULL,0,NULL)
 ,(24,'DW_ED','Edit Deal Workflow',NULL,0,NULL)
 ,(25,'DC_ED','Edit Deal Client Reference',NULL,0,NULL)
 ,(26,'DT_ED','Edit Deal Type',NULL,0,NULL)
 ,(27,'WF_LI','Workflow List',NULL,0,NULL)
 ,(28,'WA_AD','Add Workflow Action',NULL,0,NULL)
 ,(29,'AL_LI','Alerts List',NULL,0,NULL)
 ,(30,'AL_AD','Add Alert',NULL,0,NULL)
 ,(31,'AL_ED','Edit Alert',NULL,0,NULL)
 ,(32,'AL_CO','Complete Alert',NULL,0,NULL)
 ,(33,'AL_AR','Archive Alert',NULL,0,NULL)
 ,(34,'AL_OU','Alert Outlook',NULL,0,NULL)
 ,(35,'CO_LI','Correspondence List',NULL,0,NULL)
 ,(36,'EM_TA','Email Tab',NULL,0,NULL)
 ,(37,'EM_AT','Email Attachment',NULL,0,NULL)
 ,(38,'EM_SA','Save Email Attachment',NULL,0,NULL)
 ,(39,'SM_TA','SMS Tab',NULL,0,NULL)
 ,(40,'PL_LI','Document Tab',NULL,0,NULL)
 ,(41,'PL_GE','Document - Generate Doc',NULL,0,NULL)
 ,(42,'PL_SI','Document - Upload Signed',NULL,0,NULL)
 ,(43,'PL_ST','Document - Upload Standard',NULL,0,NULL)
 ,(44,'PL_DW','Document - Download Doc',NULL,0,NULL)
 ,(45,'AU_LI','Audit List',NULL,0,NULL)
 ,(46,'AU_TI','Audit Timeline',NULL,0,NULL)
 ,(47,'AU_TA','Audit Table',NULL,0,NULL)
 ,(48,'FE_LI','Payment List',NULL,0,NULL)
 ,(49,'FE_AD','Add Payment',NULL,0,NULL)
 ,(50,'FE_ED','Edit Payment',NULL,0,NULL)
 ,(51,'DA_LI','Dashboard List',NULL,0,NULL)
 ,(52,'DA_DE','Dashboard Deals',NULL,0,NULL)
 ,(53,'DA_SW','Dashboard Switch Account',NULL,0,NULL)
 ,(54,'DA_FP','Dashboard Fee Deal Type',NULL,0,NULL)
 ,(55,'DA_MP','Dashboard Monthly Payment',NULL,0,NULL)
 ,(56,'DA_WP','Dashboard Work Progress',NULL,0,NULL)
 ,(58,'SE_LI','Search View',NULL,0,NULL)
 ,(59,'SE_DE','Search Deals',NULL,0,NULL)
 ,(60,'SE_PA','Search Participants',NULL,0,NULL)
 ,(61,'SE_PR','Search Properties',NULL,0,NULL)
 ,(62,'DI_LI','Notification Items List',NULL,0,NULL)
 ,(63,'DI_CO','Notification Items Complete',NULL,0,NULL)
 ,(64,'DI_AR','Notification Items Archive',NULL,0,NULL)
 ,(65,'RE_LI','Reports List',NULL,0,NULL)
 ,(66,'RE_TY','Reports Type',NULL,0,NULL)
 ,(67,'RE_SD','Reports Start Date',NULL,0,NULL)
 ,(68,'RE_ED','Reports End Date',NULL,0,NULL)
 ,(69,'RE_GR','Reports Generate',NULL,0,NULL)
 ,(70,'RE_DW','Reports Download',NULL,0,NULL)
 ,(71,'AD_LI','Admin List',NULL,0,NULL)
 ,(72,'CR_MA','Create New Deal',NULL,0,NULL)
 ,(73,'DE_LI','Deal List',NULL,0,NULL)
 ,(74,'FE_DE','Fees Remove',NULL,0,NULL)
) AS Source ([UserActionID],[Code],[Description],[AbsoluteUri],[Deleted],[Editable])
ON (Target.[UserActionID] = Source.[UserActionID])
WHEN MATCHED AND (
	NULLIF(Source.[Code], Target.[Code]) IS NOT NULL OR NULLIF(Target.[Code], Source.[Code]) IS NOT NULL OR 
	NULLIF(Source.[Description], Target.[Description]) IS NOT NULL OR NULLIF(Target.[Description], Source.[Description]) IS NOT NULL OR 
	NULLIF(Source.[AbsoluteUri], Target.[AbsoluteUri]) IS NOT NULL OR NULLIF(Target.[AbsoluteUri], Source.[AbsoluteUri]) IS NOT NULL OR 
	NULLIF(Source.[Deleted], Target.[Deleted]) IS NOT NULL OR NULLIF(Target.[Deleted], Source.[Deleted]) IS NOT NULL OR 
	NULLIF(Source.[Editable], Target.[Editable]) IS NOT NULL OR NULLIF(Target.[Editable], Source.[Editable]) IS NOT NULL) THEN
 UPDATE SET
  [Code] = Source.[Code], 
  [Description] = Source.[Description], 
  [AbsoluteUri] = Source.[AbsoluteUri], 
  [Deleted] = Source.[Deleted], 
  [Editable] = Source.[Editable]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([UserActionID],[Code],[Description],[AbsoluteUri],[Deleted],[Editable])
 VALUES(Source.[UserActionID],Source.[Code],Source.[Description],Source.[AbsoluteUri],Source.[Deleted],Source.[Editable])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [UserAction]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[UserAction] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET IDENTITY_INSERT [UserAction] OFF
GO
SET NOCOUNT OFF
GO


/************************ END ADD USERACTION TO THE DATABASE ****************************/

/************************ ADD USERROLE ACTION TO THE DATABASE ****************************/

GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

SET IDENTITY_INSERT [UserRoleAction] ON

MERGE INTO [UserRoleAction] AS Target
USING (VALUES
  (1,1,51)
 ,(2,1,71)
 ,(3,8,1)
 ,(10,8,8)
 ,(11,8,9)
 ,(12,8,10)
 ,(13,8,11)
 ,(14,8,12)
 ,(15,8,13)
 ,(16,8,14)
 ,(17,8,15)
 ,(18,8,16)
 ,(19,8,17)
 ,(20,8,18)
 ,(21,8,19)
 ,(22,8,20)
 ,(23,8,21)
 ,(24,8,22)
 ,(25,8,23)
 ,(26,8,24)
 ,(27,8,25)
 ,(28,8,26)
 ,(29,8,27)
 ,(30,8,28)
 ,(31,8,29)
 ,(32,8,30)
 ,(33,8,31)
 ,(34,8,32)
 ,(35,8,33)
 ,(36,8,34)
 ,(37,8,35)
 ,(38,8,36)
 ,(39,8,37)
 ,(40,8,38)
 ,(41,8,39)
 ,(42,8,40)
 ,(43,8,41)
 ,(44,8,42)
 ,(45,8,43)
 ,(46,8,44)
 ,(47,8,45)
 ,(48,8,46)
 ,(49,8,47)
 ,(50,8,48)
 ,(51,8,49)
 ,(52,8,50)
 ,(53,8,51)
 ,(54,8,52)
 ,(55,8,53)
 ,(56,8,54)
 ,(57,8,55)
 ,(58,8,56)
 ,(59,8,57)
 ,(60,8,58)
 ,(61,8,59)
 ,(62,8,60)
 ,(63,8,61)
 ,(64,8,62)
 ,(65,8,63)
 ,(66,8,64)
 ,(67,8,65)
 ,(68,8,66)
 ,(69,8,67)
 ,(70,8,68)
 ,(71,8,69)
 ,(72,8,70)
 ,(73,8,71)
 ,(74,8,72)
 ,(75,3,1)
 ,(76,3,2)
 ,(77,3,3)
 ,(78,3,4)
 ,(79,3,5)
 ,(80,3,6)
 ,(81,3,7)
 ,(82,3,8)
 ,(83,3,9)
 ,(84,3,10)
 ,(85,3,11)
 ,(86,3,12)
 ,(87,3,13)
 ,(88,3,14)
 ,(89,3,15)
 ,(90,3,16)
 ,(91,3,17)
 ,(92,3,18)
 ,(93,3,19)
 ,(94,3,20)
 ,(95,3,21)
 ,(96,3,22)
 ,(97,3,23)
 ,(98,3,24)
 ,(99,3,25)
 ,(100,3,26)
 ,(101,3,27)
 ,(102,3,28)
 ,(103,3,29)
 ,(104,3,30)
 ,(105,3,31)
 ,(106,3,32)
 ,(107,3,33)
 ,(108,3,34)
 ,(109,3,35)
 ,(110,3,36)
 ,(111,3,37)
 ,(112,3,38)
 ,(113,3,39)
 ,(114,3,40)
 ,(115,3,41)
 ,(116,3,42)
 ,(117,3,43)
 ,(118,3,44)
 ,(119,3,45)
 ,(120,3,46)
 ,(121,3,47)
 ,(122,3,48)
 ,(123,3,49)
 ,(124,3,50)
 ,(125,3,51)
 ,(126,3,52)
 ,(127,3,53)
 ,(128,3,54)
 ,(129,3,55)
 ,(130,3,56)
 ,(131,3,57)
 ,(132,3,58)
 ,(133,3,59)
 ,(134,3,60)
 ,(135,3,61)
 ,(136,3,62)
 ,(137,3,63)
 ,(138,3,64)
 ,(139,3,72)
 ,(148,4,1)
 ,(149,4,2)
 ,(150,4,6)
 ,(151,4,7)
 ,(152,4,8)
 ,(153,4,9)
 ,(154,4,10)
 ,(155,4,11)
 ,(156,4,12)
 ,(157,4,13)
 ,(158,4,14)
 ,(159,4,15)
 ,(160,4,16)
 ,(161,4,17)
 ,(162,4,18)
 ,(163,4,19)
 ,(164,4,20)
 ,(173,8,73)
 ,(174,8,74)
 ,(243,8,5)
 ,(244,8,6)
 ,(245,8,7)
 ,(248,1,1)
 ,(249,1,2)
 ,(250,1,3)
 ,(251,1,4)
 ,(252,1,5)
 ,(253,1,6)
 ,(254,1,7)
 ,(255,1,8)
 ,(256,1,9)
 ,(257,1,10)
 ,(258,1,11)
 ,(259,1,13)
 ,(260,1,12)
 ,(261,1,15)
 ,(262,1,14)
 ,(263,1,17)
 ,(264,1,16)
 ,(265,1,19)
 ,(266,1,18)
 ,(267,1,21)
 ,(268,1,20)
 ,(269,1,23)
 ,(270,1,22)
 ,(271,1,25)
 ,(272,1,24)
 ,(273,1,27)
 ,(274,1,26)
 ,(275,1,29)
 ,(276,1,28)
 ,(277,1,31)
 ,(278,1,30)
 ,(279,1,33)
 ,(280,1,32)
 ,(281,1,35)
 ,(282,1,34)
 ,(283,1,37)
 ,(284,1,36)
 ,(285,1,39)
 ,(286,1,38)
 ,(287,1,41)
 ,(288,1,40)
 ,(289,1,43)
 ,(290,1,42)
 ,(291,1,45)
 ,(292,1,46)
 ,(293,1,44)
 ,(294,1,48)
 ,(295,1,49)
 ,(296,1,50)
 ,(297,1,52)
 ,(298,1,53)
 ,(299,1,54)
 ,(300,1,55)
 ,(301,1,56)
 ,(302,1,57)
 ,(303,1,58)
 ,(304,1,59)
 ,(305,1,47)
 ,(306,1,61)
 ,(307,1,62)
 ,(308,1,63)
 ,(309,1,64)
 ,(310,1,65)
 ,(311,1,60)
 ,(312,1,66)
 ,(313,1,67)
 ,(314,1,68)
 ,(315,1,69)
 ,(316,1,70)
 ,(317,1,72)
 ,(318,1,73)
 ,(319,1,74)
 ,(320,2,1)
 ,(321,2,2)
 ,(322,2,3)
 ,(323,2,4)
 ,(324,2,6)
 ,(325,2,5)
 ,(326,2,8)
 ,(327,2,7)
 ,(328,2,10)
 ,(329,2,11)
 ,(330,2,12)
 ,(331,2,13)
 ,(332,2,14)
 ,(333,2,9)
 ,(334,2,15)
 ,(335,2,16)
 ,(336,2,17)
 ,(337,2,18)
 ,(338,2,19)
 ,(339,2,20)
 ,(340,2,21)
 ,(341,2,22)
 ,(342,2,23)
 ,(343,2,24)
 ,(344,2,26)
 ,(345,2,25)
 ,(346,2,28)
 ,(347,2,27)
 ,(348,2,30)
 ,(349,2,29)
 ,(350,2,32)
 ,(351,2,31)
 ,(352,2,34)
 ,(353,2,33)
 ,(354,2,36)
 ,(355,2,35)
 ,(356,2,38)
 ,(357,2,37)
 ,(358,2,40)
 ,(359,2,42)
 ,(360,2,41)
 ,(361,2,44)
 ,(362,2,43)
 ,(363,2,39)
 ,(364,2,46)
 ,(365,2,45)
 ,(366,2,48)
 ,(367,2,47)
 ,(368,2,50)
 ,(369,2,49)
 ,(370,2,52)
 ,(371,2,51)
 ,(372,2,54)
 ,(373,2,53)
 ,(374,2,56)
 ,(375,2,55)
 ,(376,2,58)
 ,(377,2,57)
 ,(378,2,60)
 ,(379,2,59)
 ,(380,2,62)
 ,(381,2,61)
 ,(382,2,64)
 ,(383,2,63)
 ,(384,2,66)
 ,(385,2,65)
 ,(386,2,68)
 ,(387,2,67)
 ,(388,2,70)
 ,(389,2,72)
 ,(390,2,71)
 ,(391,2,74)
 ,(392,2,73)
 ,(393,2,69)
 ,(394,3,65)
 ,(395,3,66)
 ,(396,3,68)
 ,(397,3,69)
 ,(398,3,67)
 ,(399,3,70)
 ,(400,3,73)
 ,(401,3,71)
 ,(402,3,74)
 ,(403,4,3)
 ,(404,4,4)
 ,(405,4,21)
 ,(406,4,5)
 ,(407,4,23)
 ,(408,4,22)
 ,(409,4,25)
 ,(410,4,24)
 ,(411,4,27)
 ,(412,4,26)
 ,(413,4,29)
 ,(414,4,28)
 ,(415,4,31)
 ,(416,4,30)
 ,(417,4,33)
 ,(418,4,34)
 ,(419,4,32)
 ,(420,4,35)
 ,(421,4,37)
 ,(422,4,36)
 ,(423,4,39)
 ,(424,4,38)
 ,(425,4,41)
 ,(426,4,40)
 ,(427,4,43)
 ,(428,4,42)
 ,(429,4,45)
 ,(430,4,44)
 ,(431,4,47)
 ,(432,4,46)
 ,(433,4,49)
 ,(434,4,48)
 ,(435,4,51)
 ,(436,4,50)
 ,(437,4,53)
 ,(438,4,52)
 ,(439,4,55)
 ,(440,4,54)
 ,(441,4,57)
 ,(442,4,59)
 ,(443,4,58)
 ,(444,4,61)
 ,(445,4,60)
 ,(446,4,56)
 ,(447,4,63)
 ,(448,4,62)
 ,(449,4,65)
 ,(450,4,64)
 ,(451,4,67)
 ,(452,4,66)
 ,(453,4,69)
 ,(454,4,68)
 ,(455,4,71)
 ,(456,4,70)
 ,(457,4,73)
 ,(458,4,72)
 ,(459,4,74)
 ,(460,5,1)
 ,(461,5,3)
 ,(462,5,2)
 ,(463,5,5)
 ,(464,5,4)
 ,(465,5,7)
 ,(466,5,6)
 ,(467,5,9)
 ,(468,5,8)
 ,(469,5,11)
 ,(470,5,10)
 ,(471,5,13)
 ,(472,5,12)
 ,(473,5,15)
 ,(474,5,14)
 ,(475,5,17)
 ,(476,5,16)
 ,(477,5,20)
 ,(478,5,18)
 ,(479,5,21)
 ,(480,5,19)
 ,(481,5,23)
 ,(482,5,22)
 ,(483,5,25)
 ,(484,5,24)
 ,(485,5,27)
 ,(486,5,28)
 ,(487,5,29)
 ,(488,5,30)
 ,(489,5,26)
 ,(490,5,31)
 ,(491,5,32)
 ,(492,5,33)
 ,(493,5,73)
 ,(494,5,72)
 ,(495,5,70)
 ,(496,5,69)
 ,(497,5,68)
 ,(498,5,67)
 ,(499,5,66)
 ,(500,5,65)
 ,(501,5,63)
 ,(502,5,64)
 ,(503,5,61)
 ,(504,5,62)
 ,(505,5,59)
 ,(506,5,60)
 ,(507,5,57)
 ,(508,5,58)
 ,(509,5,55)
 ,(510,5,56)
 ,(511,5,53)
 ,(512,5,54)
 ,(513,5,51)
 ,(514,5,52)
 ,(515,5,49)
 ,(516,5,50)
 ,(517,5,45)
 ,(518,5,48)
 ,(519,5,42)
 ,(520,5,44)
 ,(521,5,40)
 ,(522,5,41)
 ,(523,5,37)
 ,(524,5,39)
 ,(525,5,36)
 ,(526,5,38)
 ,(527,5,34)
 ,(528,5,43)
 ,(529,5,35)
 ,(530,5,47)
 ,(531,5,71)
 ,(532,5,74)
 ,(533,5,46)
 ,(534,8,2)
 ,(535,8,3)
 ,(536,8,4)
 ,(537,7,1)
 ,(538,7,2)
 ,(539,7,4)
 ,(540,7,3)
 ,(541,7,6)
 ,(542,7,5)
 ,(543,7,8)
 ,(544,7,7)
 ,(545,7,10)
 ,(546,7,9)
 ,(547,7,12)
 ,(548,7,11)
 ,(549,7,14)
 ,(550,7,13)
 ,(551,7,16)
 ,(552,7,15)
 ,(553,7,18)
 ,(554,7,17)
 ,(555,7,20)
 ,(556,7,19)
 ,(557,7,22)
 ,(558,7,21)
 ,(559,7,24)
 ,(560,7,23)
 ,(561,7,26)
 ,(562,7,25)
 ,(563,7,28)
 ,(564,7,27)
 ,(565,7,30)
 ,(566,7,29)
 ,(567,7,32)
 ,(568,7,31)
 ,(569,7,34)
 ,(570,7,33)
 ,(571,7,36)
 ,(572,7,35)
 ,(573,7,38)
 ,(574,7,37)
 ,(575,7,40)
 ,(576,7,39)
 ,(577,7,42)
 ,(578,7,41)
 ,(579,7,44)
 ,(580,7,46)
 ,(581,7,48)
 ,(582,7,47)
 ,(583,7,45)
 ,(584,7,43)
 ,(585,7,50)
 ,(586,7,49)
 ,(587,7,52)
 ,(588,7,51)
 ,(589,7,54)
 ,(590,7,56)
 ,(591,7,55)
 ,(592,7,53)
 ,(593,7,58)
 ,(594,7,57)
 ,(595,7,60)
 ,(596,7,59)
 ,(597,7,62)
 ,(598,7,64)
 ,(599,7,63)
 ,(600,7,61)
 ,(601,7,66)
 ,(602,7,65)
 ,(603,7,68)
 ,(604,7,67)
 ,(605,7,70)
 ,(606,7,69)
 ,(607,7,72)
 ,(608,7,71)
 ,(609,7,74)
 ,(610,7,73)
 ,(611,6,1)
 ,(612,6,2)
 ,(613,6,4)
 ,(614,6,3)
 ,(615,6,6)
 ,(616,6,5)
 ,(617,6,8)
 ,(618,6,7)
 ,(619,6,9)
 ,(620,6,10)
 ,(621,6,12)
 ,(622,6,11)
 ,(623,6,13)
 ,(624,6,14)
 ,(625,6,16)
 ,(626,6,15)
 ,(627,6,18)
 ,(628,6,17)
 ,(629,6,20)
 ,(630,6,19)
 ,(631,6,22)
 ,(632,6,21)
 ,(633,6,24)
 ,(634,6,23)
 ,(635,6,25)
 ,(636,6,27)
 ,(637,6,28)
 ,(638,6,26)
 ,(639,6,29)
 ,(640,6,31)
 ,(641,6,30)
 ,(642,6,33)
 ,(643,6,32)
 ,(644,6,35)
 ,(645,6,34)
 ,(646,6,37)
 ,(647,6,36)
 ,(648,6,39)
 ,(649,6,38)
 ,(650,6,41)
 ,(651,6,43)
 ,(652,6,42)
 ,(653,6,40)
 ,(654,6,45)
 ,(655,6,44)
 ,(656,6,47)
 ,(657,6,46)
 ,(658,6,49)
 ,(659,6,48)
 ,(660,6,51)
 ,(661,6,50)
 ,(662,6,53)
 ,(663,6,52)
 ,(664,6,55)
 ,(665,6,54)
 ,(666,6,57)
 ,(667,6,56)
 ,(668,6,59)
 ,(669,6,58)
 ,(670,6,61)
 ,(671,6,63)
 ,(672,6,60)
 ,(673,6,65)
 ,(674,6,64)
 ,(675,6,67)
 ,(676,6,66)
 ,(677,6,62)
 ,(678,6,69)
 ,(679,6,68)
 ,(680,6,71)
 ,(681,6,70)
 ,(682,6,73)
 ,(683,6,72)
 ,(684,6,74)
) AS Source ([UserRoleActionID],[RoleID],[UserActionID])
ON (Target.[UserRoleActionID] = Source.[UserRoleActionID])
WHEN MATCHED AND (
	NULLIF(Source.[RoleID], Target.[RoleID]) IS NOT NULL OR NULLIF(Target.[RoleID], Source.[RoleID]) IS NOT NULL OR 
	NULLIF(Source.[UserActionID], Target.[UserActionID]) IS NOT NULL OR NULLIF(Target.[UserActionID], Source.[UserActionID]) IS NOT NULL) THEN
 UPDATE SET
  [RoleID] = Source.[RoleID], 
  [UserActionID] = Source.[UserActionID]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([UserRoleActionID],[RoleID],[UserActionID])
 VALUES(Source.[UserRoleActionID],Source.[RoleID],Source.[UserActionID])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [UserRoleAction]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[UserRoleAction] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET IDENTITY_INSERT [UserRoleAction] OFF
GO
SET NOCOUNT OFF
GO

/************************ END ADD USERROL ACTION TO THE DATABASE ****************************/

/*----------------------------------------- INSERT INTO FIRM-----------------------------------*/
GO


--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON

SET IDENTITY_INSERT [FirmDetails] ON

MERGE INTO [FirmDetails] AS Target
USING (VALUES
  (1,N'e4 Strategic',N'55 6th Road, Sandton, Hyde Park, 2196',N'0117318000',N'0878899556',N'www.e4.co.za',N'Ryan',N'Barlow',N'Robyn',N'Beckworth',N'Mrs',N'0117316167',N'rbeckworth@e4.co.za',N'12 Queen Nandi Drive, KZN',N'www.e4.co.za')
) AS Source ([FirmID],[FirmName],[FirmAddress],[FirmTelNo],[FirmFaxNo],[FirmwebURL],[DirectorName],[DirectorSurname],[CCManagerName],[CCManagerSurname],[CCTitle],[CCContactNumber],[CCEmail],[CCAddress],[CCWeb])
ON (Target.[FirmID] = Source.[FirmID])
WHEN MATCHED AND (
	NULLIF(Source.[FirmName], Target.[FirmName]) IS NOT NULL OR NULLIF(Target.[FirmName], Source.[FirmName]) IS NOT NULL OR 
	NULLIF(Source.[FirmAddress], Target.[FirmAddress]) IS NOT NULL OR NULLIF(Target.[FirmAddress], Source.[FirmAddress]) IS NOT NULL OR 
	NULLIF(Source.[FirmTelNo], Target.[FirmTelNo]) IS NOT NULL OR NULLIF(Target.[FirmTelNo], Source.[FirmTelNo]) IS NOT NULL OR 
	NULLIF(Source.[FirmFaxNo], Target.[FirmFaxNo]) IS NOT NULL OR NULLIF(Target.[FirmFaxNo], Source.[FirmFaxNo]) IS NOT NULL OR 
	NULLIF(Source.[FirmwebURL], Target.[FirmwebURL]) IS NOT NULL OR NULLIF(Target.[FirmwebURL], Source.[FirmwebURL]) IS NOT NULL OR 
	NULLIF(Source.[DirectorName], Target.[DirectorName]) IS NOT NULL OR NULLIF(Target.[DirectorName], Source.[DirectorName]) IS NOT NULL OR 
	NULLIF(Source.[DirectorSurname], Target.[DirectorSurname]) IS NOT NULL OR NULLIF(Target.[DirectorSurname], Source.[DirectorSurname]) IS NOT NULL OR 
	NULLIF(Source.[CCManagerName], Target.[CCManagerName]) IS NOT NULL OR NULLIF(Target.[CCManagerName], Source.[CCManagerName]) IS NOT NULL OR 
	NULLIF(Source.[CCManagerSurname], Target.[CCManagerSurname]) IS NOT NULL OR NULLIF(Target.[CCManagerSurname], Source.[CCManagerSurname]) IS NOT NULL OR 
	NULLIF(Source.[CCTitle], Target.[CCTitle]) IS NOT NULL OR NULLIF(Target.[CCTitle], Source.[CCTitle]) IS NOT NULL OR 
	NULLIF(Source.[CCContactNumber], Target.[CCContactNumber]) IS NOT NULL OR NULLIF(Target.[CCContactNumber], Source.[CCContactNumber]) IS NOT NULL OR 
	NULLIF(Source.[CCEmail], Target.[CCEmail]) IS NOT NULL OR NULLIF(Target.[CCEmail], Source.[CCEmail]) IS NOT NULL OR 
	NULLIF(Source.[CCAddress], Target.[CCAddress]) IS NOT NULL OR NULLIF(Target.[CCAddress], Source.[CCAddress]) IS NOT NULL OR 
	NULLIF(Source.[CCWeb], Target.[CCWeb]) IS NOT NULL OR NULLIF(Target.[CCWeb], Source.[CCWeb]) IS NOT NULL) THEN
 UPDATE SET
  [FirmName] = Source.[FirmName], 
  [FirmAddress] = Source.[FirmAddress], 
  [FirmTelNo] = Source.[FirmTelNo], 
  [FirmFaxNo] = Source.[FirmFaxNo], 
  [FirmwebURL] = Source.[FirmwebURL], 
  [DirectorName] = Source.[DirectorName], 
  [DirectorSurname] = Source.[DirectorSurname], 
  [CCManagerName] = Source.[CCManagerName], 
  [CCManagerSurname] = Source.[CCManagerSurname], 
  [CCTitle] = Source.[CCTitle], 
  [CCContactNumber] = Source.[CCContactNumber], 
  [CCEmail] = Source.[CCEmail], 
  [CCAddress] = Source.[CCAddress], 
  [CCWeb] = Source.[CCWeb]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([FirmID],[FirmName],[FirmAddress],[FirmTelNo],[FirmFaxNo],[FirmwebURL],[DirectorName],[DirectorSurname],[CCManagerName],[CCManagerSurname],[CCTitle],[CCContactNumber],[CCEmail],[CCAddress],[CCWeb])
 VALUES(Source.[FirmID],Source.[FirmName],Source.[FirmAddress],Source.[FirmTelNo],Source.[FirmFaxNo],Source.[FirmwebURL],Source.[DirectorName],Source.[DirectorSurname],Source.[CCManagerName],Source.[CCManagerSurname],Source.[CCTitle],Source.[CCContactNumber],Source.[CCEmail],Source.[CCAddress],Source.[CCWeb])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE
;
GO
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [FirmDetails]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[FirmDetails] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO

SET IDENTITY_INSERT [FirmDetails] OFF
GO
SET NOCOUNT OFF
GO
/*----------------------------------------- INSERT INTO FIRM -----------------------------------*/